<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop集群搭建</title>
      <link href="/2023/07/24/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/07/24/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop集群搭建"><a href="#Hadoop集群搭建" class="headerlink" title="Hadoop集群搭建"></a>Hadoop集群搭建</h1><p>Hadoop集群搭建笔记<br>    本文档在最小化安装centos7后的操作。</p><pre><code>首先，对于大数据集群提前进行主机名、IP地址、主次服务的规划：    node01 ：192.168.199.80 NN DN    node02 ：192.168.199.81 DN    node03 ：192.168.199.82 DN SN其中安装第一台机器时，建议在安装时就指定主机名，IP地址根据自己的局域网情况填写</code></pre><h3 id="1、常用软件工具的安装"><a href="#1、常用软件工具的安装" class="headerlink" title="1、常用软件工具的安装"></a>1、常用软件工具的安装</h3><p>​    sudo yum install net-tools<br>    sudo yum install vim</p><pre><code>sudo vim /etc/vimrc    添加  set ts=4</code></pre><h3 id="2、系统准备："><a href="#2、系统准备：" class="headerlink" title="2、系统准备："></a>2、系统准备：</h3><h4 id="2-1、关闭防火墙"><a href="#2-1、关闭防火墙" class="headerlink" title="2.1、关闭防火墙"></a>2.1、关闭防火墙</h4><p>​        sudo systemctl stop firewalld.service<br>        sudo systemctl disable firewalld.service</p><h4 id="2-2、关闭selinux"><a href="#2-2、关闭selinux" class="headerlink" title="2.2、关闭selinux"></a>2.2、关闭selinux</h4><p>​        sudo vim &#x2F;etc&#x2F;selinux&#x2F;config<br>           修改为 SELINUX&#x3D;disabled</p><h4 id="2-3、源码环境准备"><a href="#2-3、源码环境准备" class="headerlink" title="2.3、源码环境准备"></a>2.3、源码环境准备</h4><p>​    在家目录下，创建soft目录，拷贝jdk的rpm包和hadoop的tar包<br>    2.3.1、解压环境包<br>        sudo rpm -ivh jdk-8u281-linux-x64.rpm<br>        sudo tar -zxvf hadoop-2.7.1.tar.gz -C &#x2F;opt&#x2F;<br>    2.3.2、添加hadoop环境变量<br>        sudo vim &#x2F;etc&#x2F;profile.d&#x2F;hadoop.sh<br>            export HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop-2.7.1<br>            export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin<br>    2.3.3、改变hadoop文件权限<br>        cd &#x2F;opt<br>        sudo chown -R huser:huser &#x2F;opt&#x2F;hadoop-2.7.1<br>    2.3.4、创建HDFS的NN和DN工作主目录<br>        sudo mkdir &#x2F;var&#x2F;big_data<br>        sudo chown -R huser:huser &#x2F;var&#x2F;big_data</p><h3 id="3、hadoop系统配置"><a href="#3、hadoop系统配置" class="headerlink" title="3、hadoop系统配置"></a>3、hadoop系统配置</h3><p>​    本内容主要针对Hadoop的配置文件进行修改，修改原则和最开始的服务搭建要一致<br>    进入&#x2F;opt&#x2F;hadoop-2.7.1&#x2F;etc&#x2F;hadoop目录<br>    3.1、为Hadoop提供JAVA解释器路径信息，主要目的是解决远程访问hadoop时候JAVA_HOME无法继承的问题<br>        vim hadoop-env.sh<br>            export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default<br>    3.2、为Yarn任务、资源管理器提供Java运行环境<br>        vim yarn-env.sh<br>            export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default<br>    3.3、配置HDFS主节点信息、持久化和数据文件的主目录<br>        vim core-site.xml<br>            <property><br>                <name>fs.defaultFS</name><br>                <value>hdfs:&#x2F;&#x2F;node01:9000</value><br>            </property><br>            <property><br>                <name>hadoop.tmp.dir</name><br>                <value>&#x2F;var&#x2F;big_data</value><br>            </property><br>    3.4、配置HDFS默认的数据存放策略<br>        vim hdfs-site.xml<br>            <property><br>                <name>dfs.replication</name><br>                <value>2</value><br>            </property><br>            <property><br>                <name>dfs.namenode.secondary.http-address</name><br>                <value>node03:50090</value><br>            </property><br>    3.5、配置mapreduce任务调度策略<br>        vim mapred-site.xml<br>            <property><br>                <name>mapreduce.framework.name</name><br>                <value>yarn</value><br>            </property><br>    3.6、配置Yarn资源管理角色的信息<br>        vim yarn-site.xml<br>            <property><br>                <name>yarn.nodemanager.aux-services</name><br>                <value>mapreduce_shuffle</value><br>            </property><br>            <property><br>                <name>yarn.resourcemanager.hostname</name><br>                <value>node01</value><br>            </property><br>    3.7、配置datanode节点信息<br>        vim slaves<br>            node01<br>            node02<br>            node03<br>4、提前准备主机名解析文件，为后面的克隆机器做好准备（可选，若不做，克隆后为每台机器重新添加亦可）<br>    sudo vim &#x2F;etc&#x2F;hosts<br>        192.168.199.80  node01<br>        192.168.199.81  node02<br>        192.168.199.82  node03<br>    注意屏蔽或删除上面的127.0.0.1的信息</p><p>5、克隆其他集群信息<br>    关闭机器，准备克隆<br>    克隆后，修改node02、node03的IP和主机名<br>        sudo vim &#x2F;etc&#x2F;sysconfig&#x2F;networ-scripts&#x2F;ifcfg-ens33<br>        sudo vim &#x2F;etc&#x2F;hostname</p><p>6、下面开始配置集群的ssh免密<br>    在3台机器上执行产生自己的公钥：<br>        ssh-keygen -t rsa<br>            按照默认值回车确定<br>    将每台机器的公钥拷贝给每台机器，注意下面的指令要求3台机器都要执行：<br>        ssh-copy-id node01<br>        ssh-copy-id node02<br>        ssh-copy-id node03<br>7、格式化hdfs<br>    hdfs namenode -format</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop【连载中】</title>
      <link href="/2023/07/15/Hadoop/"/>
      <url>/2023/07/15/Hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><p>大数据的特点（5V）</p><p>数据体量大（Volume）</p><p>种类、来源多样化（Variety）</p><p>低价值密度（Value）</p><p>速度快（Velocity）</p><p>数据的质量（Veracity）</p><p>大数据业务分析的基本步骤：</p><p>1.明确分析目的和思路</p><p>2.数据收集</p><p>3.数据处理</p><p>4.数据分析</p><p>5.数据展现</p><p>Hadoop的优势（4高）</p><p>1）高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据丢失。</p><p>2）高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</p><p>3）高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</p><p>4）高容错性：能够自动将失败的任务重新分配。</p><p>数据分析方法论和数据分析的区别：</p><p>数据分析方法论是从宏观角度指导如何进行数据分析，数据分析是从微观角度指导如何进行数据分析</p><p>分布式和集群的区别：</p><p>分布式是多台机器，每台机器上部署不同组件</p><p>集群是多台机器，每台集群部署相同组件</p><p>负载均衡：解决一个处理不下多个一起处理</p><p>故障转移：解决单点故障，容忍错误发生，业务连续</p><p>伸缩性：动态扩容、缩容</p><p>Hadoop集群包括两个集群：HDFS集群、YARN集群</p><p>两个集群逻辑上分离（互相之间没有依赖）、通常物理上在一起（某些角色进程往往部署在同一台物理服务器上），都是标准的主从架构集群</p><p>HDFS集群（分布式存储）：主角色NameNode   从角色DataNode  主角色辅助角色SecondaryNameNode</p><p>YARN集群（资源管理、调度）：角色ResourceManager  从角色NodeManager</p><p>MapperReduce 并不存在集群，它是一个计算框架</p><p>Hadoop1.x和Hadoop2.x区别</p><p>在Hadoop1.x时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大，在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce只负责运算。</p><h2 id="HDFS架构概述"><a href="#HDFS架构概述" class="headerlink" title="HDFS架构概述"></a>HDFS架构概述</h2><p>HDFS本质就是一个文件系统，有目录树结构和Linux类似、分文件、文件夹</p><p>1）NameNode（nn）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等。</p><p>2）DataNode（dn）：在本地文件系统存储文件块数据，以及块数据的校验和。</p><p>3）SecondaryName Node（2nn）：每隔一段时间对NameNode元数据备份。</p><h3 id="认识硬盘、RAID："><a href="#认识硬盘、RAID：" class="headerlink" title="认识硬盘、RAID："></a>认识硬盘、RAID：</h3><p>硬盘是计算机的主要存储硬件，可以用来存储数据</p><p>硬盘分类：机械硬盘、固态硬盘、混合硬盘</p><p>RAID（磁盘阵列）：</p><p>由很多块独立的磁盘，组合成一个容量巨大的自盘组。多磁盘管理技术</p><h3 id="存储架构："><a href="#存储架构：" class="headerlink" title="存储架构："></a>存储架构：</h3><p>DAS存储架构（直连式存储）</p><p>NAS存储架构（网络接入存储）</p><p>SAN存储架构（存储区域网络存储）</p><p>文件设备：是一种存储和组织数据的方法，使用文件和树形目录的抽象逻辑代替了硬盘等物理设备使用数据块的概念</p><h3 id="文件名："><a href="#文件名：" class="headerlink" title="文件名："></a>文件名：</h3><p>DOS操作系统重文件名由文件主名和拓展名组成，之间以一个小圆点隔开</p><p>文件名可用于定位存储位置、区分不同文件，计算机实行按名存取的操作方式</p><p>某些符号因有其特殊含义，一般不允许出现在文件名中</p><h3 id="元数据："><a href="#元数据：" class="headerlink" title="元数据："></a>元数据：</h3><p>元数据又称之为解释性数据，记录数据的数据</p><p>文件系统元数据一般指文件大小、最后修改时间、底层存储位置、属性、所属用户、权限等信息</p><p>Q1：如何解决海量数据存的下的问题</p><p>传统做法：单机存储</p><p>单机纵向：内存不够加内存</p><p>多机横向：采用多台机器存储</p><p>多台机器存储也就意味着迈入了分布式存储</p><p>Q2：如何解决海量数据文件查询便捷问题</p><p>借助元数据记录来解决这个问题，把文件和其存储的机器的位置信息记录下来</p><p>YARN架构</p><p>Q3：如何解决大文件传输效率慢的问题</p><p>通常的做法是分块存储，把大文件拆分成若干小块（block简写blk），分别存储在不同机器上，并行操作提高效率</p><p>Q4：如何解决硬件故障数据丢失问题？</p><p>冗余存储是个不错的选择，采用副本机制，副本越多，数据越安全</p><p>Q5：如何解决用户查询视角统一规整问题</p><p>传统的文件系统拥有所谓的目录树结构，带有层次感的namespace（命名空间），因为可以把分布式文件系统的元数据记录这一块这抽象成统一的目录树结构</p><p>HFDS</p><p>Hadoop分布式文件系统，该系统解决大数据如何存储问题，分布式意味着是横跨在多台计算机上的存储系统、并且具有高度容错率，提供统一的访问接口。</p><p>HDFS设计目标</p><p>硬件故障是常态，HDFS可能有成百上千的服务器组成，每一个组件都有可能出现故障。因此<strong>故障检测</strong>和<strong>自动快速恢复</strong>是HDFS的核心架构目标</p><p>HDFS上的应用主要是以<strong>流式读取数据</strong>，HDFS被设计成用于批处理，而不是用户交互式的。</p><p>HDFS被调整为<strong>大文件</strong>，提供很高的聚合数据宽带。</p><p>大部分HDFS应用对文件要求的是<strong>write-one-read-many</strong>访问模型，一个文件一旦创建、写入、关闭之后就不需要修改了。</p><p>移动计算的代价比之移动数据的代价低。</p><p>HDFS重要特性——主从架构</p><p>Namenode是HDFS主节点，Datanode是HDFS从节点，两种角色各司其职，共同协调</p><p>HDFS重要特性——分块存储机制</p><p>HDFS中的文件在物理上是分块存储（block）的，块的大小可以通过配置参数来规定，参数位于hdfs-default.xml中：dfs.blocksize。默认大小是128M</p><p>HDFS重要特性——副本机制</p><p>文件的所有block都会有副本，每个文件的block大小和副本系数都是可配置的</p><p>默认dfs.replication的值是3，也就是额外再复制两份，连同本身总共3份而不是复制三份</p><p>HDFS重要特性——namespace</p><p>HDFS支持传统的层次型文件组织结构。HDFS会给客户端提供一个统一的抽象目录树</p><p>HDFS重要特性——元数据管理</p><p>Namenode管理的元数据具有两种类型：</p><p>1.文件自身属性信息</p><p>2.文件块位置映射信息</p><p>HDFS重要特性——数据块存储</p><p>文件的各个block的具体存储管理由DataNode节点承担。</p><p>hadoop dfs 、hdfs dfs 、hadoop fs三者区别：</p><p>hadoop dfs只能操作HDFS文件系统（包括与Local FS之间的操作），不过已经不适用了</p><p>hdfs dfs 只能操作HDFS文件系统相关（包括与Local FS间的操作），常用</p><p>hadoop fs 可操作任意文件系统，不仅仅是hdfs文件系统，使用范围更广（官方使用版）</p><h4 id="常见命令——创建、查看、上传、下载"><a href="#常见命令——创建、查看、上传、下载" class="headerlink" title="常见命令——创建、查看、上传、下载"></a>常见命令——创建、查看、上传、下载</h4><p><strong>创建目录</strong><code>hadoop fs -mkdir [-p] &lt;path&gt;</code></p><p><strong>查看指定目录下内容</strong> <code>hadoop fs -ls [-R] [&lt;path&gt;...]</code></p><p><strong>上传文件到指定目录下（1）</strong> <code>hadoop fs [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</code></p><p>path 指定目录路径            -h人性化显示文件size      -R递归查看指定目录及其子目录</p><p><strong>上传文件到指定目录下（2）</strong> <code>hadoop fs -moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;</code> </p><p>和 -put 功能一样，只不过上传结束，源数据会被删除</p><p><strong>查看HDFS文件内容（1）</strong><code>hadoop fs -cat &lt;src&gt; ...</code></p><p>不建议使用它来读取大文件内容</p><p><strong>查看HDFS文件内容（2）</strong><code>hadoop fs -tail [-f] &lt;file&gt;</code></p><p>查看文件最后1KB的内容，-f选择可以动态显示文件中追加的内容</p><p><strong>查看HDFS文件内容（3）</strong><code>hadoop -hand &lt;file&gt;</code></p><p>查看文件最后前1KB的内容</p><p><strong>下载HDFS文件（1）</strong><code>hadoop fs -get [-f] [-p] &lt;src&gt;...&lt;localdst&gt;</code></p><p>下载文件到本地文件系统指定目录，Localdst必须是目录</p><p>-f 覆盖模板文件（在已存在的情况喜爱） -p保留访问和修改时间，所有权和权限</p><p><strong>下载HDFS文件（2）</strong><code>hadoop fs -getmerge [-nl] [-skip-empty-file] &lt;src&gt; &lt;localdst&gt;</code></p><p>下载多个文件合并到本地文件系统的一个文件中</p><p>-nl选项表示在每个文件末尾添加换行符</p><p><strong>追加数据到HDFS文件中</strong><code>hadoop fs -appendToFile &lt;localdst&gt;...&lt;dst&gt;</code></p><p>将所有给定本地文件的内容追加到给定dst文件。dst如果文件不存在则创建该文件，若 <code>&lt;localSrc&gt;</code>为—，则输入为从标准输入中读取。</p><p><strong>查看HDFS磁盘空间</strong><code>hadoop fs -df [-h] [&lt;path&gt;...]</code></p><p>显示文件系统的容量，可用空间和已用空间</p><p><strong>查看HDFS文件使用量</strong><code>hadoop fs -du [-s] [-h] [&lt;path&gt;...]</code></p><p>-s：表示显示指定路径文件长度的汇总摘要，而不是单个文件的摘要</p><p>-h：选项将以“人类可读”的方式格式化文件大小</p><p><strong>HDFS数据移动操作</strong><code>hadoop fs -mv &lt;src&gt;...&lt;dst&gt;</code></p><p>移动文件到指定文件夹下，可以使用该命令移动数据，重命名文件的名称</p><p><strong>拷贝HDFS文件</strong> <code>hadoop fs -cp [-f] &lt;src&gt;...&lt;dst&gt;</code></p><p>-f 覆盖目标文件（已存在下）</p><p><strong>修改HDFS文件副本个数</strong> <code>hadoop fs -setrep [-R] [-w] &lt;rep&gt; &lt;path&gt;</code></p><p>修改制定文件的副本个数 -R表示递归 修改文件夹下及其所有 -w客户端是否等待副本修改完毕</p><p>HDFS Java 客户端API</p><p>重要的客户端核心类就两个——Configuration和FileSystem </p><p>Configuration：配置对象类，用于加载或设置参数属性</p><p>FileSystem：文件系统对象基类。针对不同文件系统有不同具体实现。该类封装了文件系统相关的操作方法。</p><p>执行报错：客户端没有权限——修改用户权限在@Before内个类里面</p><p>下载文件执行报错：找不到winutils.exe、HADOOP_HOME没有配置——将winutils.exe和hadoop.exe文件放入HADOOP_HOME下然后重启ide</p><p>Goole-option是Bazel Project 中的命令行参数解析器</p><h3 id="案例：数据舆情上报"><a href="#案例：数据舆情上报" class="headerlink" title="案例：数据舆情上报"></a>案例：数据舆情上报</h3><p>第一步：生成任务列表</p><p>第二步：舆情数据上传动作</p><p>PS：在进行上传的时候，首先把任务列表标记为 copy  表示正在上传</p><p>​如果上传成功  标记位done  表示上传结束</p><p><img src="/1690361813641.png" alt="1690361813641"></p><h2 id="HDFS数据存储与数据管理"><a href="#HDFS数据存储与数据管理" class="headerlink" title="HDFS数据存储与数据管理"></a>HDFS数据存储与数据管理</h2><p>常见客户端：Shell Command、JavaAPI、C API libhdfe</p><p>WebHDFS</p><p>提供了访问HDFS的RESTful接口，内置组件，默认开启。当客户端请求某文件时，WebHDFS会将其重定向到该资源所在的datanode。</p><p>HttpFS</p><p>提供ERSTful接口的网关服务器，该网关支持所有HDFS文件操作，对于文件CURD的操作全部提交给HttpFS服务进行中转，然后由HttpFS去跟HDFS集群交互。HttpFS是一个独立于HDFS的服务，若使用需要手动安装。</p><p><img src="/1690440964183.png" alt="1690440964183"></p><p>WebHDFS和HttpFS之间区别</p><p><img src="/1690441059887.png" alt="1690441059887"></p><p>WebHDFS：内置，默认开启，对外提供Restful，直接访问NameNode和DataNode，端口由dfs.namenode.http-address指定，默认值9870</p><p>HttpFS：代理，对外提供Restful，通过代理服务，底层还是WebHDFS，客户端不跟hdfs直接交互，端口号14000</p><p>HDFS文件存储格式</p><p>查看相关文件可以使用可视化工具，能力非常强悍！还可以转换为CSV格式</p><p><img src="/1690444644653.png" alt="1690444644653"></p><p>行式存储：同一行数据存储在一起。适合插入，不适合查询。</p><p>列式存储：同一列数据存储在一起。适合查询，不适合插入。</p><h4 id="重点掌握两种格式——ORC和Parquet"><a href="#重点掌握两种格式——ORC和Parquet" class="headerlink" title="重点掌握两种格式——ORC和Parquet"></a>重点掌握两种格式——ORC和Parquet</h4><p>1）TextFile</p><p>文本格式最常见，通常按行存储，以回车换行符区分不同行数据。最大缺点是，它不支持块级别压缩。优点是<strong>易读性</strong>比较好。</p><p>2）SequenceFile </p><p>序列化文件，每条数据记录都是<strong>key、value键值对</strong>进行<strong>序列化存储</strong>（二进制格式）。序列化文件与文本文件相比更紧凑，支持record级、block块级压缩。压缩的同时支持文件切分。通常把SequenceFile作为中间数据存储格式。例如，将大量小文件合并放入到一个SequenceFile中。</p><p><strong>record</strong> 就是一个kv键值对，其中数据保存在value中。可以选择是否针对value进行压缩。</p><p><strong>block</strong>就是多个record的结合。block级别压缩性能更好</p><p>3）AvroFile</p><p>Avro是<strong>基于行</strong>的存储格式，它在每个文件中都包含<strong>JSON格式的scheme定义</strong>，从而提高了互操作性并允许scheme的变化（删除列、添加列）。除了支持可切分以外，还支持<strong>块压缩</strong>。适合于大量频繁写入宽表数据（字段多列多）的场景，其序列化反序列化很快。</p><p>4）RCFile</p><p>行列混合体，Hive Record Column File（记录列文件），且支持压缩、切分。但不支持schema扩展，如果要添加新的列，必须重写文件。</p><p>5）ORCFile</p><p>优化版的RC，并不是单纯的列式存储格式，ORC有多种文件压缩方式，并且有着很高的压缩比，文件是可分的（Split），ORC文件是以<strong>二进制方式存储</strong>的，不可以直接读取。</p><p>6）ParquetFile</p><p>存储模型主要是由行组、列块、页组成。也是以二进制存储的。所以是不可以直接读取的。文件格式是自解析的。支持块压缩。</p><p>新一代存储格式Arrow</p><p>跨语言平台，是一种列式内存数据结构。主要用于构建数据系统。</p><p><img src="/1690446739903.png" alt="1690446739903"></p><p>促进组件通信，缩减通信时序列化。如果提升数据移动性能的？因为无需进行反序列化，使用内存中数据。</p><p>文件压缩格式</p><p>Linux上使用gzip进食数据压缩，Windows上使用zip进行数据压缩。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip random_data.zip</span><br><span class="line"></span><br><span class="line">du -h random_data</span><br><span class="line"></span><br><span class="line">tar -cvzf random_data.tar.gz random_data</span><br></pre></td></tr></table></figure><p>Hadoop支持的压缩对比</p><p><img src="/1690449706807.png" alt="1690449706807"></p><p><img src="/1690449735255.png" alt="1690449735255"></p><p>压缩比高的速度慢，斟酌使用</p><p>HFDS异构存储类型：冷热温冻</p><p>什么是异构存储？</p><p>它是可以根据各个存储介质读写特性不同进行选择。例如冷热数据的UC你出1，对冷数据采取容量大，读写性能不高的存储介质如机械硬盘，对于热数据，可使用SSD硬盘存储。异构特性允许我们<strong>对不同文件选择不同的存储介质</strong>进行保存。</p><p>如何让HDFS知道集群中的数据存储目录是哪种类型存储介质？</p><p>配置属性时主动声明，HDFS并没有自动检测的能力。</p><p>配置参数dfs.datanode.data.dir &#x3D; [SSD]file:&#x2F;&#x2F;&#x2F;grid&#x2F;&#x2F;&#x2F;dn&#x2F;ssd0</p><p>如果目录前没有带上<code>[SSD][DISK][ARCHIVE][RAM_DISK]</code>这四种类型中的任何一种，则默认是DISK类型。</p><p>块存储类型选择策略</p><p>块存储指的是对HDFS文件的数据块副本存储。对于数据的存储介质，HDFS的BlockStoragePolicySuite类内部定义了6种策略。Hot、cold、warn、all_ssd、one_ssd、lazy_persist。前三种根据冷热数据区分，后三种根据磁盘性质区分。</p><p>Hot：用于存储和计算，所有副本都存储在DISK中。</p><p>Cold：仅适用于计算量有限的存储，所有副本都存储在ARCHIVE。</p><p>Warn：部分热和部分冷。热时，存储在DISK中，其余都是ARCHIVE。</p><p>All_SSD：将所有副本存储在SSD中</p><p>one_ssd：用于将副本之一存储在ssd中，其余存储在disk中</p><p>lazy_persist：用于在内存中写入具有单个副本的快。首先将副本写入Ram_Disk，然后将其延迟保存入disk中。</p><p><img src="/1690462643711.png" alt="1690462643711"></p><p>块存储类型选择策略——命令</p><p>列出所有存储策略：hdfs storagepolicies -listPolicies</p><p>设置存储策略：hdfs storagepolicies -setStoragePolicy -path <path> -policy <policy></p><p>取消存储策略：hdfs storagepolicies -unsetStoragePolicy -path <path></p><p>获取存储策略：hdfs storagepolicies -getStoragePolicy -path <path></p><h3 id="案例：冷热温数据异构存储"><a href="#案例：冷热温数据异构存储" class="headerlink" title="案例：冷热温数据异构存储"></a>案例：冷热温数据异构存储</h3><p>step1：配置datanode存储目录，指定存储介质类型</p><p>step2：重启HDFS集群，验证配置</p><p><code>hdfs storagepolicies -setStoragePolicy -path /data/hdfs-test/data_phase/hot -policy HOT</code></p><p>实例：将目录文件设置成HOT类型</p><p>step3：上传文件测试异构存储</p><p>hdfs dfs -put &#x2F;etc&#x2F;profile &#x2F;data&#x2F;hdfs-test&#x2F;data_phase&#x2F;hot</p><p>step4：查看不同存储策略文件的block位置</p><p>hdfs fsck &#x2F;data&#x2F;hdfs-test&#x2F;data_phase&#x2F;hot&#x2F;profile -files -blocks -locations</p><p>HDFS内存存储策略支持——Lazy Persist介绍</p><p>Datanode异步地将内存中数据刷新到磁盘，从而减少代价较高的磁盘IO操作。</p><p><img src="/1690505590056.png" alt="1690505590056"></p><p>内存的异步持久化存储是指数据不是马上落盘，而是懒惰的、延时地进行处理。</p><p>虚拟内存盘配置：mount -t tmpfs -o size&#x3D;1g tmpfs &#x2F;mnt&#x2F;dn-tmpfs&#x2F;</p><p>内存存储介质设置：将机器中已经完成好的虚拟内存配置到dfs.datanode.data.dir中，其次还要带上RAM_DISK标签。</p><p>参数设置优化：dfs.storage.policy.enabled是否开启异构存储，默认true开启。</p><p>​   dfs.datanode.max.locked.memory 用于在数据节点上的内存中缓存块副本的内存量（字节）。</p><p>​     默认情况下，参数设置为0，禁用内存中缓存。</p><p>step4：在目录上设置存储策略</p><p>hdfs storagepolicies -setStoragePolicy -path <path> -policy LAZY_PERSIST</p><h2 id="HDFS集群管理与运维"><a href="#HDFS集群管理与运维" class="headerlink" title="HDFS集群管理与运维"></a>HDFS集群管理与运维</h2><p>HDFS数据迁移</p><p>要考虑带宽、性能、还有其他因素。</p><p>DistCp：分布式拷贝工具，定位用于数据迁移，定期在集群之间和集群内部备份数据。底层使用MapReduce在集群之间或并行在同一集群内复制文件，执行复制的MapReduce只有Mapper阶段。</p><p><img src="/1690507671997.png" alt="1690507671997"></p><p>其中 source_path、target_path 需要带上地址前缀以区分不同的集群</p><p>场景：安全模型现场探究</p><p>在安全模式下，我们可以浏览文件系统目录层次结构，但是却无法创建文件夹，安全模式下的文件系统类似处于一种不可读的特殊状态。</p><p>Hadoop中的安全模式safemode是NameNode的维护状态，在此状态下NameNode不允许对文件系统进行任何更改，可以接收读数据请求。</p><p>自动进入时间：HDFS集群启动时，当<strong>NameNode启动成功</strong>之后，此时集群就会<strong>自动进入安全模式</strong>。</p><p>自动离开条件（hdfs-site.xml、hdfs-default.xml）：</p><p><img src="/1690511466282.png" alt="1690511466282"></p><p>手动获取安全模式状态信息：hdfs dfsadmin -safemode get</p><p>手动进入命令：hdfs dfsadmin -safemode enter</p><p>手动进入安全模式对于集群维护或者升级的时候非常有用，在这是HDFS的数据是只读的。</p><p>手动离开命令：hdfs dfsadmin -safemode leave</p><p>短路本地读取：</p><p>在HDFS中,不管是Local Reads ( DFSClient和Datanode在同一个节点)还是Remote Reads ( DFSClient和Datanode不在同一个节点) , 底层处理方式都是一样的,都是先由Datanode读取数据,然后再通过RPC (基于TCP )把数据传给DFSClient。这样处理是比较简单的,但是性能会受到一-些影响,因为需要Datanode在中间做一次中转。</p><p>尤其，L<strong>ocalReads的时候，既然DFSClient和数据是在一个机器上面，那么很自然想到，让DFSClient绕开Datanode自己去读取数据</strong>。</p><p>安全性改进版设计实现（1）</p><p>配置（1）–libhadoop.so</p><p>因为java不能直接操作unix domain socket，所以需要安装Hadoop的Native包libhadoop.so。在编译Hadoop源码的时候可以通过native模块获取，可以用如下命令来检查native包是否安装好。</p><p><code>hadoop checknative</code></p><p>配置（2）–hdfs-site.xml</p><p>dfs.client.read.shortcircuit 是打开短路本地读取功能的开关。</p><p>dfs.domain.socket.path 是datanode和DFSClient之间沟通的Socket的本地路径</p><p>还要确保Socket本地路径提前创建好 mkdir -p &#x2F;var&#x2F;lib&#x2F;hadoop-hdfs</p><p>注意：创建的是文件夹hadoop-hdfs，而上述配置中的dn_socket是Datanode自己创建的，不是文件夹。</p><p>如何确认配置生效？</p><p>1.查看Datanode的日志，如下图所示即可代表Unix Domain Socket被启用了</p><p><img src="/1690514623268.png" alt="1690514623268"></p><p>2.读取一个文件到本地</p><p>使用命令找出文件的数据块位置信息，到对应的机器上进行本地下载操作。</p><p>下载完毕，打开Datanode的日志，日志中的下面信息就表明读取的时候用到了ShortCircuitLocalReads。</p><p><img src="/1690514738649.png" alt="1690514738649"></p><p>3.ReadStatistics API</p><p>通过HDFSDataInputStream的getReadStatistics API来获取读取数据的统计信息</p><p>安全性改进版设计实现（2）</p><p>借助Unix Domain Socket ，可以让A打开文件得到一个文件描述符，然后把文件描述符传递给B，B就能读取文件里面的内容了即使它没有相应的权限。</p><p>在HDFS的场景中，A就是Datanode，B就是DFSClient，需要读取的文件就是Datanode数据目录中的某个文件。</p><p>磁盘均衡器</p><p>在HDFS中，Datanode负责最终数据Block的存储，在所有机器上的磁盘之间分配数据块。当写入新的Block时，Datanodes将根据选择策略（<strong>循环策略</strong>或<strong>可用空间策略</strong>）来选择block的磁盘</p><p>循环策略：将新的block均匀分布在可用磁盘上，默认此策略。</p><p>可用空间策略：此策略将数据写入具有更多可用空间的磁盘。</p><p>在尝试运行的集群中<strong>采用循环策略</strong>时，Datanode有时会<strong>不均匀地填充其目录</strong>，从而导致某些磁盘已满而其他磁盘却很少使用的情况。如果我们使用<strong>基于可用空间的选择策略</strong>，则每个新写入将进入新添加的空磁盘，从而使用该期间的其他磁盘处于空闲状态。这将在新磁盘上<strong>创建瓶颈</strong>。</p><p>需要一种Intra Datanode Balancing（Datanode内数据块的均匀分布）</p><p><img src="/1690884481248.png" alt="1690884481248"></p><p>HDFS DISK Balancer功能——数据传播报告</p><p>为了衡量集群中哪些计算机遭受数据分布不均的影响,磁盘平衡器定义了<strong>Volume Data Density metric (卷&#x2F;磁盘</strong><br>**数据密度度量标准)<strong>和</strong>Node Data Density metric (节点数据密度度量标准)**。</p><p><img src="/1690884676563.png" alt="1690884676563"></p><p>节点数据密度：比较的是不同机器之间的。</p><p><img src="/1690884842054.png" alt="1690884842054"></p><p><img src="/1690884865363.png" alt="1690884865363"></p><p>HDFS DISK Balancer功能——磁盘平衡</p><p>当指定某个DataNode节点进行disk数据平衡,就可以先计算或读取当前的volume Data Density (磁卷数据密度)。</p><p>有了这些信息,我们可以轻松地确定哪些卷已超量配置,哪些卷已不足。</p><p>为了将数据从一个卷移动到DataNode中的另一个卷, Hadoop开发实现了基于RPC协议的Disk Balancer。</p><p>（我们不生产磁盘，我们只是大磁盘的搬运工。）</p><p>HDFS DISK Balancer开启——默认情况下，Hadoop集群上启动了Disk Balancer功能。通过在Hdfs-site.xml中调整<strong>dfs.disk.balancer.enabled</strong>参数值，选择在Hadoop中是否用磁盘平衡器。</p><h4 id="HDFS-DISK-Balancer相关命令"><a href="#HDFS-DISK-Balancer相关命令" class="headerlink" title="HDFS DISK Balancer相关命令"></a>HDFS DISK Balancer相关命令</h4><p>plan计划：<code>hdfs diskbalancer -plan &lt;datanode&gt;</code></p><p><img src="/1690885679719.png" alt="1690885679719"></p><p>Execute执行：<code>hdfs diskbalancer -execute &lt;JSON file path&gt;</code></p><p>execute命令针对为其生成计划的Datanode执行计划。</p><p>Query查询：<code>hdfs diskbalancer -query &lt;datanode&gt;</code></p><p>query命令从运行计划的Datanode获取HDFS磁盘平衡器的当前状态。</p><h4 id="纠删码技术"><a href="#纠删码技术" class="headerlink" title="纠删码技术"></a>纠删码技术</h4><p>为了提供容错能力, HDFS会根据repl ication factor (复制因子)在不同的DataNode上复制文件块。<br><strong>默认复制因子为3</strong> (注意这里的3指的是1+2&#x3D;3 ,不是额外3个) , 则原始块除外,还将有额外两个副本。每个副本使<br>用100%的存储开销,因此导致200%的存储开销。这些副本也消耗其他资源,例如网络带宽。</p><p><strong>纠删码技术( Erasure coding )简称EC</strong> ,是一种编码容错技术。最早用于通信行业,数据传输中的数据恢复。它通<br>过<strong>对数据进行分块,然后计算出校验数据,使得各个部分的数据产生关联性</strong>。当一部分数据块丢失时,可以通过剩<br>余的数据块和校验块计算出丢失的数据块。</p><p><img src="/1690887852412.png" alt="1690887852412"></p><p>Reed-Solomon（RS）码</p><p>Reed- Solomon ( RS )码是常用的一种纠删码,它有两个参数k和m ,记为RS(k , m)。<br>k个数据块组成一个向量被乘上一个生成矩阵( Generator Matrix ) GT从而得到一个码字( codeword )向量,该向<br>量由k个数据块( d0, d1.. d3 )和m个校验块( c0,c1 )构成。</p><p>纠删编码策略——默认情况下启用<strong>RS-6-3-1024K</strong>策略</p><p>step1：集群和硬件配置</p><p>编码和解码工作会消耗HDFS客户端和DataNode.上的额外CPU。<br>纠删码文件也分布在整个机架上,以实现机架容错。这意味着在读写条带化文件时,大多数操作都是在机架上进行的。因此,网络带宽也非常重要。对于机架容错,拥有足够数量的机架也很重要,每个机架所容纳的块数不超过EC奇偶校验块的数。<strong>机架数量&#x3D; (数据块+奇偶校验块) &#x2F;奇偶校验块</strong>后取整。</p><p>step2：纠删码策略设置</p><p>纠删码策略由参数dfs. namenode. ec. system. default. policy指定,默认是<strong>RS-6-3-1024k</strong> ,其他策略默认是禁用的。可以通过<code>hdfs ec [-enablePolicy -policy &lt;policyName&gt;]</code>命令启用策略集。</p><h4 id="动态扩容、节点服役"><a href="#动态扩容、节点服役" class="headerlink" title="动态扩容、节点服役"></a>动态扩容、节点服役</h4><p>节点上线:已有HDFS集群容量已不能满足存储数据的需求,需要在原有集群基础上动态添加新的DataNode节点。</p><p>step1：新机器基础环境准备</p><p>主机名和IP是否对应，Hosts映射，防火墙和时间同步。能否SSH免密登录以及JDK环境是否准备充分。</p><p>step2：Hadoop配置</p><p>修改namenode节点workers配置文件,增加新节点主机名,便于后续一键启停。</p><p>从namenode节点复制hadoop安装包到新节点,注意不包括<strong>hadoop. tmp. dir</strong>指定的数据存储目录。</p><p>新机器上配置hadoop环境变量</p><p>step3：手动启动Datanode进程</p><p>hdfs –daemon start datanode</p><p>step4：datanode负载均衡服务</p><p>首先要设置数据传输带宽：hdfs dfsadmin -setBalancerBandwidth 104857600</p><p>然后启动Balancer，等待集群自均衡完成即可：hdfs balancer -threshold 5</p><h4 id="动态缩容、节点退役"><a href="#动态缩容、节点退役" class="headerlink" title="动态缩容、节点退役"></a>动态缩容、节点退役</h4><p>节点下线:服务器需要进行退役更换,需要在当下的集群中停止某些机器上datanode的服务。</p><p>step1：添加退役节点</p><p>在namenode机器的<strong>hdfs-site. xml</strong>配置文件中需要提前配置<strong>dfs. hosts. exclude属性</strong>,该属性指向的文件就是所谓的黑名单列表,会被namenode排除在集群之外。如果文件内容为空,则意味着不禁止任何机器。</p><p>step2：刷新集群</p><p>在namenode所在的机器刷新节点：hdfs dfsadmin -refreshNodes</p><p>等待退役节点状态为decommissioned（所有块已经复制完成）</p><p>黑白名单</p><p>白名单——允许哪些机器加入到当前的HDFS集群中，是一种准入机制。（参数dfs.hosts指定）</p><p>黑名单——禁止哪些机器加入到当前的HDFS集群中，是一种禁入机制。（参数dfs.hosts.exclude指定）</p><p>高可用（HA）</p><p>单点故障（SFOF）是指系统中某一点一旦失效，就会让整个系统无法运作。</p><p>解决方法：给单点故障设置备份，形成主备架构。</p><p>MapReduce</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL总结</title>
      <link href="/2023/06/28/SQL%E6%80%BB%E7%BB%93/"/>
      <url>/2023/06/28/SQL%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL总结"><a href="#SQL总结" class="headerlink" title="SQL总结"></a>SQL总结</h1><p>本文章有关SQL语句的学习视频来自b站，名为<a href="https://www.bilibili.com/video/BV1UE41147KC?p=12&vd_source=49ee1efb30094586ccd1fa22817ca499">【中字】SQL进阶教程 | 史上最易懂SQL教程！</a></p><p>相关练习来自Leetcode网站。</p><h2 id="第一章-选择语句-6-30"><a href="#第一章-选择语句-6-30" class="headerlink" title="第一章 选择语句 6.30"></a>第一章 选择语句 6.30</h2><p>DISTINCT关键词可以删去重复项</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name , unit price</span><br><span class="line"></span><br><span class="line">       unit (price <span class="operator">*</span><span class="number">1.1</span> )  <span class="keyword">AS</span> <span class="keyword">new</span> price</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> products</span><br></pre></td></tr></table></figure><p>算数运算符顺序：* &#x2F;  大于 + - </p><p>逻辑运算符顺序：AND 大于 OR</p><p>想要去掉NOT ，可以每个部分取补集，AND关键词改变成OR，OR变成AND</p><p>IN (‘ ‘,’ ‘,’ ‘) ：减少使用OR的情况，给出括号里面的范围，看起来更清爽</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">From</span> products</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> quantity_in_stock <span class="keyword">IN</span> (<span class="string">&#x27;49&#x27;</span>,<span class="string">&#x27;38&#x27;</span>,<span class="string">&#x27;72&#x27;</span>)</span><br></pre></td></tr></table></figure><p>BETWEEN AND是包含临界值的。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> birth_data <span class="keyword">BETWEEN</span> <span class="string">&#x27;1990-1-1&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2000-1-1&#x27;</span></span><br></pre></td></tr></table></figure><p>LIKE关键词在使用的时候，%表示任意位数，_表示占用一位</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span> (<span class="string">&#x27;TRAIL&#x27;</span>,<span class="string">&#x27;AVENUE&#x27;</span>) <span class="keyword">AND</span> number <span class="keyword">LIKE</span>  <span class="string">&#x27;%9&#x27;</span></span><br></pre></td></tr></table></figure><p>REGEXP 正则表达式，可以在不适用%的情况下模糊查询，^打头，$结尾，|包含（可以无限套娃）[]里面的字母在后面字母的前面，[]可以给出一个范围，比如[a-h]e.</p><p>1.first names are ELKA or AMBUR</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;ELKA&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;AMBUR&#x27;</span></span><br></pre></td></tr></table></figure><p>视频里面给出的：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;elka|ambur&#x27;</span></span><br></pre></td></tr></table></figure><p>2.last names end with EY or ON</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;EY$&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;ON$&#x27;</span></span><br></pre></td></tr></table></figure><p>视频里面给出的：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;EY$|ON$&#x27;</span></span><br></pre></td></tr></table></figure><p>3.last names start with MY or contains SE</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^MY&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;SE&#x27;</span></span><br></pre></td></tr></table></figure><p>4.last names contain B followed by R or U</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;B|R|U&#x27;</span></span><br></pre></td></tr></table></figure><p>视频里面给出的：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;B[RU]&#x27;</span>  </span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;BR|BU&#x27;</span>  </span><br></pre></td></tr></table></figure><p>ORDER BY 可以使用多列查询，只需要使用,逗号隔开</p><p>LIMIT 6,3   —&gt;    6为偏移量，告诉Mysql跳过前6条记录然后获取3条记录</p><p>查询积分在前3的顾客</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> points <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line">LIMIT <span class="number">3</span></span><br></pre></td></tr></table></figure><p>注意点：句子的执行顺序不能错，不然Mysql会报错，正确执行顺序为<strong>select-from-where-order by-limit</strong></p><h3 id="练习-6-30"><a href="#练习-6-30" class="headerlink" title="练习 6.30"></a>练习 6.30</h3><p>1.给定表 <code>customer</code> ，里面保存了所有客户信息和他们的推荐人。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+------+-----------+</span><br><span class="line">| id   | name | referee_id|</span><br><span class="line">+------+------+-----------+</span><br><span class="line">|    1 | Will |      NULL |</span><br><span class="line">|    2 | Jane |      NULL |</span><br><span class="line">|    3 | Alex |         2 |</span><br><span class="line">|    4 | Bill |      NULL |</span><br><span class="line">|    5 | Zack |         1 |</span><br><span class="line">|    6 | Mark |         2 |</span><br><span class="line">+------+------+-----------+</span><br></pre></td></tr></table></figure><p>写一个查询语句，返回一个客户列表，列表中客户的推荐人的编号都 <strong>不是</strong> 2。</p><p>对于上面的示例数据，结果为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>我的答案，但是结果显示不对，提示没有NULL值的那几列，我选用NOT &#x3D; 结果也是没有NULL值那几列，应该是算术运算符只能获取到值类型的数据，像NULL这类特殊的需要用关键字取一下。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> customer</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> referee_id <span class="operator">&lt;&gt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>最后修改通过的答案：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> customer</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> referee_id <span class="operator">&lt;&gt;</span> <span class="number">2</span> <span class="keyword">OR</span> referee_id <span class="keyword">is</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>2.表：<code>Tweets</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| tweet_id       | int     |</span><br><span class="line">| content        | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">tweet_id 是这个表的主键。</span><br><span class="line">这个表包含某社交媒体 App 中所有的推文。</span><br></pre></td></tr></table></figure><p>写一条 SQL 语句，查询所有无效推文的编号（ID）。当推文内容中的字符数<strong>严格大于</strong> <code>15</code> 时，该推文是无效的。</p><p>以<strong>任意顺序</strong>返回结果表。</p><p>查询结果格式如下示例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tweets 表：</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| tweet_id | content                          |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| 1        | Vote for Biden                   |</span><br><span class="line">| 2        | Let us make America great again! |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line"></span><br><span class="line">结果表：</span><br><span class="line">+----------+</span><br><span class="line">| tweet_id |</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">+----------+</span><br><span class="line">推文 1 的长度 length = 14。该推文是有效的。</span><br><span class="line">推文 2 的长度 length = 32。该推文是无效的。</span><br></pre></td></tr></table></figure><p>单拿出来这道题，是因为SQL获取字符串长度是从百度上搜的。</p><h4 id="补充：字符串长度"><a href="#补充：字符串长度" class="headerlink" title="补充：字符串长度"></a>补充：字符串长度</h4><p>1、 length()</p><p>获取字符串的占位大小，一个汉字占三个字符,一个数字或字母占一个字符。</p><p><code>length(str1)</code></p><p>2、 char_length()&#x2F;character_length() </p><p>函数返回字符串的长度,以字符为单位。 </p><p><code>char_length(str1)</code><br><code>character_length(str1)</code></p><p>3、 bit_length()</p><p>一个汉字或者特殊字符的二进制长度为24，数字或字母的二进制长度为8</p><p><code>bit_length(str1)</code></p><p>解题答案：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tweet_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> Tweets</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> length(content) <span class="operator">&gt;</span><span class="number">15</span></span><br></pre></td></tr></table></figure><p>3.表: <code>Employees</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> 列名        <span class="operator">|</span> 类型     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary      <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">employee_id 是这个表的主键。</span><br><span class="line">此表的每一行给出了雇员id ，名字和薪水。</span><br></pre></td></tr></table></figure><p>写出一个SQL 查询语句，计算每个雇员的奖金。如果一个雇员的id是奇数并且他的名字不是以’M’开头，那么他的奖金是他工资的100%，否则奖金为0。</p><p>Return the result table ordered by <code>employee_id</code>.</p><p>返回的结果集请按照<code>employee_id</code>排序。</p><p>查询结果格式如下面的例子所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employees 表:</span><br><span class="line">+-------------+---------+--------+</span><br><span class="line">| employee_id | name    | salary |</span><br><span class="line">+-------------+---------+--------+</span><br><span class="line">| 2           | Meir    | 3000   |</span><br><span class="line">| 3           | Michael | 3800   |</span><br><span class="line">| 7           | Addilyn | 7400   |</span><br><span class="line">| 8           | Juan    | 6100   |</span><br><span class="line">| 9           | Kannon  | 7700   |</span><br><span class="line">+-------------+---------+--------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+-------+</span><br><span class="line">| employee_id | bonus |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| 2           | 0     |</span><br><span class="line">| 3           | 0     |</span><br><span class="line">| 7           | 7400  |</span><br><span class="line">| 8           | 0     |</span><br><span class="line">| 9           | 7700  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">解释：</span><br><span class="line">因为雇员id是偶数，所以雇员id 是2和8的两个雇员得到的奖金是0。</span><br><span class="line">雇员id为3的因为他的名字以&#x27;M&#x27;开头，所以，奖金是0。</span><br><span class="line">其他的雇员得到了百分之百的奖金。</span><br></pre></td></tr></table></figure><h4 id="补充：MySQL中if语句的使用"><a href="#补充：MySQL中if语句的使用" class="headerlink" title="补充：MySQL中if语句的使用"></a>补充：MySQL中if语句的使用</h4><p>MySQL IF 根据表达式的某个条件或值结果来执行一组 SQL 语句。</p><p>语法结构如下：</p><p>IF(expr,v1,v2)</p><p>其中：表达式 expr 得到不同的结果，当 expr 为真是返回 v1 的值，否则返回 v2.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,if(employee_id <span class="operator">%</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">left</span>(name,<span class="number">1</span>) <span class="operator">!=</span> <span class="string">&#x27;M&#x27;</span>,salary,<span class="number">0</span>) <span class="keyword">as</span> bonus</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Employees</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> employee_id</span><br></pre></td></tr></table></figure><h2 id="第二章-连接-7-2"><a href="#第二章-连接-7-2" class="headerlink" title="第二章 连接 7.2"></a>第二章 连接 7.2</h2><p>JOIN关键词-内连接和外连接，默认情况下是内连接</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>使用 JOIN 和 ON 关键词进行搭配</p><h4 id="跨数据库连接"><a href="#跨数据库连接" class="headerlink" title="跨数据库连接"></a>跨数据库连接</h4><p>根据选择的数据库不同，如果要跨数据库，选择哪个数据库要在表前面加上数据库名</p><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"></span><br><span class="line"><span class="keyword">JOIN</span> employees m</span><br><span class="line"></span><br><span class="line">          <span class="keyword">ON</span> e.reports_to <span class="operator">=</span> m.employee_id</span><br></pre></td></tr></table></figure><p>自连接和其他连接没啥区别，唯一的区别就是我们要使用不同的别名，还要给每列都加个别名。</p><h4 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.order_id,</span><br><span class="line">       o.order_data,</span><br><span class="line">       c.first_name,</span><br><span class="line">       c.last_name,</span><br><span class="line">       os.name <span class="keyword">AS</span> status</span><br><span class="line">       </span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"></span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line"></span><br><span class="line">         <span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">JOIN</span> order_statuses os</span><br><span class="line"></span><br><span class="line">         <span class="keyword">ON</span> o.status <span class="operator">=</span> os.order_status_id</span><br></pre></td></tr></table></figure><p>在实际开发中有可能要连接数十张表，所以每次选择尽量选择需要的数据。</p><h4 id="复合连接条件"><a href="#复合连接条件" class="headerlink" title="复合连接条件"></a>复合连接条件</h4><p>–使用多列确定行信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> order_items oi</span><br><span class="line"></span><br><span class="line"><span class="keyword">JOIN</span> order_item_notes oin</span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> oi.order _id <span class="operator">=</span> oin.order id          </span><br><span class="line"></span><br><span class="line"><span class="keyword">AND</span> oi. product_ id <span class="operator">=</span> oin. product_ id</span><br></pre></td></tr></table></figure><p>其实就是连接查询只不过要多一个条件罢了。</p><h4 id="隐式链接（不推荐使用）"><a href="#隐式链接（不推荐使用）" class="headerlink" title="隐式链接（不推荐使用）"></a>隐式链接（不推荐使用）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"></span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line"></span><br><span class="line">     <span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id</span><br></pre></td></tr></table></figure><p>隐式链接将改写成下面这种情况，MySQL虽然支持该语法，但是不推荐使用，如果不小心忘记打WHERE语句，就会变成交叉连接。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> o.customer_id <span class="operator">=</span> c.customer_id</span><br></pre></td></tr></table></figure><p>注意：所有的连接尽量都去使用显式连接！</p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>–内连接只能返回查询前一段时间内的信息，如果在某短时间内有更新，使用外连接</p><p>左外连接–左表记录会被返回，不管条件正确还是错误</p><p>右外连接–右表记录会被返回，不管条件正确还是错误</p><h4 id="多表外连接"><a href="#多表外连接" class="headerlink" title="多表外连接"></a>多表外连接</h4><p>在使用多表连接时，最好避免使用右链接，因为如果有内左右三种情况，会将代码变得很复杂。</p><h4 id="子外连接"><a href="#子外连接" class="headerlink" title="子外连接"></a>子外连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees m</span><br><span class="line"></span><br><span class="line">         <span class="keyword">ON</span> e.reports_to <span class="operator">=</span> m.employee_id</span><br></pre></td></tr></table></figure><p> 如果不加入left这个关键字，则没有显示自己管理自己的这种情况，比如ceo没有上级。</p><h4 id="USING子句"><a href="#USING子句" class="headerlink" title="USING子句"></a>USING子句</h4><p>如果两个表之间有列的名称是完全一样的，我们就可以使用USING语句替换ON子句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.order_id</span><br><span class="line"></span><br><span class="line">          c.first_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">order</span> o</span><br><span class="line"></span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line"></span><br><span class="line">          <span class="comment">-- ON o.customer_id = c.customer_id</span></span><br><span class="line">          </span><br><span class="line">          <span class="keyword">USING</span> (customer_id)</span><br></pre></td></tr></table></figure><h4 id="自然连接（不推荐使用）"><a href="#自然连接（不推荐使用）" class="headerlink" title="自然连接（不推荐使用）"></a>自然连接（不推荐使用）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"></span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> customers c</span><br></pre></td></tr></table></figure><p>自然连接很危险，因为我们让数据库引擎自己猜该怎么连接，没办法人为控制它。</p><h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><p>一般用于连接第一个表的每条记录和第二表的每条记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers c</span><br><span class="line"></span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> products p</span><br></pre></td></tr></table></figure><h4 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h4><p>使用UNION我们可以合并多段查询的记录，结果可以基于不同的表记录。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> shippers</span><br></pre></td></tr></table></figure><p>但是需要注意一点的就是要让查询返回的列数量一致，否则会报错！</p><h3 id="练习7-3"><a href="#练习7-3" class="headerlink" title="练习7.3"></a>练习7.3</h3><p>1.表：<code>Visits</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| visit_id    | int     |</span><br><span class="line">| customer_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">visit_id 是该表的主键。</span><br><span class="line">该表包含有关光临过购物中心的顾客的信息。</span><br></pre></td></tr></table></figure><p>表：<code>Transactions</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| transaction_id | int     |</span><br><span class="line">| visit_id       | int     |</span><br><span class="line">| amount         | int     |</span><br><span class="line">+----------------+---------+</span><br><span class="line">transaction_id 是此表的主键。</span><br><span class="line">此表包含 visit_id 期间进行的交易的信息。</span><br></pre></td></tr></table></figure><p>有一些顾客可能光顾了购物中心但没有进行交易。请你编写一个 SQL 查询，来查找这些顾客的 ID ，以及他们只光顾不交易的次数。</p><p>返回以 <strong>任何顺序</strong> 排序的结果表。</p><p>查询结果格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">Visits</span><br><span class="line">+----------+-------------+</span><br><span class="line">| visit_id | customer_id |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| 1        | 23          |</span><br><span class="line">| 2        | 9           |</span><br><span class="line">| 4        | 30          |</span><br><span class="line">| 5        | 54          |</span><br><span class="line">| 6        | 96          |</span><br><span class="line">| 7        | 54          |</span><br><span class="line">| 8        | 54          |</span><br><span class="line">+----------+-------------+</span><br><span class="line">Transactions</span><br><span class="line">+----------------+----------+--------+</span><br><span class="line">| transaction_id | visit_id | amount |</span><br><span class="line">+----------------+----------+--------+</span><br><span class="line">| 2              | 5        | 310    |</span><br><span class="line">| 3              | 5        | 300    |</span><br><span class="line">| 9              | 5        | 200    |</span><br><span class="line">| 12             | 1        | 910    |</span><br><span class="line">| 13             | 2        | 970    |</span><br><span class="line">+----------------+----------+--------+</span><br><span class="line">输出:</span><br><span class="line">+-------------+----------------+</span><br><span class="line">| customer_id | count_no_trans |</span><br><span class="line">+-------------+----------------+</span><br><span class="line">| 54          | 2              |</span><br><span class="line">| 30          | 1              |</span><br><span class="line">| 96          | 1              |</span><br><span class="line">+-------------+----------------+</span><br><span class="line">解释:</span><br><span class="line">ID = 23 的顾客曾经逛过一次购物中心，并在 ID = 12 的访问期间进行了一笔交易。</span><br><span class="line">ID = 9 的顾客曾经逛过一次购物中心，并在 ID = 13 的访问期间进行了一笔交易。</span><br><span class="line">ID = 30 的顾客曾经去过购物中心，并且没有进行任何交易。</span><br><span class="line">ID = 54 的顾客三度造访了购物中心。在 2 次访问中，他们没有进行任何交易，在 1 次访问中，他们进行了 3 次交易。</span><br><span class="line">ID = 96 的顾客曾经去过购物中心，并且没有进行任何交易。</span><br><span class="line">如我们所见，ID 为 30 和 96 的顾客一次没有进行任何交易就去了购物中心。顾客 54 也两次访问了购物中心并且没有进行任何交易。</span><br></pre></td></tr></table></figure><p>我的答案：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id ,<span class="built_in">count</span>(transaction_id <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">as</span> count_no_trans</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Visits v</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> Transactions t </span><br><span class="line"></span><br><span class="line">     <span class="keyword">USING</span>(visit_id)</span><br></pre></td></tr></table></figure><p>自己答案最明显的一个错误就是count()函数里面不能加判断，这个题感觉不会的地方在于不太会用WHERE加条件选择为NULL的id，而且在选择空值id的时候有点迷糊。</p><p>正确答案：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id ,<span class="built_in">count</span>(customer_id) <span class="keyword">as</span> count_no_trans</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Visits v</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> Transactions t </span><br><span class="line"></span><br><span class="line">     <span class="keyword">USING</span>(visit_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> transaction_id <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_id</span><br></pre></td></tr></table></figure><p>2.表： <code>Weather</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| recordDate    | date    |</span><br><span class="line">| temperature   | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是这个表的主键</span><br><span class="line">该表包含特定日期的温度信息</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 <code>id</code> 。</p><p>返回结果 <strong>不要求顺序</strong> 。</p><p>查询结果格式如下例。</p><p><strong>示例 1：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Weather 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> recordDate <span class="operator">|</span> Temperature <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">10</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">25</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">20</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-04</span> <span class="operator">|</span> <span class="number">30</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+-------------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">2015</span><span class="number">-01</span><span class="number">-02</span> 的温度比前一天高（<span class="number">10</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">25</span>）</span><br><span class="line"><span class="number">2015</span><span class="number">-01</span><span class="number">-04</span> 的温度比前一天高（<span class="number">20</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">30</span>）</span><br></pre></td></tr></table></figure><p>其实这个题，我最开始想的是自连接，但是不知道按照哪个字段进行连接，就很迷糊，看了答案才算是收获颇丰。</p><h4 id="补充：如何比较时间"><a href="#补充：如何比较时间" class="headerlink" title="补充：如何比较时间"></a>补充：如何比较时间</h4><p>两个时间计算的函数：datediff(日期1,日期2)：得到的结果是日期1与日期2相差的天数。如果日期1比日期2大，结果为正；如果日期1比日期2小，结果为负。</p><p><img src="/1688376706778.png" alt="1688376706778"></p><p>另一个关于时间计算的函数是： timestampdiff(时间类型, 日期1, 日期2) 这个函数和上面diffdate的正、负号规则刚好相反。 日期1大于日期2，结果为负，日期1小于日期2，结果为正。</p><p>在“时间类型”的参数位置，通过添加“day”, “hour”, “second”等关键词，来规定计算天数差、小时数差、还是分钟数差。示例如下图： </p><p><img src="/1688376734697.png" alt="1688376734697"></p><p>以上，本题最难的两点就此解决了，一个是确定用什么连接方式，一个是怎么比较日期大小。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> w.id</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Weather w</span><br><span class="line"></span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">JOIN</span> Weather e</span><br><span class="line"></span><br><span class="line">     <span class="keyword">ON</span> datediff(w.recordDate,e.recordDate) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> w.Temperature <span class="operator">&gt;</span> e.Temperature</span><br></pre></td></tr></table></figure><h2 id="第三章-列-7-3"><a href="#第三章-列-7-3" class="headerlink" title="第三章 列 7.3"></a>第三章 列 7.3</h2><h4 id="插入单行"><a href="#插入单行" class="headerlink" title="插入单行"></a>插入单行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (</span><br><span class="line"></span><br><span class="line">last_name,</span><br><span class="line"></span><br><span class="line">first_name,</span><br><span class="line"></span><br><span class="line">birth_date,</span><br><span class="line"></span><br><span class="line">address,</span><br><span class="line"></span><br><span class="line">city,</span><br><span class="line"></span><br><span class="line">state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;John&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;Smith&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;1990-01-01&#x27;</span>,</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shippers (name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Shipper1&#x27;</span>),</span><br><span class="line">      （<span class="string">&#x27;Shipper2&#x27;</span>）,</span><br><span class="line">       (<span class="string">&#x27;Shipper3&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="插入分层行"><a href="#插入分层行" class="headerlink" title="插入分层行"></a>插入分层行</h4><p>mysql和其他数据库引擎自带这些内置功能，比如<code>last_insert_id()</code></p><h4 id="更新单行"><a href="#更新单行" class="headerlink" title="更新单行"></a>更新单行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> payment_total <span class="operator">=</span> invoice_total <span class="operator">*</span> <span class="number">0.5</span> , payment_date <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> invoice_id <span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="更新多行"><a href="#更新多行" class="headerlink" title="更新多行"></a>更新多行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> payment_total <span class="operator">=</span> invoice_total <span class="operator">*</span> <span class="number">0.5</span> , payment_date <span class="operator">=</span> due_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="keyword">IN</span> （<span class="number">3</span>,<span class="number">4</span>）</span><br></pre></td></tr></table></figure><h4 id="在Updates中用子查询"><a href="#在Updates中用子查询" class="headerlink" title="在Updates中用子查询"></a>在Updates中用子查询</h4><p>–子查询是在另一段SQL语句里的选择语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> payment_total <span class="operator">=</span> invoice_total <span class="operator">*</span> <span class="number">0.5</span> , payment_date <span class="operator">=</span> due_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> client_id </span><br><span class="line"> <span class="keyword">FROM</span> clients</span><br><span class="line"> <span class="keyword">Where</span> name <span class="operator">=</span> <span class="string">&#x27;Myworks&#x27;</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果子查询返回了多条数据，需要使用IN代替&#x3D;使用，</p><h4 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> invoices</span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"> <span class="keyword">FROM</span> clients</span><br><span class="line"> <span class="keyword">Where</span> name <span class="operator">=</span> <span class="string">&#x27;Myworks&#x27;</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="第四章-函数子句-7-4"><a href="#第四章-函数子句-7-4" class="headerlink" title="第四章 函数子句 7.4"></a>第四章 函数子句 7.4</h2><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>MAX()</p><p>MIN()</p><p>AVG()</p><p>SUM()</p><p>COUNT()</p><h4 id="GROPBY子句"><a href="#GROPBY子句" class="headerlink" title="GROPBY子句"></a>GROPBY子句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> client_id,</span><br><span class="line"></span><br><span class="line"><span class="built_in">SUM</span>(invoice_total) <span class="keyword">AS</span> total_sales</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> invoice_data <span class="operator">&gt;=</span> <span class="string">&#x27;2019-07-01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> client_id</span><br></pre></td></tr></table></figure><h4 id="HAVING子句"><a href="#HAVING子句" class="headerlink" title="HAVING子句"></a>HAVING子句</h4><p>如果还没有分组就不能使用where子句进行条件约束，这时候就可以使用having子句进行条件约束。</p><p>区别：where让我们可以在分组行之间筛选数据，having子句可以让我们在分组行之后筛选数据。</p><p>having用到的列一定得是我们select子句中存在的</p><h4 id="ROLLUP运算符（非标准运算符）"><a href="#ROLLUP运算符（非标准运算符）" class="headerlink" title="ROLLUP运算符（非标准运算符）"></a>ROLLUP运算符（非标准运算符）</h4><p>在MySQL中有个强大的运算符用来汇总数据叫做 with rollup，它只能应用于聚合值的列。这个运算符仅仅在MySQL中有，其他没有。</p><h4 id="练习-7-6"><a href="#练习-7-6" class="headerlink" title="练习 7.6"></a>练习 7.6</h4><h3 id="第五章-复杂语句-7-4"><a href="#第五章-复杂语句-7-4" class="headerlink" title="第五章 复杂语句 7.4"></a>第五章 复杂语句 7.4</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>可以再WHERE和FROM中编写子查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> unit_price(</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> unit_price</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> product_id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="IN运算符"><a href="#IN运算符" class="headerlink" title="IN运算符"></a>IN运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> product_id <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> product_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> order_items</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="子查询-vs-连接"><a href="#子查询-vs-连接" class="headerlink" title="子查询 vs 连接"></a>子查询 vs 连接</h4><p>有时候添加子查询会使一个查询太过复杂，那就用连接。</p><p>ALL关键字</p><p>如果我们的子查询返回了一列值，不加上ALL关键字的话就查找不到我们需要的值。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> invoice_total <span class="operator">&gt;</span> <span class="keyword">ALL</span>(</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> invoice_total</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="operator">=</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>ANY关键字</p><p>相关子查询</p><p>EXISTS</p><p>SELECT子句中的子查询</p><p>FROM子句中的子查询</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="/2023/05/24/MachineLearning/"/>
      <url>/2023/05/24/MachineLearning/</url>
      
        <content type="html"><![CDATA[<h1 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h1><p>-Supervised learning </p><p>-Unsupervised learning</p><h4 id="无监督学习—模型"><a href="#无监督学习—模型" class="headerlink" title="无监督学习—模型"></a>无监督学习—模型</h4><h5 id="异常值检测"><a href="#异常值检测" class="headerlink" title="异常值检测"></a>异常值检测</h5><p>使用交叉验证集来查看发现了多少异常</p><p>问的也是我想问的：啥时候用监督学习？啥时候用异常值检测？</p><p>异常检测更趋向于获取到一个未来全新的缺陷</p><p>监督学习更趋向于获取到一个目前已知的缺陷</p><p>异常检测对于特征选择这方面较为严格</p><ol><li><p>尽可能确保你给他的特征或多或少是高斯的</p><p>使用plt.hist()观察特征是否符合钟形</p><p><img src="/1685147780369.png" alt="1685147780369"></p></li><li><p>sss</p></li></ol><p><img src="/1685152828583.png" alt="1685152828583"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="/2023/05/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h1><p>-Supervised learning </p><p>-Unsupervised learning</p><h4 id="监督学习——模型"><a href="#监督学习——模型" class="headerlink" title="监督学习——模型"></a>监督学习——模型</h4><p>监督学习有两类大的分类：回归和分类。</p><p>与回归类模型相比另外一种常见的监督学习模型被称为<strong>分类模型</strong>。</p><p>分类模型预测类别或离散类别。</p><p>回归和分类模型的区别：在分类中，只有少量可能得输出，输出的结果可能是一个离散的、有限的集合、</p><p>线性回归</p><h4 id="无监督学习—模型"><a href="#无监督学习—模型" class="headerlink" title="无监督学习—模型"></a>无监督学习—模型</h4><h5 id="异常值检测"><a href="#异常值检测" class="headerlink" title="异常值检测"></a>异常值检测</h5><p>使用交叉验证集来查看发现了多少异常</p><p>问的也是我想问的：啥时候用监督学习？啥时候用异常值检测？</p><p>异常检测更趋向于获取到一个未来全新的缺陷</p><p>监督学习更趋向于获取到一个目前已知的缺陷</p><p>异常检测对于特征选择这方面较为严格</p><ol><li><p>尽可能确保你给他的特征或多或少是高斯的</p><p>使用plt.hist()观察特征是否符合钟形</p><p><img src="/1685147780369.png" alt="1685147780369"></p></li><li></li></ol><p><img src="/1685152828583.png" alt="1685152828583"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/03/25/CET-4/"/>
      <url>/2023/03/25/CET-4/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h3 id="1-2-二分查找"><a href="#1-2-二分查找" class="headerlink" title="1.2 二分查找"></a>1.2 二分查找</h3><p>IPADDR&#x3D;”192.168.88.101”<br>NETMASK&#x3D;”255.255.255.0”<br>GATEWAY&#x3D;”192.168.88.2”<br>DNS1&#x3D;”192.168.88.2”</p><p><code>ssh-keygen -t rsa -b 4029</code></p><p>tar -zxvf hadoop-3.1.0.tar.gz -C &#x2F;export&#x2F;server&#x2F;</p><configuration>        <property>                <name>fs.defaultFS</name>                <value>hdfs://node1:8020 </value>        </property>        <property>                <name>io.file.buffer.size</name>                <value>131072 </value>        </property></configuration><p>#续接左部<br><property><br><name>dfs. blocksize&lt; &#x2F;name&gt;<br><va lue> 268435456</value><br></property><br><property><br><name>dfs. namenode . handler . count&lt; &#x2F;name&gt;<br><value> 100</value><br></property><br><property><br><name>dfs . datanode . data.di r&lt;&#x2F; name&gt;<br><value> &#x2F;data&#x2F;dn</value><br></property><br>&lt;&#x2F; confi guration&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题目分析</title>
      <link href="/2023/02/27/%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/"/>
      <url>/2023/02/27/%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="模型分析"><a href="#模型分析" class="headerlink" title="模型分析"></a>模型分析</h2><p>首先先查看三个数据集（补充集是1的，没有参考性），跟测试集。</p><ul><li><p>train1.csv</p><p><img src="/1677478900805.png" alt="1677478900805"></p></li><li><p>train2.csv</p><p><img src="/1677478916724.png" alt="1677478916724"></p></li><li><p>train3.xlsx（excel表格的格式）</p><p><img src="/1677478960312.png" alt="1677478960312"></p></li><li><p>test(unlabeled).csv</p><p><img src="/1677479007078.png" alt="1677479007078"></p></li></ul><p>数据集1对应的是百万级带A类标签的网址，2是万级带部分标签、文本内容的诈骗网址，3就是百级带文本内容。快照跟B类标签的重点类别诈骗网址。</p><p><img src="/1677479283715.png" alt="1677479283715"></p><p><strong>我的思路是：A类标签中只有0是正常网址，将label都设置成0，剩下的全是都是诈骗网站，将label设置成1，这样数据集的标签就只剩下01。对B类标签也进行这样的分类，将刷单诈骗归属为标签1，而信贷理财是正常的归为0，所有标签就只剩下0和1让我们去处理。</strong></p><p>暂时只想到了使用独热编码，对标签分类。顾虑就是这个方法适用于将文本转化成数据。</p><p>到此，就可以把网址分成正常0，诈骗1，使用二元分类器。</p><h4 id="疑问点1：在于数据集2跟3的文本需不需要舍弃。"><a href="#疑问点1：在于数据集2跟3的文本需不需要舍弃。" class="headerlink" title="疑问点1：在于数据集2跟3的文本需不需要舍弃。"></a>疑问点1：在于数据集2跟3的文本需不需要舍弃。</h4><p>还是说将文本转化成计算机能识别的数字矩阵。</p><h2 id="数据的预处理"><a href="#数据的预处理" class="headerlink" title="数据的预处理"></a>数据的预处理</h2><h3 id="1）表的格式转换"><a href="#1）表的格式转换" class="headerlink" title="1）表的格式转换"></a>1）表的格式转换</h3><p>首先是数据集3跟补充集都是xlsx的文件后缀，不利于我们在笔记本中操作。</p><p>将两个转化成.csv后缀的文件，再将补充集追加到数据集1的后面。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data_xls = pd.read_excel(&#x27;train.xlsx&#x27;, index_col=0)     #输入xlsx文件名</span><br><span class="line">data_xls.to_csv(&#x27;2.csv&#x27;, encoding=&#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/1677545121322.png" alt="1677545121322"></p><p>出现了一个bug，关键点在最后一句，缺少必要的包。</p><p><img src="/1677545424688.png" alt="1677545424688"></p><p>重新载入之后还是有报错，原因是xlrd的版本太高，不支持读取.xlsx后缀的文件。</p><p><img src="/1677545492704.png" alt="1677545492704"></p><p><img src="/1677546377215.png" alt="1677546377215"></p><p>重新换了一种方法，下载openpyxl进行读取。</p><h3 id="2）表的融合"><a href="#2）表的融合" class="headerlink" title="2）表的融合"></a>2）表的融合</h3><h4 id="1-补充集追加到数据集1后面"><a href="#1-补充集追加到数据集1后面" class="headerlink" title="1.补充集追加到数据集1后面"></a>1.补充集追加到数据集1后面</h4><p><img src="/1677548515512.png" alt="1677548515512"></p><p>原本想的是表尾追加，但是做了笛卡尔积，后面的东西可以舍弃，主要是怎么将域名跟website、诈骗类型跟label结合到一起去。</p><p><img src="/1677548758178.png" alt="1677548758178"></p><p>首先是对补充集做简单的处理，使用drop方法将多出来的几列没用的处理掉，其次是使用rename方法将列名跟数据集一统一。</p><p><img src="/1677563839718.png" alt="1677563839718"></p><h4 id="2-对2的类型进行数字转换"><a href="#2-对2的类型进行数字转换" class="headerlink" title="2.对2的类型进行数字转换"></a>2.对2的类型进行数字转换</h4><p><img src="/1677577474351.png" alt="1677577474351"></p><p>如图的问题是，在对表融合后的label进行强制类型转换时，提示错误，因为这一行有空值，所以不能使用该操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据生态圈入门</title>
      <link href="/2023/02/19/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%94%9F%E6%80%81%E5%9C%88%E5%85%A5%E9%97%A8/"/>
      <url>/2023/02/19/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%94%9F%E6%80%81%E5%9C%88%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><p>一点击运行直接蓝屏自动重启，windows系统好像重装了一下，不道啥情况。</p><p>IP地址：192.168.1.128</p><p>主要是两个注意点，一个是软件选择为基础设施服务器，一个是网络和主机名采用的手动设置。</p><p>接下来遇到的问题特别奇怪，在Xshell里面前两次显示链接失败，我也没有进行多余的调试，后来再尝试又连接成功了，让人摸不着头脑。</p><h2 id="日志组成"><a href="#日志组成" class="headerlink" title="日志组成"></a>日志组成</h2><p>通用日志格式得了解一下——一般包括客户端IP地址、请求日期&#x2F;时间、请求的网页、HTTP代码、提供的字节数、用户代理、引用网址等。</p><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>hadoop核心是分布式文件系统HDFS+MapReduce</p><p>tar -zvxf jdk-8u131-linux-x64.tar.gz -C &#x2F;opt&#x2F;server </p><p>显示版本号就证明，jdk就已经装好了</p><p><img src="/1676777542250.png" alt="1676777542250"></p><p>cd ~&#x2F;.ssh</p><p>cat id_rsa.pub &gt;&gt; authorized_keys</p><p>chmod 600 authorized_keys </p><p>tar -zvxf hadoop-3.1.0.tar.gz -C &#x2F;opt&#x2F;server&#x2F; </p><p><img src="/1676778355258.png" alt="1676778355258"></p><p><em>NameNode</em>管理文件系统的命名空间。它维护着文件系统树及整棵树内所有的文件和目录。 </p><p><img src="/1676779204300.png" alt="1676779204300"></p><p>看到这一条表示指令运行成功。</p><p>YARN_RESOURCEMANAGER_USER&#x3D;root </p><p>HADOOP_SECURE_DN_USER&#x3D;yarn </p><p>YARN_NODEMANAGER_USER&#x3D;root </p><p><img src="/1676779785439.png" alt="1676779785439"></p><p>执行完如果可以看见上面四个证明，操作正确。</p><p>YARN_RESOURCEMANAGER_USER&#x3D;root </p><p>HADOOP_SECURE_DN_USER&#x3D;yarn </p><p>YARN_NODEMANAGER_USER&#x3D;root </p><p><img src="/1676780356786.png" alt="1676780356786"></p><p>看到以上列表中的两个，证明连接成功。</p><h2 id="数仓"><a href="#数仓" class="headerlink" title="数仓"></a>数仓</h2><p>数据仓库本身并不生产任何数据，其数据来源于不同外部系统。同时自身也不需要消费任何的数据，其结果开放给各个外部应用使用。</p><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><p>将Hadoop中的数据映射成一张数据库表，并提供SQL查询功能，能将SQL语句转变成MapReduce任务来执行。</p><p>Hive虽然具有RDBMS数据库的外表，包括数据模型、SQL语法都十分相似，但是应用程就却完全不同。Hive知识和用来做海量数据的离线分析，定位在于数据仓库，面向分析的OLAP系统。MySQL承担业务数据处理。</p><p><img src="/1676793221885.png" alt="1676793221885"></p><p>这个地方要在后面加上–nodeps排除依赖。</p><p>mysql-5.7.36-1.el7.x86_64.rpm-bundle.tar</p><p>rpm -ivh mysql-community-common-5.7.36-1.el7.x86_64.rpm  </p><p>rpm -ivh mysql-community-libs-5.7.36-1.el7.x86_64.rpm  </p><p>rpm -ivh mysql-community-client-5.7.36-1.el7.x86_64.rpm  </p><p>rpm -ivh mysql-community-server-5.7.36-1.el7.x86_64.rpm </p><p>root@localhost: 3ktn_zTk;8K-</p><p>set global validate_password_policy&#x3D;0; </p><p>set global validate_password_length&#x3D;1; </p><p>上面两行代码是修改密码设定，因为它不让密码设置的太简单。</p><p>授予远程链接权限</p><p>grant all privileges on <em>.</em> to ‘root’ @’%’ identified by ‘1823asd’; </p><p>mysql&gt; SET PASSWORD &#x3D; PASSWORD(‘Admin2022!’);</p><p>cp hive-env.sh.template hive-env.sh </p><p>cp的命令开头代表着复制文件</p><p><img src="/1676803715676.png" alt="1676803715676"></p><p>报了一个没见过的bug，研究研究.</p><p>看了网上的文章说，这个就是在xml中有无法解析的字符，有可能是空格，我接着用ide打开的xml文件，发现空格全部是奇怪的字符，删除之后就没有这个报错问题了。</p><p><img src="/1676860897606.png" alt="1676860897606"></p><p>看见这74张表，就表示已经安装成功了。</p><p><img src="/1676861176871.png" alt="1676861176871"></p><p>这个问题就是xml没有样式，可以自己加代码。</p><h2 id="Hive常用操作"><a href="#Hive常用操作" class="headerlink" title="Hive常用操作"></a>Hive常用操作</h2><p><img src="/1676865802476.png" alt="1676865802476"></p><p>当输入80端口的时候，看见这个页面证明nginx已经启动成功</p><p>cp &#x2F;opt&#x2F;server&#x2F;hadoop-3.1.0&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;*.jar &#x2F;opt&#x2F;server&#x2F;apache-flume-1.9.0-bin&#x2F;lib </p><p>cp &#x2F;opt&#x2F;server&#x2F;hadoop-3.1.0&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;*.jar &#x2F;opt&#x2F;server&#x2F;apache-flume-1.9.0-bin&#x2F;lib </p><p>cp &#x2F;opt&#x2F;server&#x2F;hadoop-3.1.0&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;*.jar &#x2F;opt&#x2F;server&#x2F;apache-flume-1.9.0-bin&#x2F;lib </p><p>hadoop会检测文件的复制，当HFDS在复制文件的时候，flume也会检测到开始自动滚动文件，在背后产生大量文件。</p><p>bin&#x2F;flume-ng agent -c .&#x2F;conf -f .&#x2F;conf&#x2F;taildir-hdfs.conf -n a3  -Dflume.root.logger&#x3D;INFO,console </p><p>-c是配置文件的目录，-f是指定配置文件的位置，-n是指定配置文件中谁是agent，后面就是日志打印到控制台。</p><h2 id="网站访问日志分析"><a href="#网站访问日志分析" class="headerlink" title="网站访问日志分析"></a>网站访问日志分析</h2><p>需要注意的一个点就是由于实验数据两比较大，运行SQL过程中可能会出现虚拟内存不足的问题，两种修改方式，一种就是调高内存限制，一种将yarn内部的内存检查关闭。不然当虚拟内存使用量是物理内存的2.1倍时进程会被杀掉，影响后续使用。</p><p><img src="/1676872625501.png" alt="1676872625501"></p><p>在关闭Hadoop时遇到的问题，从网上查了一下是因为stop的配置文件没有配置这几个参数，需要在stop的配置文件中，加入下面的定义。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure><p>注意，Hadoop刚启动起来就进入hive可能会报错，因为hadoop开始先进行自检，在此期间不能接入其他项目。</p><p><img src="/1676874383570.png" alt="1676874383570"></p><p>这个错报的还挺奇怪的，说不让使用分号，详情可以参考这个<a href="https://blog.csdn.net/dbc_zt/article/details/108755102">文章</a>。</p><p>但是我好像是把中文分号写进去才会报这个错误的。</p><p>CREATE TABLE access_log_content ( </p><p>   content STRING </p><p>); </p><p>CREATE TABLE ip_content ( </p><p>   content STRING </p><p>); </p><p>CREATE TABLE access_log_tmp1 ( </p><p>id BIGINT, </p><p>ip STRING, </p><p>ip_num BIGINT,      – ip对应的十进制数 </p><p>ip_1 BIGINT,        – ip首位数字 </p><p>access_time STRING, – 访问时间 </p><p>url STRING,         – 访问链接 </p><p>status STRING,      – http状态码 </p><p>traffic STRING,     – 流量 </p><p>referer STRING,     – 来源 </p><p>c_info STRING       – 客户端信息 </p><p>);</p><p>CREATE TABLE cz_ip ( </p><p>ip_start BIGINT,   – 起始ip对应的十进制 </p><p>ip_start_1 STRING, – 起始ip首位 </p><p>ip_end BIGINT,     – 结束ip对应的十进制 </p><p>city STRING,       – 城市 </p><p>isp STRING         – 运营商 </p><p>);</p><p>DROP TABLE IF EXISTS access_log_tmp2; </p><p>CREATE TABLE access_log_tmp2 ( </p><p>id BIGINT, </p><p>ip STRING, </p><p>city STRING, </p><p>isp STRING, </p><p>access_time STRING, </p><p>url STRING, </p><p>status STRING, </p><p>traffic STRING, </p><p>referer STRING, </p><p>c_info STRING </p><p>); </p><p>INSERT OVERWRITE TABLE access_log_tmp1  </p><p>SELECT </p><p>CAST(split(content, ‘ ‘)[0] AS BIGINT) AS id,  </p><p>split(content, ‘ ‘)[1] AS ip,  </p><p>cast(split(split(content, ‘ ‘)[1], ‘\.’)[0] as int)  * 256 * 256 * 256 + </p><p>cast(split(split(content, ‘ ‘)[1], ‘\.’)[1] as int) * 256 * 256 + </p><p>cast(split(split(content, ‘ ‘)[1], ‘\.’)[2] as int) * 256 + </p><p>cast(split(split(content, ‘ ‘)[1], ‘\.’)[3] as int) AS ip_num, </p><p>cast(split(split(content, ‘ ‘)[1], ‘\.’)[0] as int) AS ip_1,  </p><p>regexp_extract(content,’(\[.*\])’,1) AS access_time, </p><p>split(regexp_extract(content,’(“.*?”)’,1),” “)[1] AS url,  </p><p>split(content,’ ‘)[9] AS status,  </p><p>split(content,’ ‘)[10] AS traffic,  </p><p>split(content,’ ‘)[11]  AS referer,  </p><p>regexp_extract(content,’&quot; (“.*?”)$’,1) AS c_info  </p><p>FROM access_log_content; </p><p>INSERT OVERWRITE TABLE cz_ip  </p><p>SELECT </p><p>CAST(split(split(content, ‘\s+’)[0],’\.’)[0] AS BIGINT) * 256 * 256 * 256 + </p><p>CAST(split(split(content, ‘\s+’)[0],’\.’)[1] AS BIGINT) * 256 * 256 + </p><p>CAST(split(split(content, ‘\s+’)[0],’\.’)[2] AS BIGINT) * 256 + </p><p>CAST(split(split(content, ‘\s+’)[0],’\.’)[3] AS BIGINT) AS ip_start,  </p><p>split(split(content, ‘\s+’)[0],’\.’)[0] AS ip_start_1,  </p><p>CAST(split(split(content, ‘\s+’)[1],’\.’)[0] AS BIGINT) * 256 * 256 * 256 + </p><p>CAST(split(split(content, ‘\s+’)[1],’\.’)[1] AS BIGINT) * 256 * 256 + </p><p>CAST(split(split(content, ‘\s+’)[1],’\.’)[2] AS BIGINT) * 256 + </p><p>CAST(split(split(content, ‘\s+’)[1],’\.’)[3] AS BIGINT) AS ip_end,  </p><p>split(content, ‘\s+’)[2] AS city,  </p><p>split(content, ‘\s+’)[3] AS isp </p><p>FROM ip_content; </p><p>– 从ip表中查询城市和运营商信息 </p><p>INSERT OVERWRITE TABLE access_log_tmp2 </p><p>SELECT a.id, a.ip, b.city, b.isp, a.access_time, a.url, a.status, a.traffic,  </p><p>a.referer, a.c_info </p><p>FROM access_log_tmp1 a JOIN </p><p>cz_ip b ON a.ip_1 &#x3D; b.ip_start_1 AND a.ip_num &gt;&#x3D; b.ip_start AND a.ip_num &lt;&#x3D; b.ip_end; </p><p><img src="/1676888466568.png" alt="1676888466568"></p><p>查找不到表之后直接从网页下载就只会说找不到服务器的IP地址，有点不太能理解。</p><h2 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h2><p>export HADOOP_COMMON_HOME&#x3D;&#x2F;opt&#x2F;server&#x2F;hadoop-3.1.0 </p><p>export HADOOP_MAPRED_HOME&#x3D;&#x2F;opt&#x2F;server&#x2F;hadoop-3.1.0 </p><p>export HIVE_HOME&#x3D;&#x2F;opt&#x2F;server&#x2F;apache-hive-3.1.2-bin</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实战项目,大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛奥里给</title>
      <link href="/2023/01/19/%E6%AF%94%E8%B5%9B%E5%A5%A5%E5%8A%9B%E7%BB%99/"/>
      <url>/2023/01/19/%E6%AF%94%E8%B5%9B%E5%A5%A5%E5%8A%9B%E7%BB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><h3 id="一二章"><a href="#一二章" class="headerlink" title="一二章"></a>一二章</h3><p>机器学习三要素</p><ul><li>输入数据点</li><li>预期输出的实例</li><li>衡量算法效果好坏的方法</li></ul><p>深度学习的技术定义：学习数据表示的多级方法。</p><p>概率建模是统计学原理在数据分析中的应用，最有名的算法之一是朴素贝叶斯算法。</p><p>核方法是一组分类算法，其中最有名的就是支持向量机（SVM）。SVM的目标是通过在属于两个不同类别的两组数据点之间找到良好<strong>决策边界</strong>来解决分类问题。尽量让超平面与每个类别最近的数据点之间的距离最大化，从而计算出良好决策边界，这一步叫做<strong>间隔最大化</strong>。</p><p><strong>决策树</strong>是类似于流程图的结构，可以对输入数据点进行分类或根据给定输入来预测输出值。特别是<strong>随机森林</strong>，算法、它首先构建许多决策树，然后将它们的输出集成在一起。<strong>梯度提升机</strong>也是将弱预测模型集成的机器学习技术。</p><p>通过迭代地训练新模型来专门解决之前模型的弱点。</p><p>如果连续应用浅层学习方法，其收益会随着层数增加迅速降低，因为三层模型中最优的第一表示层并不是单层或双层模型中最优的第一表示层。</p><p>深度学习从数据中进行学习时有两个基本特征：</p><p>1）通过渐进的、逐层的方式形成越来越复杂的表示，</p><p>2）对中间这些渐进的表示共同进行学习</p><p>简单但重要的算法改进</p><ul><li>更好的神经层激活函数</li><li>权重初始化方案（不过很快被放弃了）</li><li>优化方法，比如RMSProp和Adam</li></ul><p>深度学习的重要性质：</p><ul><li>简单</li><li>可扩展</li><li>多功能与可复用</li></ul><p>在机器学习中，分类问题中的某个<strong>类别</strong>叫做<strong>类</strong>。数据点叫做<strong>样本</strong>。某个样本对应的类叫做<strong>标签</strong>。</p><p>神经网络的核心组件是层，它是一种数据处理模块，数据过滤器。</p><p>大多数深度学习都是将简单的层链接起来，从而实现渐进式的<strong>数据蒸馏</strong>。</p><p>编译步骤的三个参数：</p><ul><li>损失函数：网络如何衡量在训练数据上的性能，即网络如何朝着正确的方向进行。</li><li>优化器：基于训练数据和损失函数来更新网络的机制。</li><li>在训练和测试过程中需要监控的指标。</li></ul><p>张量这一概念的核心在于，它是一个<strong>数据容器</strong>。它包含的数据几乎总是数值数据。张量是矩阵向任意维度的推广[张量的<strong>维度</strong>通常叫做<strong>轴</strong>]</p><p>仅包含一个数字的张量叫做标量（标量张量、零维张量、0D张量）</p><p>数组组成的数组叫做向量，或者一维张量（1D张量）</p><p>注意：不要把5D向量跟5D张量弄混，5D向量只有一个轴。</p><p>向量组成的数组叫做矩阵或二维张量（2D），矩阵有2个轴（通常叫做行和列）</p><p>张量是由以下三个关键属性来定义的：</p><ul><li>轴的个数（阶）</li><li>形状</li><li>数据类型</li></ul><p>深度学习中所有数据张量的第一个轴（0轴，因为索引从0开始）都是样本轴（有时也叫<strong>样本维度</strong>）</p><p>第一个轴（0轴）叫做<strong>批量轴</strong>或<strong>批量维度</strong>。</p><p>relu运算和加法都是<strong>逐元素</strong>运算。点积运算也叫张量积。张量变形是指改变张量的行和列，以得到想要的形状。变形后的张量的元素总个数与初始张量相同。</p><p>经常遇到的一种特殊的张量变形是<strong>转置</strong>，对矩阵做转置是指将行和列互换。</p><p>C:\Users\86182\Documents\TencentMeeting\2023-02-21 20.56.47 阿钟的快速会议 934764515</p><p>网络中所有运算都是可微的，计算损失相对于网络系数的梯度，然后向梯度的反方向改变系数，从而使损失降低。</p><p>小批量SGD算法的一个变体是每次迭代时只抽取一个样本和目标，而不是抽取一批数据。这叫做真SGD（有别于<strong>小批量SGD</strong>），极端情况下，每一次迭代都在所有数据上运行，这叫做<strong>批量SGD</strong>。</p><p><strong>损失</strong>时在训练过程中需要最小化的量，因此，它应该能够衡量当前任务是否已成功解决。</p><p><strong>优化器</strong>是使用损失梯度更新参数的具体方式，比如RMSProp优化器、带动量的随机梯度下降（SGD）等。</p><h2 id="成本函数和损失函数"><a href="#成本函数和损失函数" class="headerlink" title="成本函数和损失函数"></a>成本函数和损失函数</h2><p>使用均方差作为成本函数，也就是预测值和真实值之间差的平方取均值。</p><p>使用逻辑回归使用Sigmoid函数计算二分类问题</p><p><img src="/1677492694714.png" alt="1677492694714"></p><p>使用softmax解决多分类问题</p><p><img src="/1677492704693.png" alt="1677492704693"></p><p><strong>独热编码</strong>是对计算机不能识别的文字进行数字化的处理。</p><p><img src="/1677504078391.png" alt="1677504078391"></p><p><img src="/1677593419891.png" alt="1677593419891"></p><p><img src="/1677824524813.png" alt="1677824524813"></p><p>学习率衰减是为了防止跳过极值点</p><p><img src="/1677832041018.png" alt="1677832041018"></p><p>数据预处理的步骤是向量化、标准化、处理缺失值和特征提取。</p><p>神经网络的所有输入和目标都必须是浮点数张量，数据转换为张量，这一步叫数据向量化。</p><p>图像数据被编码为0<del>255范围内的整数，表示灰度值。将这一数据输入网络之前，还需要将其转换为float32格式并除以255，这样就得到0</del>1范围内的浮点数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task02</title>
      <link href="/2023/01/18/Task02/"/>
      <url>/2023/01/18/Task02/</url>
      
        <content type="html"><![CDATA[<h1 id="Task02"><a href="#Task02" class="headerlink" title="Task02"></a>Task02</h1><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><p>首先第一步还是进行导包跟加载数据。</p><p>【补充】数据清洗和增强数据：前者是指<strong>调整已有的列和行</strong>，后者则是指在数据集中<strong>删除和添加新的列</strong>。</p><h3 id="1-缺失值观察及处理"><a href="#1-缺失值观察及处理" class="headerlink" title="1.缺失值观察及处理"></a>1.缺失值观察及处理</h3><p>首先进行<strong>探索性数据分析</strong>（EDA，exploratory data analysis）来识别缺失的值。</p><ol><li><p>方法一：df.info()</p><p>很奇怪这个地方报了一个<strong>NameError</strong>的错误，说df的名称错误。然后再重新载入数据之后又显示了<strong>NameError</strong>的错误，但是显示的是pd名称错误。最后解决办法是重新加载需要的两个包，再执行就没有问题了。</p><p>【补充】该方法用于查看数据缺失值个数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;pandas.core.frame.DataFrame&#x27;</span>&gt;</span><br><span class="line">RangeIndex: <span class="number">891</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">Data columns (total <span class="number">12</span> columns):</span><br><span class="line"> <span class="comment">#   Column       Non-Null Count  Dtype  </span></span><br><span class="line">---  ------       --------------  -----  </span><br><span class="line"> <span class="number">0</span>   PassengerId  <span class="number">891</span> non-null    int64  </span><br><span class="line"> <span class="number">1</span>   Survived     <span class="number">891</span> non-null    int64  </span><br><span class="line"> <span class="number">2</span>   Pclass       <span class="number">891</span> non-null    int64  </span><br><span class="line"> <span class="number">3</span>   Name         <span class="number">891</span> non-null    <span class="built_in">object</span> </span><br><span class="line"> <span class="number">4</span>   Sex          <span class="number">891</span> non-null    <span class="built_in">object</span> </span><br><span class="line"> <span class="number">5</span>   Age          <span class="number">714</span> non-null    float64</span><br><span class="line"> <span class="number">6</span>   SibSp        <span class="number">891</span> non-null    int64  </span><br><span class="line"> <span class="number">7</span>   Parch        <span class="number">891</span> non-null    int64  </span><br><span class="line"> <span class="number">8</span>   Ticket       <span class="number">891</span> non-null    <span class="built_in">object</span> </span><br><span class="line"> <span class="number">9</span>   Fare         <span class="number">891</span> non-null    float64</span><br><span class="line"> <span class="number">10</span>  Cabin        <span class="number">204</span> non-null    <span class="built_in">object</span> </span><br><span class="line"> <span class="number">11</span>  Embarked     <span class="number">889</span> non-null    <span class="built_in">object</span> </span><br><span class="line">dtypes: float64(<span class="number">2</span>), int64(<span class="number">5</span>), <span class="built_in">object</span>(<span class="number">5</span>)</span><br><span class="line">memory usage: <span class="number">83.7</span>+ KB</span><br></pre></td></tr></table></figure></li><li><p>方法二：<strong>df.isnull().sum()</strong></p><p>【补充】使用前可以先算一下空准确率。<strong>空准确率</strong>是指当模型总是预测频率较高的类别时达到的正确率。该方法主要是查看特定特征缺失值个数</p><p><strong>df[‘Survived’].value_counts(normalize&#x3D;True)</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">0.616162</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.383838</span></span><br><span class="line">Name: Survived, dtype: float64</span><br></pre></td></tr></table></figure><p>根据测算，空准确率，有61%的生还率</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PassengerId      <span class="number">0</span></span><br><span class="line">Survived         <span class="number">0</span></span><br><span class="line">Pclass           <span class="number">0</span></span><br><span class="line">Name             <span class="number">0</span></span><br><span class="line">Sex              <span class="number">0</span></span><br><span class="line">Age            <span class="number">177</span></span><br><span class="line">SibSp            <span class="number">0</span></span><br><span class="line">Parch            <span class="number">0</span></span><br><span class="line">Ticket           <span class="number">0</span></span><br><span class="line">Fare             <span class="number">0</span></span><br><span class="line">Cabin          <span class="number">687</span></span><br><span class="line">Embarked         <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>方法三：<strong>df[ [‘Age’, ‘Cabin’, ‘Embarked’]].head(3)</strong></p><table><thead><tr><th></th><th>Age</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>22.0</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>38.0</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>26.0</td><td>NaN</td><td>S</td></tr></tbody></table></li></ol><p>【补充】查看特定列数据</p><h3 id="2-缺失值处理"><a href="#2-缺失值处理" class="headerlink" title="2.缺失值处理"></a>2.缺失值处理</h3><p>【填充方法】</p><ul><li>0（数值型）</li><li>unknow或Unknown（类别型）</li><li>？（类别型）</li></ul><p>【处理方法】</p><ul><li><p>删除缺少值的行</p><p><strong>df.dropna().head(3)</strong></p><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>6</td><td>7</td><td>0</td><td>1</td><td>McCarthy, Mr. Timothy J</td><td>male</td><td>54.0</td><td>0</td><td>0</td><td>17463</td><td>51.8625</td><td>E46</td><td>S</td></tr></tbody></table><p>通过进行均值变化百分比公式<code>(df.dropna().mean() - df.mean()) / df.mean()</code>，可以看出删除行（观察值）会严重影响数据的形状，所以应该保留尽可能多的数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PassengerId    <span class="number">0.021000</span></span><br><span class="line">Survived       <span class="number">0.751079</span></span><br><span class="line">Pclass        -<span class="number">0.484001</span></span><br><span class="line">Age            <span class="number">0.201195</span></span><br><span class="line">SibSp         -<span class="number">0.111905</span></span><br><span class="line">Parch          <span class="number">0.245853</span></span><br><span class="line">Fare           <span class="number">1.443236</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p><strong><code>dropna(axis=0, how=&#39;any&#39;, thresh=None, subset=None, inplace=False)</code></strong> </p><ul><li>axis: default 0指行,1为列</li><li>how: {‘any’, ‘all’}, default ‘any’指带缺失值的所有行&#x2F;列;’all’指清除全是缺失值的</li><li>thresh: int,保留含有int个非空值的行</li><li>subset: 对特定的列进行缺失值删除处理</li><li>inplace: True表示直接在原数据上更改</li></ul></li><li><p>填充缺失值</p><p>df.fillna(0).head(3)</p><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>0</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>0</td><td>S</td></tr></tbody></table><p>【补充】我们也可以用scikit-learn预处理的Imputer模板，一般称它为“填充器”。</p><p><strong><code>fillna(value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)</code></strong>  </p><ul><li>value：用于填充的空值的值。</li><li>method： {‘backfill’, ‘bfill’, ‘pad’, ‘ffill’, None}, default None。定义了填充空值的方法。pad &#x2F; ffill，表示用前面行&#x2F;列的值，填充当前行&#x2F;列的空值，&#x2F;&#x2F;backfill &#x2F; bfill，表示用后面行&#x2F;列的值，填充当前行&#x2F;列的空值。</li><li>axis：轴。0或’index’，表示按行删除；1或’columns’，表示按列删除。</li><li>inplace：默认False不更改原数据；True表示直接在原数据上更改。</li><li>limit：区间值。int型， default None。如果method被指定，对于连续的空值，这段连续区域，最多填充前 limit 个空值（如果存在多段连续区域，每段最多填充前 limit 个空值）。如果method未被指定， 在该axis下，最多填充前 limit 个空值（不论空值连续区间是否间断）</li><li>downcast：dict, default is None，字典中的项为，为类型向下转换规则。</li></ul></li></ul><p>以上两个处理方法都会<strong>清洗</strong>我们的数据集，让算法可以处理，但是每种办法都各有优缺点。</p><p>【检查缺失值】</p><ul><li>df[df[“Age”]&#x3D;&#x3D;np.nan]&#x3D;0</li><li>df[df[“Age”]&#x3D;&#x3D;None]&#x3D;0</li><li>df[df[“Age”].isnull()]&#x3D;0</li></ul><p>【思考】df.isnull():该方法用于判断dataframe是否存在缺失值，该方法返回一个由True和False构成的dataframe，若原数据为NaN，返回True，否则返回False； None和np.nan的使用可以参考这个<a href="https://blog.csdn.net/qq_22937901/article/details/116987239">链接</a>。</p><p>3.对重复值进行处理</p><p>df &#x3D; df.drop_duplicates()</p><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0</td><td>0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table><p>【补充】<strong>drop_duplicates(subset&#x3D;None, keep&#x3D;‘first’, inplace&#x3D;False)</strong> </p><h3 id="4-特征观察与处理"><a href="#4-特征观察与处理" class="headerlink" title="4.特征观察与处理"></a>4.特征观察与处理</h3><ul><li><p><strong>数值型特征</strong>：Survived ，Pclass， Age ，SibSp， Parch， Fare</p><p>其中Survived， Pclass为离散型数值特征，其余为连续型数值特征  </p></li><li><p><strong>文本型特征</strong>：Name， Sex， Cabin，Embarked， Ticket</p><p>其中Sex， Cabin， Embarked， Ticket为类别型文本特征。</p></li></ul><p>【补充】分箱操作：如果数值数据是连续的，那么将其转换为分类变量可能是有意义的。在Panda有一个函数叫做cut，可以将数据分箱（binning），亦称为分桶（bucketing）。它会创建数据的范围。（参考书籍《特征工程入门》）</p><h4 id="1-将连续变量Age平均分箱成5个年龄段，并分别用类别变量12345表示"><a href="#1-将连续变量Age平均分箱成5个年龄段，并分别用类别变量12345表示" class="headerlink" title="1.将连续变量Age平均分箱成5个年龄段，并分别用类别变量12345表示"></a>1.将连续变量Age平均分箱成5个年龄段，并分别用类别变量12345表示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;AgeBand&#x27;</span>] = pd.cut(df[<span class="string">&#x27;Age&#x27;</span>], <span class="number">5</span>,labels = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th><th>AgeBand</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td><td>2</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td><td>3</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td><td>2</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td><td>3</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0</td><td>0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td><td>3</td></tr></tbody></table><h4 id="2-将连续变量Age划分为-0-5-5-15-15-30-30-50-50-80-五个年龄段，并分别用类别变量12345表示"><a href="#2-将连续变量Age划分为-0-5-5-15-15-30-30-50-50-80-五个年龄段，并分别用类别变量12345表示" class="headerlink" title="2.将连续变量Age划分为(0,5] (5,15] (15,30] (30,50] (50,80]五个年龄段，并分别用类别变量12345表示"></a>2.将连续变量Age划分为(0,5] (5,15] (15,30] (30,50] (50,80]五个年龄段，并分别用类别变量12345表示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[&#x27;AgeBand&#x27;] = pd.cut(df[&#x27;Age&#x27;],[0,5,15,30,50,80],labels = [1,2,3,4,5])</span><br><span class="line">df.head(3)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th><th>AgeBand</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td><td>3</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td><td>4</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td><td>3</td></tr></tbody></table><h4 id="3-将连续变量Age按10-30-50-70-90-五个年龄段，并用分类变量12345表示"><a href="#3-将连续变量Age按10-30-50-70-90-五个年龄段，并用分类变量12345表示" class="headerlink" title="3.将连续变量Age按10% 30% 50 70% 90%五个年龄段，并用分类变量12345表示"></a>3.将连续变量Age按10% 30% 50 70% 90%五个年龄段，并用分类变量12345表示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[&#x27;AgeBand&#x27;] = pd.qcut(df[&#x27;Age&#x27;],[0,0.1,0.3,0.5,0.7,0.9],labels = [1,2,3,4,5])</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th><th>AgeBand</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td><td>2</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td><td>5</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td><td>3</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td><td>4</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0</td><td>0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td><td>4</td></tr></tbody></table><h3 id="5-对文本变量进行转换"><a href="#5-对文本变量进行转换" class="headerlink" title="5.对文本变量进行转换"></a>5.对文本变量进行转换</h3><h4 id="查看类别文本变量名及种类"><a href="#查看类别文本变量名及种类" class="headerlink" title="查看类别文本变量名及种类"></a>查看类别文本变量名及种类</h4><ul><li><p>value_counts</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Sex&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure></li><li><p>unique</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Sex&#x27;</span>].unique()</span><br></pre></td></tr></table></figure></li></ul><h4 id="将类别文本转换为12345"><a href="#将类别文本转换为12345" class="headerlink" title="将类别文本转换为12345"></a>将类别文本转换为12345</h4><ul><li><p>replace</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Sex_num&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].replace([<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>],[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></li><li><p>map</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Sex_num&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></li><li><p>使用sklearn.preprocessing的LabeEncoder</p></li><li><pre><code class="python">from sklearn.preprocessing import LabelEncoderfor feat in [&#39;Cabin&#39;, &#39;Ticket&#39;]:    lbl = LabelEncoder()      label_dict = dict(zip(df[feat].unique(), range(df[feat].nunique())))    df[feat + &quot;_labelEncode&quot;] = df[feat].map(label_dict)    df[feat + &quot;_labelEncode&quot;] = lbl.fit_transform(df[feat].astype(str))df.head()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 将类别文本转换为one-hot编码</span><br><span class="line"></span><br><span class="line">- OneHotEncoder</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  for feat in [&quot;Age&quot;, &quot;Embarked&quot;]:</span><br><span class="line">  #     x = pd.get_dummies(df[&quot;Age&quot;] // 6)</span><br><span class="line">  #     x = pd.get_dummies(pd.cut(df[&#x27;Age&#x27;],5))</span><br><span class="line">      x = pd.get_dummies(df[feat], prefix=feat)</span><br><span class="line">      df = pd.concat([df, x], axis=1)</span><br><span class="line">      #df[feat] = pd.get_dummies(df[feat], prefix=feat)</span><br><span class="line">      </span><br><span class="line">  df.head()</span><br></pre></td></tr></table></figure></code></pre></li><li><p>使用pandas中的pd.get_dummies进行one-hot编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_sex=pd.get_dummies(df[<span class="string">&#x27;Sex&#x27;</span>])</span><br><span class="line">new_sex</span><br></pre></td></tr></table></figure></li></ul><h4 id="从文本变量中提取特征"><a href="#从文本变量中提取特征" class="headerlink" title="从文本变量中提取特征"></a>从文本变量中提取特征</h4><ul><li><p>str.extract()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Title&#x27;</span>] = df.Name.<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Za-z]+)\.&#x27;</span>, expand=<span class="literal">False</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h2><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td></tr></tbody></table><p>每日一载，神清气爽。</p><p>【思考】对比四个数据集之间的表格区别，我的猜测是对表格进行了分箱操作，将数据集分成了四份。</p><h3 id="1）合并操作"><a href="#1）合并操作" class="headerlink" title="1）合并操作"></a>1）合并操作</h3><h4 id="1-concat方法横向合并"><a href="#1-concat方法横向合并" class="headerlink" title="1.concat方法横向合并"></a>1.concat方法横向合并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_up = [text_left_up,text_right_up]</span><br><span class="line">result_up = pd.concat(list_up,axis=<span class="number">1</span>)</span><br><span class="line">result_up.head()</span><br></pre></td></tr></table></figure><p>如果直接运行上面的代码会显示<strong>NameError</strong>，原因是text_left_up不存在，其实推理也知道text_right_up也会报这个错误。解决办法是运行下面的代码再执行上面的代码，在官方提供的教程中，前面几步只是查看表格，并没有将它实例化，所以这一步操作需要我们自己动手进行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text_left_up = pd.read_csv(<span class="string">&#x27;train-left-up.csv&#x27;</span>)</span><br><span class="line">text_right_up = pd.read_csv(<span class="string">&#x27;train-right-up.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0</td><td>0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table><p>保存：<strong>df.to_csv(‘result.csv’)</strong></p><h4 id="2-concat方法横向合并-纵向合并"><a href="#2-concat方法横向合并-纵向合并" class="headerlink" title="2.concat方法横向合并+纵向合并"></a>2.concat方法横向合并+纵向合并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_down=[text_left_down,text_right_down]</span><br><span class="line">result_down = pd.concat(list_down,axis=<span class="number">1</span>)</span><br><span class="line">result = pd.concat([result_up,result_down])</span><br><span class="line">result.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1.0</td><td>0.0</td><td>3.0</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1.0</td><td>0.0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2.0</td><td>1.0</td><td>1.0</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1.0</td><td>0.0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3.0</td><td>1.0</td><td>3.0</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0.0</td><td>0.0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4.0</td><td>1.0</td><td>1.0</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1.0</td><td>0.0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5.0</td><td>0.0</td><td>3.0</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0.0</td><td>0.0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table><p>【补充】在python中concat函数相当于数据库中的全连接（UNION ALL）可以指定按某个轴进行链接，也可以指定链接的方式join(outer,inner两种)这个方法不会去重，如果要去重效果可以使用<strong>drop_duplicates</strong>方法 </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">concat(objs, axis=<span class="number">0</span>, join=<span class="string">&#x27;outer&#x27;</span>, join_axes=<span class="literal">None</span>, ignore_index=<span class="literal">False</span>, keys=<span class="literal">None</span>, levels=<span class="literal">None</span>, names=<span class="literal">None</span>, verify_integrity=<span class="literal">False</span>, copy=<span class="literal">True</span>): </span><br></pre></td></tr></table></figure><h4 id="3-join-append方法合并"><a href="#3-join-append方法合并" class="headerlink" title="3.join+append方法合并"></a>3.join+append方法合并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_down=[text_left_down,text_right_down]</span><br><span class="line">result_down = pd.concat(list_down,axis=<span class="number">1</span>)</span><br><span class="line">result = pd.concat([result_up,result_down])</span><br><span class="line">result.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1.0</td><td>0.0</td><td>3.0</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1.0</td><td>0.0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2.0</td><td>1.0</td><td>1.0</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1.0</td><td>0.0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3.0</td><td>1.0</td><td>3.0</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0.0</td><td>0.0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4.0</td><td>1.0</td><td>1.0</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1.0</td><td>0.0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5.0</td><td>0.0</td><td>3.0</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0.0</td><td>0.0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table><h4 id="4-merge-append方法："><a href="#4-merge-append方法：" class="headerlink" title="4.merge+append方法："></a>4.merge+append方法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result_up = pd.merge(text_left_up,text_right_up,left_index=True,right_index=True)</span><br><span class="line">result_down = pd.merge(text_left_down,text_right_down,left_index=True,right_index=True)</span><br><span class="line">result = resul_up.append(result_down)</span><br><span class="line">result.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1.0</td><td>0.0</td><td>A&#x2F;5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1.0</td><td>0.0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0.0</td><td>0.0</td><td>STON&#x2F;O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1.0</td><td>0.0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0.0</td><td>0.0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table><p>【思考】相同点是都可以对表格进行合并，不同点是join只能进行纵向合并，而merge、concat两个方法都可以进行合并，并且两个方法可以一次性合并多张表。</p><p>【补充】对于以上方法，可以参考这个<a href="https://blog.csdn.net/m0_60392490/article/details/121239287">方法介绍</a>和<a href="https://zhuanlan.zhihu.com/p/344497618">方法对比</a>进行知识点扩充。</p><h3 id="2）变换数据"><a href="#2）变换数据" class="headerlink" title="2）变换数据"></a>2）变换数据</h3><p>将数据变为Series类型的数据</p><p>【补充】Series 是一种类似于一维数组的对象，它由一组数据（各种Numpy数据类型）以及一组与之相关的数据标签（即索引）组成。 </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = pd.read_csv(<span class="string">&#x27;result.csv&#x27;</span>)</span><br><span class="line">text.head()</span><br><span class="line">unit_result=text.stack().head(<span class="number">20</span>)</span><br><span class="line">unit_result.head()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  Unnamed: <span class="number">0</span>                           <span class="number">0</span></span><br><span class="line">   PassengerId                          <span class="number">1</span></span><br><span class="line">   Survived                             <span class="number">0</span></span><br><span class="line">   Pclass                               <span class="number">3</span></span><br><span class="line">   Name           Braund, Mr. Owen Harris</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将代码保存为unit_result,csv</span></span><br><span class="line">unit_result.to_csv(<span class="string">&#x27;unit_result.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = pd.read_csv(<span class="string">&#x27;unit_result.csv&#x27;</span>)</span><br><span class="line">test.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>Unnamed: 0</th><th>0.1</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>PassengerId</td><td>1</td></tr><tr><td>1</td><td>0</td><td>Survived</td><td>0</td></tr><tr><td>2</td><td>0</td><td>Pclass</td><td>3</td></tr><tr><td>3</td><td>0</td><td>Name</td><td>Braund, Mr. Owen Harris</td></tr><tr><td>4</td><td>0</td><td>Sex</td><td>male</td></tr></tbody></table><p>【扩充问题】那要是将数据转换为DataFrame类型的呢？当时想到这个问题之后发现自己对这两个数据类型的概念还没有搞清楚，如果你跟我一样的疑问，可以<a href="https://blog.csdn.net/u010701274/article/details/121204106">参考链接</a>文章对两个类型的介绍。</p><h2 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h2><h3 id="1-Groupby机制"><a href="#1-Groupby机制" class="headerlink" title="1.Groupby机制"></a>1.Groupby机制</h3><p>groupby就是根据一个或者多个字段，将数据划分为不同的组，然后进行进一步分析，比如求分组的数量，分组内的最大值最小值平均值等。 有很多种聚合方法。</p><p><a href="https://zhuanlan.zhihu.com/p/384256189">详解pandas的groupby机制</a></p><h3 id="2-练习"><a href="#2-练习" class="headerlink" title="2.练习"></a>2.练习</h3><h4 id="1）计算平均票价"><a href="#1）计算平均票价" class="headerlink" title="1）计算平均票价"></a>1）计算平均票价</h4><p><strong>df  &#x3D; text[‘Fare’].groupby(text[‘Sex’])</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sex</span><br><span class="line">female    <span class="number">44.479818</span></span><br><span class="line">male      <span class="number">25.523893</span></span><br><span class="line">Name: Fare, dtype: float64</span><br></pre></td></tr></table></figure><h4 id="2）统计存活人数"><a href="#2）统计存活人数" class="headerlink" title="2）统计存活人数"></a>2）统计存活人数</h4><p><strong>survived_pclass &#x3D; text[‘Survived’].groupby(text[‘Pclass’])</strong><br><strong>survived_pclass.sum()</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Pclass</span><br><span class="line"><span class="number">1</span>    <span class="number">136</span></span><br><span class="line"><span class="number">2</span>     <span class="number">87</span></span><br><span class="line"><span class="number">3</span>    <span class="number">119</span></span><br><span class="line">Name: Survived, dtype: int64</span><br></pre></td></tr></table></figure><h4 id="3）不同等级下的存活人数"><a href="#3）不同等级下的存活人数" class="headerlink" title="3）不同等级下的存活人数"></a>3）不同等级下的存活人数</h4><p><strong>survived_pclass &#x3D; text[‘Survived’].groupby(text[‘Pclass’])</strong><br><strong>survived_pclass.sum()</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Pclass</span><br><span class="line"><span class="number">1</span>    <span class="number">136</span></span><br><span class="line"><span class="number">2</span>     <span class="number">87</span></span><br><span class="line"><span class="number">3</span>    <span class="number">119</span></span><br><span class="line">Name: Survived, dtype: int64</span><br></pre></td></tr></table></figure><p>【思考】通过统计结果，女性幸存者人数远远大于男性幸存者，性别可能会是影响生存的原因。其次是客舱等级越高生还率越高，客舱等级可能是影响生存的原因。</p><h4 id="4）统计不同等级下不同年龄的船票花费均值"><a href="#4）统计不同等级下不同年龄的船票花费均值" class="headerlink" title="4）统计不同等级下不同年龄的船票花费均值"></a>4）统计不同等级下不同年龄的船票花费均值</h4><p><strong>text.groupby([‘Pclass’,’Age’])[‘Fare’].mean().head()</strong></p><p>【补充】可以先使用cut将年龄分为5段后，再用groupby()统计不同Pcalss中不同Age_cut的船票花费的平均值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result[<span class="string">&#x27;Age_cut&#x27;</span>] = pd.cut(result[<span class="string">&#x27;Age&#x27;</span>],bins=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">80</span>])</span><br><span class="line">result.groupby([<span class="string">&#x27;Pclass&#x27;</span>,<span class="string">&#x27;Age_cut&#x27;</span>]).agg(&#123;<span class="string">&#x27;Fare&#x27;</span>:<span class="string">&#x27;mean&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="5）数据合并"><a href="#5）数据合并" class="headerlink" title="5）数据合并"></a>5）数据合并</h4><p><strong>result &#x3D; pd.merge(means,survived_sex,on&#x3D;’Sex’)</strong></p><p>【补充】可以使用本节学习的groupby方法进行合并。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sex_fare_survived = result.groupby(<span class="string">&#x27;Sex&#x27;</span>).agg(&#123;<span class="string">&#x27;Survived&#x27;</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;Fare&#x27;</span>:<span class="string">&#x27;mean&#x27;</span>&#125;).rename(columns=&#123;<span class="string">&#x27;Survived&#x27;</span>:<span class="string">&#x27;Survived_count&#x27;</span>,<span class="string">&#x27;Fare&#x27;</span>:<span class="string">&#x27;Fare_mean&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="6）存活人数最高的存活率（存活人数-x2F-总人数）"><a href="#6）存活人数最高的存活率（存活人数-x2F-总人数）" class="headerlink" title="6）存活人数最高的存活率（存活人数&#x2F;总人数）"></a>6）存活人数最高的存活率（存活人数&#x2F;总人数）</h4><p>首先得出不同年龄的总的存活人数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">survived_age = text[<span class="string">&#x27;Survived&#x27;</span>].groupby(text[<span class="string">&#x27;Age&#x27;</span>]).<span class="built_in">sum</span>()</span><br><span class="line">survived_age.head()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Age</span><br><span class="line"><span class="number">0.42</span>    <span class="number">1</span></span><br><span class="line"><span class="number">0.67</span>    <span class="number">1</span></span><br><span class="line"><span class="number">0.75</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0.83</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0.92</span>    <span class="number">1</span></span><br><span class="line">Name: Survived, dtype: int64</span><br></pre></td></tr></table></figure><p>再找出最大值的年龄段：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">survived_age[survived_age.values==survived_age.<span class="built_in">max</span>()]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Age</span><br><span class="line"><span class="number">24.0</span>    <span class="number">15</span></span><br><span class="line">Name: Survived, dtype: int64</span><br></pre></td></tr></table></figure><p>然后统计生还人数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_<span class="built_in">sum</span> = text[<span class="string">&#x27;Survived&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(_<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">342python</span><br></pre></td></tr></table></figure><p>最后先计算总人数，然后再输出最大存活率：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_<span class="built_in">sum</span> = text[<span class="string">&#x27;Survived&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum of person:&quot;</span>+<span class="built_in">str</span>(_<span class="built_in">sum</span>))</span><br><span class="line"></span><br><span class="line">precetn =survived_age.<span class="built_in">max</span>()/_<span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大存活率：&quot;</span>+<span class="built_in">str</span>(precetn))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> of person:<span class="number">342</span></span><br><span class="line">最大存活率：<span class="number">0.043859649122807015</span></span><br></pre></td></tr></table></figure><p>【小结】这一小节对于我来说有点吃力，题目越到后面越只能依照教程反推题目，还不能学会脱离教程，考虑再参考一些资料熟悉一下groupby机制以及常用方法。</p><h2 id="第四节"><a href="#第四节" class="headerlink" title="第四节"></a>第四节</h2><p>【思考】具体可以参考数据可视化入门：六种基本图表的特点和适用场合](<a href="https://www.afenxi.com/9620.html">https://www.afenxi.com/9620.html</a>)</p><p>常用图形有：</p><ul><li>plt.scatter() 散点图</li><li>plt.plot()    折线图</li><li>plt.bar() 直方图</li><li>plt.pie() 饼图</li><li>plt.boxplot() 箱型图</li></ul><p>1.普通柱状图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sex = text.groupby(&#x27;Sex&#x27;)[&#x27;Survived&#x27;].sum()</span><br><span class="line">sex.plot.bar()</span><br><span class="line">plt.title(&#x27;survived_count&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/QFV61XRr"><img src="/1674121749501-1674122860513.png" alt="1674121749501.png"></a></p><p>出现的问题是报错<strong>NameError</strong>，提示无法辨别plt是什么东西，所以这个图并不能像教程那样拥有标题。</p><p>看任务一似乎是要自己实例化一个对象。解决方法是发现没有按照题目进行导包，所以导致了报错。重新导包之后，就能正常显示标题了。</p><p><a href="https://postimg.cc/K3v7bfby"><img src="/1674122634015-1674122842137.png" alt="1674122634015.png"></a></p><p>【思考】对比柱状图发现女性存活率较高，得出的结论是性别会影响生存率。</p><p>2.比例柱状图</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示：计算男女中死亡人数 1表示生存，0表示死亡</span></span><br><span class="line">text.groupby([<span class="string">&#x27;Sex&#x27;</span>,<span class="string">&#x27;Survived&#x27;</span>])[<span class="string">&#x27;Survived&#x27;</span>].count().unstack().plot(kind=<span class="string">&#x27;bar&#x27;</span>,stacked=<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;survived_count&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;count&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/HcJz83K4"><img src="/1674122969135-1674122997958.png" alt="1674122969135.png"></a></p><p>3.折线图</p><p><strong>排序前的步骤</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fare_sur1 = text.groupby([<span class="string">&#x27;Fare&#x27;</span>])[<span class="string">&#x27;Survived&#x27;</span>].value_counts()</span><br><span class="line">fare_sur1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">18</span>))</span><br><span class="line">fare_sur1.plot(grid=<span class="literal">True</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/kDC3PbtY"><img src="/1674123203435-1674123232096.png" alt="1674123203435.png"></a></p><p><strong>排序后的步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fare_sur = text.groupby([&#x27;Fare&#x27;])[&#x27;Survived&#x27;].value_counts().sort_values(ascending=False)</span><br><span class="line">fare_sur</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(20, 18))</span><br><span class="line">fare_sur.plot(grid=True)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/F1CZVtmb"><img src="/1674123294492-1674123319682.png" alt="1674123294492.png"></a></p><p>4.双柱状图</p><p>不同舱位等级的人生存和死亡人员分布情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1表示生存，0表示死亡</span><br><span class="line">pclass_sur = text.groupby([&#x27;Pclass&#x27;])[&#x27;Survived&#x27;].value_counts()</span><br><span class="line">pclass_sur</span><br></pre></td></tr></table></figure><p>这个地方还要导一个新的包，不然还会报NameError的错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import seaborn as sns</span><br><span class="line">sns.countplot(x=&quot;Pclass&quot;, hue=&quot;Survived&quot;, data=text)</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/rDXY56Cn"><img src="/1674123498840-1674123542561.png" alt="1674123498840.png"></a></p><p>【思考】第一感受是相较于单纯的数据，可视化、图形化可以让数据更方便观察，但是同时要限定条件，对比纯数据来说会丢失一部分数据的精度，换来了易于观察。</p><p>5.自我尝试</p><p><strong>教程给的结构化图形</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">facet = sns.FacetGrid(text, hue=<span class="string">&quot;Survived&quot;</span>,aspect=<span class="number">3</span>)</span><br><span class="line">facet.<span class="built_in">map</span>(sns.kdeplot,<span class="string">&#x27;Age&#x27;</span>,shade= <span class="literal">True</span>)</span><br><span class="line">facet.<span class="built_in">set</span>(xlim=(<span class="number">0</span>, text[<span class="string">&#x27;Age&#x27;</span>].<span class="built_in">max</span>()))</span><br><span class="line">facet.add_legend()</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/PC5SkmhH"><img src="/1674123816162-1674123885115.png" alt="1674123816162.png"></a></p><p><strong>使用柱状图试试看</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pclass_sur = text.groupby([<span class="string">&#x27;Age&#x27;</span>])[<span class="string">&#x27;Survived&#x27;</span>].value_counts()</span><br><span class="line">pclass_sur</span><br><span class="line">sns.countplot(x=<span class="string">&quot;Age&quot;</span>, hue=<span class="string">&quot;Survived&quot;</span>, data=text)</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/18SfgH4x"><img src="/1674124018599-1674124039222.png" alt="1674124018599.png"></a></p><p>【补充】<strong>Seaborn</strong>（seaborn是python中的一个可视化库，是对matplotlib进行二次封装而成，既然是基于matplotlib，所以seaborn的很多图表接口和参数设置与其很是接近） </p><p>6.多折线图</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.Age[text.Pclass == <span class="number">1</span>].plot(kind=<span class="string">&#x27;kde&#x27;</span>)</span><br><span class="line">text.Age[text.Pclass == <span class="number">2</span>].plot(kind=<span class="string">&#x27;kde&#x27;</span>)</span><br><span class="line">text.Age[text.Pclass == <span class="number">3</span>].plot(kind=<span class="string">&#x27;kde&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">plt.legend((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),loc=<span class="string">&quot;best&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/YLptrXb8"><img src="/1674124113663-1674124215587.png" alt="1674124113663.png"></a></p><p>【小结】这一节相比其他小节没有那么枯燥，可以动手操作进行图像可视化。pyecharts个人感觉更倾向于项目类型的代码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task01</title>
      <link href="/2023/01/16/Task01/"/>
      <url>/2023/01/16/Task01/</url>
      
        <content type="html"><![CDATA[<h1 id="Task01"><a href="#Task01" class="headerlink" title="Task01"></a>Task01</h1><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h3><p>对于基础小白，第一次接触 Jupyter的小孩，在网页运行时，注意不要把黑框关掉，不然不能正常使用Jupyter，会显示 <strong>Server Connection Error</strong></p><p><img src="/1673925619699.png" alt="1673925619699"></p><p>另外是在启动 Jupyter时启动位置不同则打开的文件夹也不同。</p><p>推荐安装教程：<a href="https://blog.csdn.net/fakejvruo/article/details/124409158">https://blog.csdn.net/fakejvruo/article/details/124409158</a></p><h3 id="2-载入数据"><a href="#2-载入数据" class="headerlink" title="2.载入数据"></a>2.载入数据</h3><h4 id="1）数据的载入方式"><a href="#1）数据的载入方式" class="headerlink" title="1）数据的载入方式"></a>1）数据的载入方式</h4><p>第一种载入数据方式：使用相对路径载入数据</p><p>报错内容：<strong>FIleNotFoundError</strong>，原因是数据没有放在同一个文件夹下。</p><p>可以使用os.getcwd()查看当前工作目录，然后查找数据集是否在同一文件夹下。</p><p>第二种载入数据方式：使用绝对路径载入数据</p><p>使用绝对路径成功，只要是没有打错名称</p><p><img src="/1673926568197.png" alt="1673926568197"></p><p>【思考】使用pd.read_csv()与pd.read_table()的区别是csv会更加直观，将每个属性（列）都列出来了。而table将所有属性（列）放到了一起。</p><p><img src="/1673926774111.png" alt="1673926774111"></p><p>【补充】TSV与CSV的区别：TSV 是Tab-separated values的缩写，即制表符分隔值，是用制表符（Tab,’\t’）作为字段值的分隔符；CSV，Comma-separated values是用半角逗号（’,’）作为字段值的分隔符； </p><h4 id="2）逐块读取"><a href="#2）逐块读取" class="headerlink" title="2）逐块读取"></a>2）逐块读取</h4><p>【思考】逐块读取：将数据分成小块按块读入，得到的对象指向多个分块对象，在提取数据时才将数据提取进来，没有将实际数据先读入。</p><p>【原因】提高读取效率，在文件过大时，逐块读取可以将大文件切分成小文件，大大降低内存使用量但是消耗了时间。</p><p>【补充】read_csv中有个参数chunksize，通过指定一个chunksize分块大小来读取文件，返回的是一个可迭代的对象TextFileReader。</p><h4 id="3）数据块类型"><a href="#3）数据块类型" class="headerlink" title="3）数据块类型"></a>3）数据块类型</h4><p>数据块（chunker）类型使用<code>print(type(chunker))</code> 查看</p><p>使用for循环打印代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chunker = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>, chunksize=<span class="number">1000</span>) </span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chunker: </span><br><span class="line"><span class="built_in">print</span>(chunk) </span><br></pre></td></tr></table></figure><p>最后得知类型为<strong>可迭代对象</strong><code>&lt;class &#39;pandas.io.parsers.TextFileReader&#39;&gt;</code></p><h4 id="4）文件名中英文替换"><a href="#4）文件名中英文替换" class="headerlink" title="4）文件名中英文替换"></a>4）文件名中英文替换</h4><p>将文件头从英文转化成中文，使用**names&#x3D;[]**进行替换</p><p><img src="/1673927892896.png" alt="1673927892896"></p><ol><li><p>方法一</p><p><strong>主要区别在于是否设置header参数</strong></p><ul><li><p>header&#x3D;0的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>, names = [<span class="string">&#x27;乘客ID&#x27;</span>, <span class="string">&#x27;是否幸存&#x27;</span>, <span class="string">&#x27;仓位等级&#x27;</span>,<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;兄弟姐妹个数&#x27;</span>,<span class="string">&#x27;父母子女个数&#x27;</span>,<span class="string">&#x27;船票信息&#x27;</span>,<span class="string">&#x27;票价&#x27;</span>,<span class="string">&#x27;客舱&#x27;</span>,<span class="string">&#x27;登船港口&#x27;</span>],index_col=<span class="string">&#x27;乘客ID&#x27;</span>,header=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>没有header的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>, names = [<span class="string">&#x27;乘客ID&#x27;</span>, <span class="string">&#x27;是否幸存&#x27;</span>, <span class="string">&#x27;仓位等级&#x27;</span>,<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;兄弟姐妹个数&#x27;</span>,<span class="string">&#x27;父母子女个数&#x27;</span>,<span class="string">&#x27;船票信息&#x27;</span>,<span class="string">&#x27;票价&#x27;</span>,<span class="string">&#x27;客舱&#x27;</span>,<span class="string">&#x27;登船港口&#x27;</span>],index_col=<span class="string">&#x27;乘客ID&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>header&#x3D;None的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>, names = [<span class="string">&#x27;乘客ID&#x27;</span>, <span class="string">&#x27;是否幸存&#x27;</span>, <span class="string">&#x27;仓位等级&#x27;</span>,<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;兄弟姐妹个数&#x27;</span>,<span class="string">&#x27;父母子女个数&#x27;</span>,<span class="string">&#x27;船票信息&#x27;</span>,<span class="string">&#x27;票价&#x27;</span>,<span class="string">&#x27;客舱&#x27;</span>,<span class="string">&#x27;登船港口&#x27;</span>],index_col=<span class="string">&#x27;乘客ID&#x27;</span>,header=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法二</p><p>直接使用<code>df.columns=[]</code>修改列名。</p></li><li><p>方法三</p><p>使用方法通过字典对columns的键值对来设置修改：<code>df.rename(columns=&#123;&#39;PassengerId&#39;:&#39;乘客ID&#39;,&#39;Age&#39;:&#39;年龄&#39;&#125;,inplace=True)</code>，inplace参数代码是否在原表上修改。</p></li></ol><h3 id="3-初步观察"><a href="#3-初步观察" class="headerlink" title="3.初步观察"></a>3.初步观察</h3><p>查看数据基本信息：<strong>df.info()</strong></p><p><img src="/1673931546205.png" alt="1673931546205"></p><p>观察表格前10行的数据：<strong>df.head(10)</strong></p><p><img src="/1673931568280.png" alt="1673931568280"></p><p>观察表格后15行的数据：<strong>df.head(15)</strong></p><p><img src="/1673931599534.png" alt="1673931599534"></p><p>判断数据是否为空，空的地方返回True，其余地方返回False：<strong>df.isnull( ).head( )</strong></p><p><img src="/1673931618503.png" alt="1673931618503"></p><p>【思考】通过<strong>指标分析法</strong>，观察数据的平均数、众数、中位数、最大值、最小值、比率、绝对数、计数。</p><h3 id="4-保存数据"><a href="#4-保存数据" class="headerlink" title="4.保存数据"></a>4.保存数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(<span class="string">&#x27;train_chinese.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果出现乱码，就加入<code>encoding=&#39;GBK&#39; 或者 ’encoding = ’utf-8‘‘</code>修改字符集为GBK或者utf-8，解决乱码问题。</p><h2 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h2><h4 id="1-Series和DataFrame"><a href="#1-Series和DataFrame" class="headerlink" title="1.Series和DataFrame"></a>1.Series和DataFrame</h4><p>pandas只有两种数据类型，<strong>Series和DataFrame</strong> </p><p>Series你可以简单的理解为Excel中的行或者列，DataFrame可以理解为整个Excel表格。</p><ul><li>Series：一维数组，与Numpy种的一维array类似。二者与Python基本的数据结构List也很相近。字符串、布尔值、数字等都能保存在这里。</li><li>Time-Series：以时间为索引的Series</li><li>DataFrame：二维的表格型数据结构。可以将DataFrame理解为Series的容器。</li><li>Panel：三维的数组，可以理解为DataFrame的容器。</li></ul><p>查看DataFrame数据的每列名称：<strong>df.columns</strong></p><p><img src="/1673932775940.png" alt="1673932775940"></p><p>查看“Cabin”这列的所有值：<strong>df[‘Cablin’].head(3)</strong> or <strong>df.Cabin.head(3)</strong></p><p>这里参考给的是英文版的文件，如果使用中文的文件需要修改一下引号里面的值，不然会报KeyError。</p><p>修改为&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》<strong>df[‘客舱’].head(3)</strong> or <strong>df.客舱.head(3)</strong><img src="/1673933026770.png" alt="1673933026770"></p><h4 id="2-删除多余的列"><a href="#2-删除多余的列" class="headerlink" title="2.删除多余的列"></a>2.删除多余的列</h4><ol><li>&#96;&#96;&#96;python<br>del test_1[‘a’]<br>test_1.head(3)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 找到需要删除的列明，并对应索引，使用list获取列名，使用索引获取需要删除的列。如：**list(data)[2:5]**，然后嵌套入drop函数，删除对应的列：**datanor=data.drop(list(data)[2:5],axis=1)** axis=1表示对列进行操作 </span><br><span class="line"></span><br><span class="line">将[&#x27;PassengerId&#x27;,&#x27;Name&#x27;,&#x27;Age&#x27;,&#x27;Ticket&#x27;]这几个列元素隐藏：**df.drop([&#x27;PassengerId&#x27;,&#x27;Name&#x27;,&#x27;Age&#x27;,&#x27;Ticket&#x27;],axis=1).head(3)**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">显示年龄在10岁以下的乘客信息：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">df[df[&quot;年龄&quot;]&lt;10].head(3)</span><br></pre></td></tr></table></figure></li></ol><p><img src="/1673934406204.png" alt="1673934406204"></p><p>将年龄在10岁以上和50岁以下的乘客信息：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">midage = df[(df[<span class="string">&quot;年龄&quot;</span>]&gt;<span class="number">10</span>)&amp; (df[<span class="string">&quot;年龄&quot;</span>]&lt;<span class="number">50</span>)]</span><br></pre></td></tr></table></figure><p><img src="/1673934520641.png" alt="1673934520641"></p><p>将midage的数据中第100行的“Pclass”和“Sex”显示出来：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">midage = midage.reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/1673934668961.png" alt="1673934668961"></p><h4 id="3-了解resert-index"><a href="#3-了解resert-index" class="headerlink" title="3.了解resert_index()"></a>3.了解resert_index()</h4><p>【思考】resert_index()函数：</p><pre><code>Series.reset_index(level=None, drop=False, name=NoDefault.no_default, inplace=False)</code></pre><ul><li><p>drop: 重新设置索引后是否将原索引作为新的一列并入DataFrame，默认为False</p></li><li><p>inplace: 是否在原DataFrame上改动，默认为False</p></li><li><p>level: 如果索引(index)有多个列，仅从索引中删除level指定的列，默认删除所有列</p></li><li><p>col_level: 如果列名(columns)有多个级别，决定被删除的索引将插入哪个级别，默认插入第一级</p></li><li><p>col_fill: 如果列名(columns)有多个级别，决定其他级别如何命名</p></li></ul><p>作用： 用索引重置生成一个新的DataFrame或Series。当索引需要被视为列，或者索引没有意义，需要在另一个操作之前重置为默认值时。在机器学习中常常会对索引进行一定的处理，用于是否保留原有的索引。</p><h4 id="4-loc方法和iloc方法"><a href="#4-loc方法和iloc方法" class="headerlink" title="4.loc方法和iloc方法"></a>4.loc方法和iloc方法</h4><p>使用loc方法将midage的数据中第100，105，108行的“Pclass”，“Name”和“Sex”的数据显示出来：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">midage.loc[[<span class="number">100</span>,<span class="number">105</span>,<span class="number">108</span>],[<span class="string">&#x27;Pclass&#x27;</span>,<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Sex&#x27;</span>]]</span><br></pre></td></tr></table></figure><p>使用iloc方法将midage的数据中第100，105，108行的“Pclass”，“Name”和“Sex”的数据显示出来：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">midage.iloc[[<span class="number">100</span>,<span class="number">105</span>,<span class="number">108</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p>【思考】loc是指location，iloc中的i是指integer。</p><p>区别：</p><p>1.<code>loc</code>和<code>iloc</code>在切片时，范围的区间有些许差别。</p><p><code>iloc</code>中范围是前闭后开区间<br> <code>loc</code>中范围是前闭后闭区间</p><p>2.loc使用范围比iloc更广更实用，loc可以使用切片、名称(index,columns)、也可以切片和名称混合使用；但是loc不能使用不存在的索引来充当切片取值,像-1 </p><p>3.iloc只能用整数来取数 </p><h3 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h3><h4 id="1-利用Pandas对是咧数据进行排序。"><a href="#1-利用Pandas对是咧数据进行排序。" class="headerlink" title="1.利用Pandas对是咧数据进行排序。"></a>1.利用Pandas对是咧数据进行排序。</h4><p>自己构建一个数组，然后进行排序，要求升序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame = pd.DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>, <span class="number">4</span>)), </span><br><span class="line">                     index=[<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>], </span><br><span class="line">                     columns=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">frame</span><br></pre></td></tr></table></figure><p><img src="/1673936728604.png" alt="1673936728604"></p><p>pd.DataFrame() ：创建一个DataFrame对象</p><p>np.arange(8).reshape((2, 4)) : 生成一个二维数组（2*4）,第一列：0，1，2，3 第二列：4，5，6，7</p><p>index&#x3D;[‘2, 1] ：DataFrame 对象的索引列</p><p>columns&#x3D;[‘d’, ‘a’, ‘b’, ‘c’] ：DataFrame 对象的索引行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大多数时候我们都是想根据列的值来排序,所以，将你构建的DataFrame中的数据根据某一列，升序排列</span></span><br><span class="line">frame.sort_values(by=<span class="string">&#x27;c&#x27;</span>, ascending=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/1673939470081.png" alt="1673939470081"></p><p>by参数指向要排列的列，ascending参数指向排序的方式（升序还是降序） </p><h5 id="让行索引升序排序："><a href="#让行索引升序排序：" class="headerlink" title="让行索引升序排序："></a>让行索引升序排序：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.sort_index()</span><br></pre></td></tr></table></figure><p><img src="/1673939806124.png" alt="1673939806124"></p><h5 id="让列索引升序排序："><a href="#让列索引升序排序：" class="headerlink" title="让列索引升序排序："></a>让列索引升序排序：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/1673939843678.png" alt="1673939843678"></p><h5 id="让列索引降序排序："><a href="#让列索引降序排序：" class="headerlink" title="让列索引降序排序："></a>让列索引降序排序：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="/1673939981715.png" alt="1673939981715"></p><h5 id="让任选两列数据同时降序排序："><a href="#让任选两列数据同时降序排序：" class="headerlink" title="让任选两列数据同时降序排序："></a>让任选两列数据同时降序排序：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame.sort_values(by=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="/1673940124209.png" alt="1673940124209"></p><h5 id="对泰坦尼克号数据按票价和年龄两列进行综合排序（降序排列）"><a href="#对泰坦尼克号数据按票价和年龄两列进行综合排序（降序排列）" class="headerlink" title="对泰坦尼克号数据按票价和年龄两列进行综合排序（降序排列）"></a>对泰坦尼克号数据按票价和年龄两列进行综合排序（降序排列）</h5><p><strong>text.sort_values(by&#x3D;[‘票价’，’年龄’],ascending&#x3D;False).head(3)</strong></p><h4 id="2-利用Pandas进行算术计算，计算两个DataFrame数据相加结果。"><a href="#2-利用Pandas进行算术计算，计算两个DataFrame数据相加结果。" class="headerlink" title="2.利用Pandas进行算术计算，计算两个DataFrame数据相加结果。"></a>2.利用Pandas进行算术计算，计算两个DataFrame数据相加结果。</h4><p>首先也是自己先构建表格。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame1_a = pd.DataFrame(np.arange(<span class="number">9.</span>).reshape(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                     columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     index=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>])</span><br><span class="line">frame1_b = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape(<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">                     columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                     index=[<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;second&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="/1673940503386.png" alt="1673940503386"></p><p>1.展示a表：frame1_a</p><p>2.展示b表：frame1_b</p><p>3.将frame_a和frame_b进行相加：<strong>frame1_a  + frame1_b</strong></p><p>再两个DataFrame相加后，会返回一个新的DataFrame，对应的行和列的值会相加，没有对应的会变成空值NaN。</p><p>【问题】通过泰坦尼克号数据如何计算出再船上最大的家族有多少人？</p><p>方法一：max(text[‘兄弟姐妹个数’] + text[‘父母子女个数’])</p><h4 id="3-使用describe-函数查看数据基本统计信息"><a href="#3-使用describe-函数查看数据基本统计信息" class="headerlink" title="3.使用describe()函数查看数据基本统计信息"></a>3.使用describe()函数查看数据基本统计信息</h4><p>首先仍然是先建立一个例子，然后对例子进行操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame2 = pd.DataFrame([[<span class="number">1.4</span>, np.nan], </span><br><span class="line">                       [<span class="number">7.1</span>, -<span class="number">4.5</span>],</span><br><span class="line">                       [np.nan, np.nan], </span><br><span class="line">                       [<span class="number">0.75</span>, -<span class="number">1.3</span>]</span><br><span class="line">                      ], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], columns=[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>])</span><br></pre></td></tr></table></figure><p>调用函数的代码：<strong>frame2.describe( )</strong></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">count : 样本数据大小</span><br><span class="line">mean : 样本数据的平均值</span><br><span class="line">std : 样本数据的标准差</span><br><span class="line">min : 样本数据的最小值</span><br><span class="line">25% : 样本数据25%的时候的值</span><br><span class="line">50% : 样本数据50%的时候的值</span><br><span class="line">75% : 样本数据75%的时候的值</span><br><span class="line">max : 样本数据的最大值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征工程</title>
      <link href="/2023/01/05/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
      <url>/2023/01/05/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><p>特征工程是一个过程：将数据转换为能更好地表示潜在问题的特征，从而提高机器学习性能。</p><p>特征工程具体包含：</p><ul><li><p>转换数据的过程</p><p>特征工程适用于任何阶段的数据，应用于已经<strong>处理过</strong>的数据。处理的数据经常是表格形式的，数据会被组织成行（观察值）和列（属性）。</p></li><li><p>特征</p><p>特征是对机器学习过程有意义的数据属性。</p></li><li><p>更好地表示潜在问题</p><p>转换数据的目的在是要更好地表达更大的问题</p></li><li><p>提高机器学习性能</p><p>执行特征工程不仅是要获取更干净的数组，而且最终要在机器学习流水线中使用这些数据</p></li></ul><p>大体上，机器学习分成两类：<strong>监督学习</strong>和<strong>无监督学习</strong>。</p><p>1.监督学习</p><p>监督学习（预测分析）算法专门处理预测一个值的任务，通常是用数据中的其他属性来预测余下的一个属性。</p><p>在监督学习中，我们一般将数据集中希望预测的属性（一般只有一个，但是也不一定）叫做响应（response），其余的属性叫做特征（feature）</p><p>2.无监督学习</p><p>监督学习的目的是预测，而无监督学习就是对数据进行分类。此类分析和类型的创建属于无监督学习的一个特殊类别，称作<strong>聚类</strong>。</p><p>特征和属性通常有明显的区分，属性一般是表格数据的列，特征则一般只指代对机器学习算法有益的属性。我们一般将所有的列都称为特征，直到证明某些列是无用或有害的。</p><p>评估监督学习算法</p><p>当进行预测建模时，性能直接与模型利用数据结构能力，以及使用数据结构进行恰当预测的能力有关。</p><p>分为具体的类型：分类（预测定性响应）和回归（预测定量响应）</p><p>回归问题：我们用线性回归的<strong>均方误差（MSE）</strong></p><p>评估无监督学修方法算法</p><p>聚类分析：我们会利用<strong>轮廓系数</strong>（一个表示聚类分离性的变量，在-1和1之间）</p><ul><li><p>监督学习：预测分析</p><ul><li><p>回归——预测<strong>定量</strong>数据</p><p>主要使用均方差作为测量指标</p></li><li><p>分类——预测<strong>定性</strong>数据</p><p>主要使用准确率作为测量指标</p></li></ul></li><li><p>无监督学习：聚类——将数据按特征行为进行分类</p><ul><li>主要用轮廓系数作为测量指标</li></ul></li><li><p>统计检验：用相关系数、t检验、卡方检验，以及其他方法评估并量化袁术数据和转换后数据的效果</p></li></ul><p>特征增强：清洗数据</p><ul><li>对非结构化数据进行结构化</li><li>数据填充——在原先没有数据的位置填充（缺失）数据</li><li>数据归一化：<ul><li>标准化（也称为z分数标准化）</li><li>极差法（也称为min-max标准化）</li><li>L1和L2正则化（将数据投影到不同的空间）</li></ul></li></ul><p>简单方式（把有缺失值的特征删掉）&#x3D;&#x3D;&#x3D;&#x3D;》复杂方式（在其他特征上进行机器学习，填充缺失值）</p><p>归一化使用一般比较简单的数学工具改变数据的缩放比例</p><p>提问：属性在何种程度上才能成为真正的特征。</p><p>说人话就是：哪些列对我们的机器学习流水线没有帮助且有害，应该嘎掉？</p><ul><li>相关系数</li><li>识别并移除多重共线性</li><li>卡方检验</li><li>方差分析</li><li>理解p值</li><li>迭代特征选择</li><li>用机器学习测量熵和信息增益</li></ul><p>上述过程中都会建议删掉某些特征，但是需要给出不同的理由</p><p>实体匹配：通过手上目前已知的数据从数据集里找出这些具体属性。</p><p>主成分分析（PCA）</p><p>第二章</p><p>拿到一个新的数据集，首要任务是确认数据是结构化还是非结构化的。</p><p>问题来了，什么是结构化的数据？</p><p><strong>结构化的数据</strong>就是有组织的，可以分成观察值和特征的数据，一般以<strong>表格</strong>的形式组织。（行是观察值，列是特征。）</p><p><strong>非结构化的数据</strong>就是<strong>一团</strong>数据，或者只有一个特征（列）</p><p>定量数据本质上是数值，应该是衡量某样东西的数量。</p><p>定性数据本质上是类别，应该是描述某样东西的性质。</p><p>事实上，在大多数数据集中，我们会同时处理<strong>定量数据</strong>和<strong>定性数据</strong>。</p><p>由于定量数据和定性数据之间的模糊性，我们会使用一个更深层次的方法进行处理，称为数据的4个等级。</p><p>Pandas包中有很多方法可以识别和处理缺失值，最快的<strong>salary_ranges.isnull( ).sum( )</strong></p><p>还有一个方法时<strong>climate.dropna(axios&#x3D;0,inplace&#x3D;True)</strong></p><p>**salary_ranges.describe( )**方法默认描述定量列，但是如果没有定量列，也会描述定性列</p><p>当处理定量数据时，一般使用整数或浮点数作为类型（最好使用浮点数）；定性数据则一般适用<strong>字符串</strong>或者<strong>Unicode</strong>对象。</p><p>用Pandas中的map功能，将函数映射到整个数据集</p><ul><li><p>定类等级</p><p>数据第一个等级，结构最弱。整个等级的数据只按名称分类。</p><p>不能执行任何定量数学操作，例如加法或除法。这些数学操作没有意义。</p><p><strong>salary_ranges[‘Grade’].value_counts( ).head( )</strong></p></li><li><p>定序等级</p><p>定序等级继承了定类等级的所有属性，而且有重要的附加属性</p><ul><li>定序等级的数据可以自然排序</li><li>列中的某些数据比其他数据更好</li></ul><p>在定序等级，我们可以像定类等级那样进行计数，也可以引入比较和排序。</p></li><li><p>定距等级</p><p>这个等级中我们开始研究定量数据。数值数据不仅可以像定序里一样排序，而且值之间的差异也有意义。在定距等级，我们不仅可以对值进行<strong>排序和比较</strong>，还可以<strong>加减</strong>。</p><p>在该等级上可以进行加减，可以引入<strong>算术平均数</strong>和<strong>标准差</strong>。</p><p>用groupby清除大部分的噪声。</p><p>climate_sub_us.groupby(‘year’).mean( )[‘AverageTemperature’].plot( )</p><p>用滑动均值平滑图像</p><p>climate_sub_us.groupby(‘year’).mean( )[‘AverageTemperature’].rolling(10).mean( ).plot( )</p></li><li><p>定比等级</p><p>最高等级，在继承定距等级的加减运算，多了一个<strong>绝对零点</strong>的概念，可以坐乘除运算。</p></li></ul><p>第三章</p><p>清洗和增强数据：前者是指调整已有的列和行，后者则是指在数据集中删除和添加新的列。</p><p>数据增强的第一种方法是识别数据的缺失值。</p><p>空准确率：指当模型总是预测频率较高的类别时达到的正确率。</p><p>缺失值的常见<strong>填充方法</strong>有：</p><ul><li>0（数值型）</li><li>unknown或者Unknown（类别型）</li><li>？（类别型）</li></ul><p>缺失值会引发很多问题，但是大部分学习算法都不能处理缺失值。</p><p>缺失值的常见<strong>填充方法</strong>有：</p><ul><li>删除缺少值的行</li><li>填充缺失值</li></ul><p>K最近邻（KNN分类模型），网格搜索模块。这个模块会自动找到最合适我们模型的、交叉验证准确率最好的KNN参数组合（暴力搜索）。</p><p>P59</p><p>如果用0填充，准确率会低于直接删掉有缺失值的行。</p><p>如果训练集和测试集都是用整个x矩阵的均值填充的，违反了机器学习流程的核心原则（？）</p><p>当预测测试集的响应值时，不能假设我们已经知道了整个数据集的均值。</p><p>正确的方法是我们先计算出训练集的均值，然后用它填充测试集的缺失值。（？）</p><p>泛化能力：从训练集的特征中学习并将所学应用到未知隐藏数据上的能力。</p><ol><li>我们地Pinpeline分两步：<ul><li>拥有strategy &#x3D; ‘mean’的Imputer</li><li>KNN类型的分类器</li></ul></li><li>要为网格搜索重新定义param字典，因为必须明确n——neighbors参数所属地步骤</li></ol><p>Pinpeline类会为我们处理大部分的流程：可以恰当地从多个训练集取值并用其填充测试集的缺失值，还可以正确测试KNN的泛化能力，最终输出性能最佳的模型。</p><p>所有的数据尺度都不同，数据工程师可以选用某种<strong>归一化</strong>操作，在机器学习流水线上处理该问题。</p><p>归一化的操作旨在将行和列对其并转化为一致的规则。</p><ul><li><p>z分数标准化</p><p>z分数标准化是最常见的技术，利用了统计学里简单的z分数（标准分数）思想，z分数标准化的输出会被重新缩放，使均值为0、标准差为1。</p><p>内置的z分数归一化：</p><p><strong>from sklearn.preprocessing import StandardScaler</strong></p></li><li><p>min-max标准化</p><p>min-max标准化与上面类似，因为它也是用一个公式替换列中的每个值。使用这个公式可以看到，每列所有的值都会位于0~1.这种缩放的副作用是标准差非常小，这有可能不利于某种模型，因为异常值的权重降低了。</p></li><li><p>行归一化</p><p>行归一化不是计算每列的统计值（均值、最小值、最大值等），而是会保证每行有<strong>单位范数</strong>，意味着每行的向量长度相同。</p><p><strong>from sklearn.preprocessing import Normalizer</strong></p></li></ul><p>以上三点，是我们需要关注的3种数据归一化的方法。</p><p>很多算法会受尺度的影响</p><ul><li>KNN——因为依赖欧几里得距离</li><li>K均值聚类——和KNN的原因一样</li><li>逻辑回归、支持向量机、神经网络——如果使用梯度下降来学习权重</li><li>主成分分析——特征向量将偏向较大的列</li></ul><p><strong>特征增强的意义是，识别有问题的区域，并确定哪种修复方法最有效。</strong></p><p>第四章</p><p>需要注意的是，之前使用的特征是定量的。现在研究分类数据，使用现有特征构建全新的特征。</p><p>观察每一列并识别每列的类型和等级（怎么识别的？）</p><h5 id="1-填充分类特征"><a href="#1-填充分类特征" class="headerlink" title="1.填充分类特征"></a>1.填充分类特征</h5><p>对于数值数据，可以通过计算均值的方法填充缺失值，而对于分类数据，我们也有类似的处理方法：计算出最常见的类别用于填充。</p><h5 id="2-自定义填充器"><a href="#2-自定义填充器" class="headerlink" title="2.自定义填充器"></a>2.自定义填充器</h5><p>机器学习流水线：</p><ul><li>用流水线按顺序应用转换和最终的预测器</li><li>流水线的中间步骤只能是转换，这意味着它们必须实现fit和transform方法</li><li>最终的预测器只需要实现fit方法</li></ul><h5 id="3-自定义分类填充器"><a href="#3-自定义分类填充器" class="headerlink" title="3.自定义分类填充器"></a>3.自定义分类填充器</h5><p>用scikit-learn的Transformer Mixin基类创建我们的自定义分类填充器</p><p><img src="/1674873624454.png" alt="1674873624454"></p><h5 id="4-自定义定量填充器"><a href="#4-自定义定量填充器" class="headerlink" title="4.自定义定量填充器"></a>4.自定义定量填充器</h5><p>对于CustomQuantitativeImputer，我们添加了一个Strategy参数，指定如何填充定量数据里的缺失值。</p><p>&#x3D;&#x3D;&#x3D;》如何让机器学习算法利用分类数据呢？</p><p>答：需要将分类数据转换为数值数据</p><p>我们从定类等级开始、主要方法是将分类数据转换为虚拟变量，有两种选择：</p><ul><li>用Pandas自动找到分类变量并进行编码</li><li>创建自定义虚拟变量编码器，在流水线工作</li></ul><p>当使用虚拟变量时，小心虚拟变量陷阱（自变量有多重共线性或高度相关）。这些变量能依据彼此来预测。</p><p>被忽略的虚拟变量可以作为基础类别，和其他变量进行比较。</p><p>Pandas有个方法很方便，可以找到所有的分量变量，并将其转换为虚拟变量：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.get_dummies(X,columns = [<span class="string">&#x27;city&#x27;</span>,<span class="string">&#x27;boolean&#x27;</span>],   <span class="comment"># 要虚拟化的列</span></span><br><span class="line"></span><br><span class="line">prefix_sep=<span class="string">&#x27;__&#x27;</span>)   <span class="comment">#  前缀（列名）和单元格值之间的分隔符</span></span><br></pre></td></tr></table></figure><p>我们必须指定需要应用虚拟化的列，因为Pandas也会编码定序等级的列，这就没有意义了。</p><p>我们的transform方法会利用Pandas的get_dummies方法为指定的列创建虚拟变量。该自定义虚拟化器中唯一的参数是cols</p><p>在定序等级，由于数据的顺序有含义，使用虚拟变量是没有意义的。</p><p><strong>标签编码器</strong>是指，顺序数据的每个标签都会有一个相关数值。</p><p>P79代码</p><p>将连续特征分箱</p><p>如果数值数据是连续的，那么将其转换为分类变量可能是有意义的。</p><p>Pandas有一个函数叫做cut，可以将数据分箱（binning），它会创建数据的范围。当指定的bins为整数的时候（bins&#x3D;3），会定义x范围内的等宽分箱数。</p><p><strong>创建流水线的顺序</strong>是：</p><ol><li>用imputer填充缺失值</li><li>用虚拟变量填充分类列</li><li>对ordinal_column进行编码</li><li>将quantitative_column分箱</li></ol><p>多项式特征</p><p>1.参数</p><ul><li><p>degree</p><p>多项式特征的阶数，默认值是2</p></li><li><p>interaction_only</p><p>布尔值，如果为真，表示只生成互相影响&#x2F;交互的特征，也就是不同阶数特征的乘积。不过该值默认为false</p></li><li><p>include_bias</p><p>布尔值，如果为真（默认），会生成一列阶数为0的偏差列，也就是说列中全是数字1。</p></li></ul><p>2.探索性数据分析</p><p>热图的颜色是基于值的：颜色越深，特征的相关性越大。</p><p><strong>词项（token）</strong>文本数据比单个类别的文本复杂得多，因为长文本包括一系列类别。</p><p><strong>自然语言处理（NLP）</strong>涉及计算机与人类的交流，特别是对计算机进行编程，以处理自然语言。</p><p>词袋法</p><p>scikit-learn有一个feature_extraction模块，非常方便。它能以机器学习算法支持的方法提供数据的特征，包括文本数据。文本数据称为<strong>语料库</strong>（corpus），尤其是指文本内容或文档的集合。</p><p>将语料库转换为数值表示（也就是向量化）的常见方法是词袋。其背后的思想是：通过单词的出现来描述文档，完全忽略单词在文档中的位置。在它最简单的形式中，用一个<strong>袋子</strong>表示文本，不考虑语法和词序，并将这个袋子视作一个集合，其中<strong>重复度高</strong>的单词更重要。</p><ul><li><p><strong>分词（tokenizing）</strong></p><p>分词过程是用空白和标点将单词分开，将其变为词项。每个可能出现的词项都有一个整数ID。</p></li><li><p><strong>计数（counting）</strong></p><p>简单地计算文档中词项地出现次数。</p></li><li><p><strong>归一化（normalizing）</strong></p><p>将词项在大多数文档中地重要性按逆序排序。</p></li></ul><p><strong>CountVectorizer</strong>是将文本数据转换为其向量表示地最常用办法，和虚拟变量类似，CountVectorizer将文本列转换为矩阵，其中的列词项，单元值是每个文档中每个词项的出现次数。这个矩阵叫文档-词矩阵，因为每行代表一个文档，每列代表一个词。</p><p><strong>CountVectorizer</strong>的参数：</p><ul><li><p>stop_words</p><p>如果向其传入字符串English，那么该函数会使用内置的英语停用词列表。也可以自定义停用词列表。这些词会从词项中删除，不会表示为特征。</p><p>停用词的意义在于消除特征的噪声，去掉在模型中意义不大的常用词。</p></li><li><p>min_df</p><p>通过忽略在文档中出现频率低于阈值的词，减少特征的数量。</p></li><li><p>max_df</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vect = CountVectorizer（max_df=.8） # 只保留至多在80%文档中出现的单词</span><br></pre></td></tr></table></figure></li><li><p>ngram_range</p><p>这个参数接收一个元组，表示n指的范围（代表要提取的不同n-gram的数量）上下界。n-gram代表短语：若n&#x3D;1，则其是一个词项；若n&#x3D;2，则其代表相邻的两个词项。</p></li><li><p>analyzer</p><p>analyzer&#x3D;’word‘  # 默认分析器，划分为单词</p></li></ul><p>词干提取是一种常见的自然语言处理方法，可以将词汇中的词干提取出来，也就是把单词转换为其词根 ，从而缩小词汇量。NLTK是一个自然语言工具包，stemmer就是其中之一。</p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p>特征选择是特征工程的一个子集，特征选择是从原始数据中选择对于预测流水线而言<strong>最好</strong>的特征的过程。</p><p><strong>特征选择尝试剔除数据中的噪声。</strong></p><p>这个定义包括两个需要解决的问题：</p><ul><li>找到k特征子集的办法；</li><li>在机器学习中对”更好“的定义</li></ul><p>我们的目标是实现更好的预测性能，而且仅使用简单的指标进行测量。</p><p>分类任务可以使用如下指标：</p><ul><li>真阳性率和假阳性率</li><li>灵敏度（真阳性率）和特异性</li><li>假阴性率和加阳性率</li></ul><p>回归任务可以使用：</p><ul><li>平均绝对误差</li><li>R的平方</li></ul><p>我们除上述列表以外也可以测量其他元指标（是指不直接与模型预测性能相关的指标，它们试图衡量<strong>周遭</strong>的性能。）</p><ul><li>模型拟合&#x2F;训练所需的时间</li><li>拟合后的模型预测新实例的时间</li><li>需要持久化（永久保存）的数据大小</li></ul><p>通过特征选择来增强模型，先导入4中模型：</p><ul><li>逻辑回归</li><li>K最近邻（KNN）</li><li>决策树</li><li>随机森林</li></ul><p>KNN是按照欧几里得距离进行预测的，在非标准数据上可能会失效，但是其他3个算法不会受此影响。</p><p>决策树的准确率最高，并且预测时间和逻辑回归并列第一，而带缩放的KNN拟合最快。总体而言，决策树应该是最合适下一步采用的模型，因为它在最重要的两个指标上领先：</p><ul><li>我们想要最高的准确率，以保证预测的准确性</li><li>考虑到实时生产环境，预测时间低大有脾益</li></ul><p>选择特征的两个单变量方法：</p><h5 id="1-皮尔逊相关系数"><a href="#1-皮尔逊相关系数" class="headerlink" title="1.皮尔逊相关系数"></a>1.皮尔逊相关系数</h5><p>皮尔逊相关系数（Pandas默认的）会测量列之间的线性关系。该系数在-1~1变化，0代表没有线性关系。相关性接近-1或1代表线性关系很强。</p><p>相关系数要求每列是正态分布的，在很大程度上，我们也可以忽略这个要求，如果数据集超过500的阈值。</p><ul><li>拟合逻辑：从特征矩阵中选择相关性高于阈值的列</li><li>转换逻辑：对数据集取子集，只包含重要的列</li></ul><h5 id="2-假设检验"><a href="#2-假设检验" class="headerlink" title="2.假设检验"></a>2.假设检验</h5><p>则是原则是特征与响应变量没有关系（零假设）为真还是假</p><h3 id="基于模型的特征选择"><a href="#基于模型的特征选择" class="headerlink" title="基于模型的特征选择"></a>基于模型的特征选择</h3><p>1.再议自然语言处理</p><p>CountVectorizer有很多参数，在搜索最佳流水线时可以调整。有以下内置的特征选择参数。</p><ul><li>max_features：整数，设置特征构建器可以记忆的最多特征数量。要记忆的特征时由一个排名系统决定的，它依照词项在语料库中的出现次数进行排序。</li><li>min_df：浮点数，为词项在语料库中出现的频率设定下限；如果低于该值，则不进行标记。</li><li>max_df：浮点数，和上面类似，设定词项的频率上限。</li><li>stop_words：按照内置静态列表对词项类型进行限制。如果词项在stop_words中，那么即使频率在上面两个允许的范围内，也会被省略。</li></ul><p>2.使用机器学习选择特征</p><ul><li><p>特征选择指标——针对基于树的模型</p><p>在拟合决策树时，决策树会从根节点开始，在每个节点处贪婪地选择最优分隔，优化节点纯净度指标。默认情况下，scikit-learn每步都会优化基尼指数。每次分割时，模型会记录每个分割对整体优化目标的帮助。因此，在树形结构中，这些指标对特征重要性有作用。</p></li></ul><p>3.线性模型和正则化</p><ul><li><p>正则化</p><p>是一种对模型施加额外约束的方法，目的是防止过拟合，并改进数据泛化能力。正则化通过对需要优化的损失函数添加额外的条件来完成，意味着在拟合时，正则化的线性模型有可能严重减少甚至损坏特征。</p><p>L1正则化也称为lasso正则化</p><p>L2正则化也成为岭正则化</p></li><li><p>线性模型参数</p><p>逻辑回国分类器和支持向量分类器（SVC）的最大区别在于，后者会最大优化二分类项目的准确性，而前者对属性的建模更好。</p></li></ul><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><ol><li>探索性数据分析</li><li>特征理解</li><li>特征增强</li><li>特征构建</li><li>特征选择</li></ol><p><strong>特征转换</strong>时一套改变数据内部结构的算法，以产生数学上更优的超级列。具体解释就是特征转换时一组矩阵算法，会在结构上改变数据，产生本质上全新的数据矩阵。其基本思想是，数据集的原始特征是数据点的描述符&#x2F;特点，也应该能创造一组新的特征，用更少的列来解释数据点，并且效果不变。</p><p>5个主要步骤：分析、理解、增强、构建和选择。</p><ul><li>特征选择的降维原理是隔离信号列和忽略噪声列</li><li>特征转换发方法使用原始数据集的隐藏结构创建新的列，生成一个全新的数据集，结构与之前不同。</li><li>特征转换的原理是生成可以捕获数据本质的新特征。</li><li>特征构造用几个列之间的简单操作构造新的列。</li></ul><p>特征转换算法可以选择最佳的列，将其与几个全新的列进行组合，从而构建新的特征。</p><h3 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h3><p>PCA的目标是识别数据集中的模式和潜在结构，以创建新的特征，而非使用原始特征。</p><p>主成分会产生新的特征，最大化数据的方差。</p><p>PCA本身是无监督任务，意思是PCA不使用响应列进行投影&#x2F;转换。</p><p>PCA的工作原理，PCA利用了协方差矩阵的<strong>特征值分解</strong>。</p><ol><li>创建数据集的协方差矩阵</li><li>计算协方差矩阵的特征值</li><li>保留前k个特征值（按特征值降序排列）</li><li>用保留的特征向量转换新的数据点</li></ol><h5 id="1-创建数据集的协方差矩阵"><a href="#1-创建数据集的协方差矩阵" class="headerlink" title="1.创建数据集的协方差矩阵"></a>1.创建数据集的协方差矩阵</h5><p>为了计算鸢尾花数据集的协方差矩阵，我们先计算特征的均值向量，然后用NumPy计算协方差矩阵</p><p>2.计算协方差矩阵的特征值</p><p>NumPy有一个方便的函数，可以计算特征向量和特征值，以获得鸢尾花数据集的主成分：</p><p>3.按降序保留前k个特征值</p><p><img src="/1677478152776.png" alt="1677478152776"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2022/11/20/Python/"/>
      <url>/2022/11/20/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>在python中变量是没有类型的，但是变量存储的数据是有类型的。</p><p>想要将字符串转换成数字，必须要求字符串的内容都是数字</p><p>字符串拼接只能和字符串本身拼接，无法和非字符串类型进行拼接</p><p>.n会对小数部分做精度限制，同时会对小数部分做四舍五入</p><p>输出不换行在print里面加上一个逗号end&#x3D;‘’</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;itheima is a brand of itcast&quot;</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 临时变量 in 被统计的数据：</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;itheima is a brand of itcast中共含有：<span class="subst">&#123;num&#125;</span>个字母a&quot;</span>)</span><br></pre></td></tr></table></figure><p>for循环语句，本质上遍历：序列类型</p><p>语法一：range(num)</p><p>获取一个从0开始，到num结束的数字序列（不含num本身）</p><p>如，range（5）取得的数据是：[0，1，2，3，4]</p><p>语法二：range(num1,num2)</p><p>获得一个从num1开始，到num2结束的数字序列（不含num2本身）</p><p>如，range(5，10)取得的数据是：[5，6，7，8，9]</p><p>语法三：range(num1，num2，num3)</p><p>获得一个从num1开始，到num2结束的数字序列（不含num2本身）</p><p>数字之间的步长以step为准，默认情况下为1</p><p>如，range(5，10，2)取得的数据是：[5，7，9]</p><p>continue：在循环中，因某些原因，临时结束本次循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">accout = <span class="number">10000</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line"></span><br><span class="line">    num = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">if</span> accout &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> num &lt; <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;员工<span class="subst">&#123;i&#125;</span>,绩效分<span class="subst">&#123;num&#125;</span>,不发工资下一位&quot;</span>)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                accout -= <span class="number">1000</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;向员工<span class="subst">&#123;i&#125;</span>发放工资1000,账户余额还剩余<span class="subst">&#123;accout&#125;</span>元&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;工资发完了，下个月领取吧！&quot;</span>)</span><br></pre></td></tr></table></figure><p>None</p><ul><li>用在函数无返回值上</li><li>用在if判断上<ul><li>在if判断上，None等同于False</li><li>一般用于在函数中主动返回None，配合if判断做相关处理</li></ul></li><li>用于声明无内容的变量上<ul><li>定义变量，但暂时不需要变量有具体值，可以用None来代替</li></ul></li></ul><p>global关键字，在函数内声明变量为全局变量</p><p>数据容器根据特点的不同：</p><ul><li>是否支持重复元素</li><li>是否可以修改</li><li>是否有序</li></ul><p>列表、元组、字符串、集合、字典</p><p>1.1 查找某元素在列表内下标索引</p><p>index  &#x3D; mylist.index()</p><p>1.2 修改特定下标索引的值</p><p>mylist[0] &#x3D; “”</p><p>1.3 在指定下标位置插入新元素</p><p>mylist.insert()</p><p>1.4 在列表的尾部追加单个新元素</p><p>mylist.append()</p><p>1.5 在列表尾部追加一批新元素</p><p>mylist2 &#x3D; []</p><p>mylist.extend(mylist2)</p><p>1.6 删除指定下标索引的元素（2种方式）</p><p>del mylist[2]    element &#x3D; mylist.pop(2)</p><p>1.7 删除某元素在列表中的第一个匹配项</p><p>mylist.remove</p><p>1.8 清空列表</p><p>mylist.clear()</p><p>1.9 统计列表内某元素的数量</p><p>count  &#x3D; mylist.count</p><p>1.10 统计列表内全部元素数量</p><p>count &#x3D; len(mylist)</p><p>元组一旦定义完成，就不可修改</p><p>应用场景：当我们需要在程序内封装数据，又不希望封装的数据被篡改，那么元组就非常适合</p><p>统计元组内的元素个数</p><p>len()</p><p>字符串是一个<strong>无法修改</strong>的数据容器</p><p>修改指定下标的字符+移除特定下标的字符+追加字符等都<strong>无法做到</strong></p><ul><li><p>查找特定字符串的下标索引</p><p>value &#x3D; my_str[-16] </p><p>负数代表从后向前找 </p><p>my_str.index()</p></li><li><p>字符串的替换</p><p>字符串的替换不是修改字符串本身，而是得到了一个新字符串</p><p>my_str.replace()</p></li><li><p>字符串的分割</p><p>字符串本身不变，而是得到了一个列表对象</p><p>my_str.strip() </p><p>不传入参数，去除首尾空格</p></li><li><p>字符串的规整操作</p><p>去空格：my_str_list &#x3D; my_str.split(“ “)</p><p>去字符串：my_str_list &#x3D; my_str.split(“12”)</p></li></ul><p>序列：内容连续、有序，可使用下标索引的一类数据容器</p><p>列表、元组、字符串均可以视为序列</p><p>切片不会影响序列本身，而是会得到新的序列</p><ul><li>添加新元素</li></ul><p>my_set.add(”Python“)</p><ul><li>移除元素</li></ul><p>my_set.remove()</p><ul><li>随机取出一个元素</li></ul><p>element &#x3D; my_set.pop()</p><ul><li>清空集合</li></ul><p>my_set.clear()</p><ul><li>取2个集合的差集</li></ul><p>set &#x3D; set1.difference(f”{set2}“)</p><ul><li>消除2个集合的差集</li></ul><p>set &#x3D; set1.difference_update(set2)</p><ul><li>2个集合合并为1个</li></ul><p>set3 &#x3D; set1.union(set2)</p><ul><li>统计集合元素数量len()</li></ul><p>len()</p><p>集合的遍历</p><p>集合不支持下标索引，不能用while循环</p><p>可以用for循环</p><p>定义重复key的字典</p><p>从字典中基于Key获取Value</p><ul><li>新增元素</li></ul><p>stu_score[“ “] &#x3D; 66</p><ul><li>更新元素</li></ul><p>stu_score[“ “] &#x3D; 66</p><p>注意：字典key不可以重复，所以对已存在的Key执行上述操作，就是更新Value值</p><ul><li>删除元素</li></ul><p>my_dict.pop()</p><ul><li>清空元素</li></ul><p>my_dict.clear()</p><ul><li>获取全部的key</li></ul><p>my_dict.keys()</p><ul><li>遍历字典</li></ul><p>for key in keys:</p><p>​字典的key：{key}</p><p>​字典的value：{my_dict[key]}</p><p>for key in my_dict:</p><p>​key:{key}</p><p>​value:{my_dict[key]}</p><ul><li>统计字典内的元素数量</li></ul><p>len()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;</span><br><span class="line">    <span class="string">&quot;王力宏&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;部门&quot;</span>:<span class="string">&quot;科技部&quot;</span>,</span><br><span class="line">        <span class="string">&quot;工资&quot;</span>:<span class="string">&quot;3000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;级别&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;周杰伦&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;部门&quot;</span>:<span class="string">&quot;市场部&quot;</span>,</span><br><span class="line">        <span class="string">&quot;工资&quot;</span>:<span class="string">&quot;5000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;级别&quot;</span>:<span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;林俊杰&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;部门&quot;</span>:<span class="string">&quot;市场部&quot;</span>,</span><br><span class="line">        <span class="string">&quot;工资&quot;</span>:<span class="string">&quot;7000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;级别&quot;</span>:<span class="string">&quot;3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;张学友&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;部门&quot;</span>:<span class="string">&quot;科技部&quot;</span>,</span><br><span class="line">        <span class="string">&quot;工资&quot;</span>:<span class="string">&quot;4000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;级别&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;刘德华&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;部门&quot;</span>:<span class="string">&quot;市场部&quot;</span>,</span><br><span class="line">        <span class="string">&quot;工资&quot;</span>:<span class="string">&quot;6000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;级别&quot;</span>:<span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> my_dict:</span><br><span class="line">    <span class="comment"># if找到符合条件的员工</span></span><br><span class="line">    <span class="keyword">if</span> my_dict[name][<span class="string">&quot;级别&quot;</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 升值加薪的操作</span></span><br><span class="line">        <span class="comment"># 获取到员工的信息字典</span></span><br><span class="line">        employee = my_dict[name]</span><br><span class="line">        <span class="comment"># 修改员工信息</span></span><br><span class="line">        employee[<span class="string">&quot;级别&quot;</span>] = <span class="number">2</span></span><br><span class="line">        employee[<span class="string">&quot;工作&quot;</span>] += <span class="number">1000</span></span><br><span class="line">        <span class="comment"># 将员工的信息更新回my_dict</span></span><br><span class="line">        my_dict[name] = employee</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br></pre></td></tr></table></figure><p>数据容器可以从以下视角进行简单的分类：</p><ul><li><p>是否支持下标索引</p><ul><li>支持：列表、元组、字符串 - 序列类型</li><li>不支持：集合、字典 + 非序列类型</li></ul></li><li><p>是否支持重复元素</p><ul><li>支持：列表、元组、字符串 - 序列类型</li><li>不支持：集合、字典 - 非序列类型</li></ul></li><li><p>是否可以修改</p><ul><li>支持：列表、集合、字典</li><li>不支持：元组、字符串</li></ul></li><li><p>列表：一批数据，可修改、可重复的存储场景</p></li><li><p>元组：一批数据，不可修改、可重复的存储场景</p></li><li><p>字符串：一串字符串的存储场景</p></li><li><p>集合：一批数据，去重存储场景</p></li><li><p>字典：一批数据，可用key检索Value的存储场景</p></li></ul><p>翻转左右label_opts&#x3D;LabelOpts（position&#x3D;”right”） </p><p> 创建时间线Timeline</p><p>设置自动播放</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timeline.add_schema(</span><br><span class="line"></span><br><span class="line">play_interval=<span class="number">1000</span>,<span class="comment">#自动播放的时间间隔，单位毫秒</span></span><br><span class="line"></span><br><span class="line">is_timeline_show=<span class="literal">True</span>,<span class="comment">#是否在自动播放的时候，显示时间线</span></span><br><span class="line"></span><br><span class="line">is_auto_play=<span class="literal">True</span>,<span class="comment">#是否自动播放</span></span><br><span class="line"></span><br><span class="line">is_loop_play=<span class="literal">True</span><span class="comment">#是否循环自动播放</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在方法内部，想要访问类的成员变量，必须使用self</p><p> 为什么非要创建对象才能使用？</p><p>类只是一种程序内的“设计图纸”，需要基于图纸生产实体（对象），才能正常工作，这种套路称之为：面向对象编程</p><p>python类可以使用： <code>__init__（）</code>称之为构造方法</p><p><code>__str__（）</code>字符串方法 &#x2F;x</p><p> <code>__lt__（）</code>小于和大于符g                                                                                                                                                                                                     rtf</p><p>dx  a号比较方法</p><p> <code>__le__（）</code>小于等于和大于等于</p><p> <code>__eq__（）</code>比较运算符实现方法</p><p>pass关键字继承之后不想写新功能，防止报语法错误</p><p>多继承注意：多个父类中，如果有同名的成员，默认以继承顺序（从左到右）为优先级</p><p>先继承的保留，后继承的覆盖</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目设计</title>
      <link href="/2022/10/07/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/10/07/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>学生页</p><p>1.1 首页：用Echarts显示打卡，公告，问题数据（anty.gitee.io）</p><p>1.2 考勤记录：每日考勤打卡（redis）</p><p>1.3 公告：管理员发布的公告，只可查看，有时间戳</p><p>1.4 问题管理：所有学生发布的问题（宿舍问题和学生问题两种），可查看（根据楼栋、宿舍，学生姓名查询），发布问题，有时间戳。</p><p>1.5 我的问题：查看学生发布的问题，可进行查看，修改，删除操作</p><p>1.6 宿舍成员：查看宿舍的成员</p><p>1.7 个人中心：个人信息展示，修改密码，登出。</p><p>管理员页</p><p>1.1 首页：用Echarts显示打卡，公告，问题数据</p><p>1.2 公告：管理员发布的公告，可增加，查看，修改，删除，有时间戳</p><p>1.3  考勤管理：缺勤记录，打卡记录</p><p>1.4 问题管理：查看学生发布的问题（宿舍问题和学生问题两种），可进行查看（根据楼栋、宿舍，学生姓名和问题状态查询），管理状态（是否通过），删除操作，有时间戳。</p><p>1.5 宿舍人员：查看所有人员信息，可进行查看，添加，删除操作</p><p>1.6 用户管理：查看所有管理员，可添加删除管理员，有时间戳</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硅谷课堂【上】</title>
      <link href="/2022/10/07/%E7%A1%85%E8%B0%B7%E8%AF%BE%E5%A0%82/"/>
      <url>/2022/10/07/%E7%A1%85%E8%B0%B7%E8%AF%BE%E5%A0%82/</url>
      
        <content type="html"><![CDATA[<h3 id="一、搭建项目工程"><a href="#一、搭建项目工程" class="headerlink" title="一、搭建项目工程"></a>一、搭建项目工程</h3><h4 id="1、项目数据库设计"><a href="#1、项目数据库设计" class="headerlink" title="1、项目数据库设计"></a>1、项目数据库设计</h4><h5 id="1-1、创建数据库和表"><a href="#1-1、创建数据库和表" class="headerlink" title="1.1、创建数据库和表"></a>1.1、创建数据库和表</h5><p><img src="/1665794310601.png" alt="1665794310601"></p><p>前半段视频使用<code>ggkt_vod.sql</code>，浅浅分析一下建表细节。</p><p><img src="/img" alt="1665827555419"></p><p>主键id自动增长，无符号，无默认。课程id无自动增长，无符号，默认为0。章节名称无默认，字符集utf8mb4，排序规则utf8mb4_0900_ai_ci。显示排序无自动增长，无符号，默认为0。创建时间默认为CURRENT_TIMESTAMP，不跟据当前时间戳更新。修改时间默认为CURRENT_TIMESTAMP，根据当前时间戳更新。逻辑删除标志，默认为0，其他全无。</p><h5 id="1-2、数据库设计规则"><a href="#1-2、数据库设计规则" class="headerlink" title="1.2、数据库设计规则"></a>1.2、数据库设计规则</h5><p>更全面的文档参考<a href="https://www.w3cschool.cn/alibaba_java/">《阿里巴巴 Java开发手册》</a></p><h4 id="2、创建父工程"><a href="#2、创建父工程" class="headerlink" title="2、创建父工程"></a>2、创建父工程</h4><h5 id="2-1、创建父工程edu-online-springboot父工程，聚合其他模块，统一管理依赖版本贺放公共依赖"><a href="#2-1、创建父工程edu-online-springboot父工程，聚合其他模块，统一管理依赖版本贺放公共依赖" class="headerlink" title="2.1、创建父工程edu_online(springboot父工程，聚合其他模块，统一管理依赖版本贺放公共依赖)"></a>2.1、创建父工程edu_online(springboot父工程，聚合其他模块，统一管理依赖版本贺放公共依赖)</h5><h5 id="2-2、删除src目录（父工程仅作聚合使用）"><a href="#2-2、删除src目录（父工程仅作聚合使用）" class="headerlink" title="2.2、删除src目录（父工程仅作聚合使用）"></a>2.2、删除src目录（父工程仅作聚合使用）</h5><h5 id="2-3、引入依赖"><a href="#2-3、引入依赖" class="headerlink" title="2.3、引入依赖"></a>2.3、引入依赖</h5><p>修改SpringBoot版本为 ：2.2.1.RELEASE</p><p><img src="/.%5Cimg%5C1665918781647.png" alt="1665918781647"></p><p><strong>添加依赖</strong></p><p><em><strong>ps：有些依赖爆红也不用紧张，随后在整合过程中会逐步导包。</strong></em></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alibaba.version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.29<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">easyexcel.version</span>&gt;</span>2.2.0-beta2<span class="tag">&lt;/<span class="name">easyexcel.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.version</span>&gt;</span>4.5.14<span class="tag">&lt;/<span class="name">aliyun.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xxl-job.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">xxl-job.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置dependencyManagement锁定依赖的版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;easyexcel.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aliyunOSS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日期时间工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jodatime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xxl-job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、创建model模块"><a href="#3、创建model模块" class="headerlink" title="3、创建model模块"></a>3、创建model模块</h4><h5 id="3-1、创建子模块model（表对应实体类贺公共枚举类等）"><a href="#3-1、创建子模块model（表对应实体类贺公共枚举类等）" class="headerlink" title="3.1、创建子模块model（表对应实体类贺公共枚举类等）"></a>3.1、创建子模块model（表对应实体类贺公共枚举类等）</h5><p>ps：有可能会遇到创建模块之后文件都没有变色，选择添加maven框架支持，报出下面错误（仅截取部分）。<img src="/.%5Cimg%5C1665919071470.png" alt="1665919071470"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: java.lang.RuntimeException: org.codehaus.plexus.component.repository.exception.ComponentLookupException: com.google.inject.ProvisionException: Unable to provision, see the following errors:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) Error injecting constructor, java.lang.NoSuchMethodError: org.apache.maven.model.validation.DefaultModelValidator: method &lt;init&gt;()V not found</span><br><span class="line">  at org.jetbrains.idea.maven.server.embedder.CustomModelValidator.&lt;init&gt;(Unknown Source)</span><br><span class="line">  <span class="keyword">while</span> locating org.jetbrains.idea.maven.server.embedder.CustomModelValidator</span><br><span class="line">  at ClassRealm[plexus.core, parent: <span class="literal">null</span>] (via modules: org.eclipse.sisu.wire.WireModule -&gt; org.eclipse.sisu.plexus.PlexusBindingModule)</span><br><span class="line">  <span class="keyword">while</span> locating org.apache.maven.model.validation.ModelValidator annotated with <span class="meta">@com</span>.google.inject.name.Named(value=ide)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br><span class="line">      role: org.apache.maven.model.validation.ModelValidator</span><br><span class="line">  roleHint: ide</span><br><span class="line">at org.jetbrains.idea.maven.server.Maven3XServerEmbedder.getComponent(Maven3XServerEmbedder.java:<span class="number">488</span>)</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure><p>检查maven路径，是否是最常用的版本，我一般用3.6.1。如果maven版本太高，比如3.8.X都会出现该错误。</p><p><em><strong>网上查询之后都是说 ide跟 maven版本不兼容，最后我找出来的情况其实是创建父工程 springboot本身就没创建好，使用了之前创建的 springboot模板，再创建 maven子模块没有再报错。</strong></em></p><h5 id="3-2、引入依赖"><a href="#3-2、引入依赖" class="headerlink" title="3.2、引入依赖"></a>3.2、引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在引用时请在maven中央仓库搜索2.X最新版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建索引库的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-3、复制model代码"><a href="#3-3、复制model代码" class="headerlink" title="3.3、复制model代码"></a>3.3、复制model代码</h5><p>这里后期补充一下解析</p><h4 id="4、创建service模块"><a href="#4、创建service模块" class="headerlink" title="4、创建service模块"></a>4、创建service模块</h4><h5 id="4-1、创建子模块service"><a href="#4-1、创建子模块service" class="headerlink" title="4.1、创建子模块service"></a>4.1、创建子模块service</h5><h5 id="4-2、service模块引入依赖"><a href="#4-2、service模块引入依赖" class="headerlink" title="4.2、service模块引入依赖"></a>4.2、service模块引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据载体--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cimaog<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--web 需要启动项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 服务注册 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 服务调用feign &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 流量控制 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发者工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps：要把nacos、Feign和sentinel的依赖都注释掉，不然会影响我们正常启动程序。</p><h4 id="5、创建service-vod模块"><a href="#5、创建service-vod模块" class="headerlink" title="5、创建service_vod模块"></a>5、创建service_vod模块</h4><p><strong>在service模块中创建子模块service_vod</strong></p><h4 id="6、创建common模块"><a href="#6、创建common模块" class="headerlink" title="6、创建common模块"></a>6、创建common模块</h4><h5 id="6-1、创建子模块common，继承于父工程"><a href="#6-1、创建子模块common，继承于父工程" class="headerlink" title="6.1、创建子模块common，继承于父工程"></a>6.1、创建子模块common，继承于父工程</h5><h5 id="6-2、common模块引入依赖"><a href="#6-2、common模块引入依赖" class="headerlink" title="6.2、common模块引入依赖"></a>6.2、common模块引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-3、在common模块下创建子模块service-utils"><a href="#6-3、在common模块下创建子模块service-utils" class="headerlink" title="6.3、在common模块下创建子模块service_utils"></a>6.3、在common模块下创建子模块service_utils</h5><h5 id="6-3、在service-utils模块下创建swagger配置类"><a href="#6-3、在service-utils模块下创建swagger配置类" class="headerlink" title="6.3、在service_utils模块下创建swagger配置类"></a>6.3、在service_utils模块下创建swagger配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog.cmjy.config.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">webApiConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;cmjy&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//只显示api路径下的页面</span></span><br><span class="line">                <span class="comment">//.paths(Predicates.and(PathSelectors.regex(&quot;/api/.*&quot;)))</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">webApiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;网站-API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了网站微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;ciamog&quot;</span>, <span class="string">&quot;http://cimaog.top&quot;</span>, <span class="string">&quot;295376682@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-4、在service模块下导入service-utils的依赖（仿照进入model的格式写）"><a href="#6-4、在service模块下导入service-utils的依赖（仿照进入model的格式写）" class="headerlink" title="6.4、在service模块下导入service_utils的依赖（仿照进入model的格式写）"></a>6.4、在service模块下导入service_utils的依赖（仿照进入model的格式写）</h5><h5 id="6-5、最重要的一步是在启动类上写上一个包扫描注解"><a href="#6-5、最重要的一步是在启动类上写上一个包扫描注解" class="headerlink" title="6.5、最重要的一步是在启动类上写上一个包扫描注解"></a>6.5、最重要的一步是在启动类上写上一个包扫描注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog.cmjy.vod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/16 21:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.cimaog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceVodApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceVodApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-6、启动测试"><a href="#6-6、启动测试" class="headerlink" title="6.6、启动测试"></a>6.6、启动测试</h5><p><img src="/.%5Cimg%5C1665965778002.png" alt="1665965778002"></p><h3 id="二、后台管理系统-讲师管理接口"><a href="#二、后台管理系统-讲师管理接口" class="headerlink" title="二、后台管理系统-讲师管理接口"></a>二、后台管理系统-讲师管理接口</h3><h4 id="1、讲师管理模块需求"><a href="#1、讲师管理模块需求" class="headerlink" title="1、讲师管理模块需求"></a>1、讲师管理模块需求</h4><p>添加课程时候，需要选择所属讲师，所以要对讲师进行管理，就是基于讲师的CRUD操作</p><h4 id="2、讲师管理模块配置"><a href="#2、讲师管理模块配置" class="headerlink" title="2、讲师管理模块配置"></a>2、讲师管理模块配置</h4><h5 id="2-1、生成模块代码"><a href="#2-1、生成模块代码" class="headerlink" title="2.1、生成模块代码"></a>2.1、生成模块代码</h5><p><strong>（1）引入代码生成器依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（2）复制生成代码工具类</strong></p><p>修改代码中路径、数据库、包和表，复制到test目录下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        <span class="comment">//gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  ※※※ 这个地方要修改路径 ※※※</span></span><br><span class="line">        </span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;D:\\subject\\edu_online\\service\\service_vod&quot;</span>+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);    <span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;atcimaog&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  ※※※ 这个地方要修改密码，不然会报一个localhost@XXX&#x27;Yes&#x27;的异常 ※※※</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/glkt_vod?serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line"></span><br><span class="line">        pc.setParent(<span class="string">&quot;com.cimaog.cmjy&quot;</span>);</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;vod&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line"></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  ※※※ 这个地方要修改成表名 ※※※</span></span><br><span class="line">        </span><br><span class="line">        strategy.setInclude(<span class="string">&quot;teacher&quot;</span>);  </span><br><span class="line"></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        </span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); </span><br><span class="line">        <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）实体类统一替换为model模块的实体类</strong></p><p><img src="/.%5Cimg%5C1665922527208.png" alt="1665922527208"></p><p><em><strong>ps：按照视频操作可能会出现以下问题，解决方法就是把mapper中的实体类引用也改成需要的。</strong></em></p><p><img src="/.%5Cimg%5C1665923284715.png" alt="1665923284715"></p><h4 id="3、查询所有讲师列表接口"><a href="#3、查询所有讲师列表接口" class="headerlink" title="3、查询所有讲师列表接口"></a>3、查询所有讲师列表接口</h4><h5 id="3-1、编写controller"><a href="#3-1、编写controller" class="headerlink" title="3.1、编写controller"></a>3.1、编写controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 讲师 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> atcimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-10-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/admin/vod/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Teacher&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Teacher&gt; findAllTeacher = teacherService.list();</span><br><span class="line">        <span class="keyword">return</span> findAllTeacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2、编写配置类"><a href="#3-2、编写配置类" class="headerlink" title="3.2、编写配置类"></a>3.2、编写配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog.cmjy.vod.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/16 21:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.cimaog.cmjy.vod.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3、运行启动类"><a href="#3-3、运行启动类" class="headerlink" title="3.3、运行启动类"></a>3.3、运行启动类</h5><p>访问<a href="http://localhost:8301/admin/vod/teacher/findAll">http://localhost:8301/admin/vod/teacher/findAll</a></p><p>ps：启动之后出现下面这个错误单纯是因为配置文件<code>application.properties</code>的时候没修改数据库密码，但是我在修复bug的过程中修改了mysql的版本，改成8.0.26版本的了，于是数据源那边做了修改。从<code>com.mysql.jdbc.Driver</code>修改成<code>com.mysql.cj.jdbc.Driver</code>。</p><p><img src="/.%5Cimg%5C1665926785733.png" alt="1665926785733"></p><p>修改之后完美启动</p><p><img src="/.%5Cimg%5C1665928470690.png" alt="1665928470690"></p><h4 id="4、逻辑删除讲师接口"><a href="#4、逻辑删除讲师接口" class="headerlink" title="4、逻辑删除讲师接口"></a>4、逻辑删除讲师接口</h4><h5 id="4-1、编写controller"><a href="#4-1、编写controller" class="headerlink" title="4.1、编写controller"></a>4.1、编写controller</h5><p>TeacherController添加删除方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(value = &quot;remove/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteTeacher</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> teacherService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> isSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2、启用swagger测试方法"><a href="#4-2、启用swagger测试方法" class="headerlink" title="4.2、启用swagger测试方法"></a>4.2、启用swagger测试方法</h5><p><img src="/.%5Cimg%5C1665969140365.png" alt="1665969140365"></p><h4 id="6、定义统一返回结果对象"><a href="#6、定义统一返回结果对象" class="headerlink" title="6、定义统一返回结果对象"></a>6、定义统一返回结果对象</h4><p>因为在实际开发过程中，每个人对于统一返回类型的的想法不一样，为了统一接口，定义统一返回结果对象。</p><h5 id="6-1、创建结果类"><a href="#6-1、创建结果类" class="headerlink" title="6.1、创建结果类"></a>6.1、创建结果类</h5><p><strong>在service_utils模块创建interfacle定义返回状态码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog.cmjy.config.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  统一返回结果状态信息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/17 9:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    FAIL(<span class="number">201</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line">    SERVICE_ERROR(<span class="number">2012</span>, <span class="string">&quot;服务异常&quot;</span>),</span><br><span class="line">    DATA_ERROR(<span class="number">204</span>, <span class="string">&quot;数据异常&quot;</span>),</span><br><span class="line">    ILLEGAL_REQUEST(<span class="number">205</span>, <span class="string">&quot;非法请求&quot;</span>),</span><br><span class="line">    REPEAT_SUBMIT(<span class="number">206</span>, <span class="string">&quot;重复提交&quot;</span>),</span><br><span class="line"></span><br><span class="line">    LOGIN_AUTH(<span class="number">208</span>, <span class="string">&quot;未登陆&quot;</span>),</span><br><span class="line">    PERMISSION(<span class="number">209</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    PHONE_CODE_ERROR(<span class="number">211</span>, <span class="string">&quot;手机验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    MTCLOUD_ERROR(<span class="number">210</span>, <span class="string">&quot;直播接口异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    COUPON_GET(<span class="number">220</span>, <span class="string">&quot;优惠券已经领取&quot;</span>),</span><br><span class="line">    COUPON_LIMIT_GET(<span class="number">221</span>, <span class="string">&quot;优惠券已发放完毕&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FILE_UPLOAD_ERROR( <span class="number">21004</span>, <span class="string">&quot;文件上传错误&quot;</span>),</span><br><span class="line">    FILE_DELETE_ERROR( <span class="number">21005</span>, <span class="string">&quot;文件刪除错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VOD_PALY_ERROR(<span class="number">209</span>, <span class="string">&quot;请购买后观看&quot;</span>),;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ResultCodeEnum</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在service_utils模块创建结果类</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog.cmjy.config.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局统一返回结果类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;全局统一返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T body, Integer code, String message)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="literal">null</span>) &#123;</span><br><span class="line">            result.setData(body);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  baseCategory1List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> build(data,<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> build(data, <span class="number">201</span>,<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">message</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setMessage(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">code</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2、修改controller返回结果"><a href="#6-2、修改controller返回结果" class="headerlink" title="6.2、修改controller返回结果"></a>6.2、修改controller返回结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cimaog.cmjy.vod.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ciamog.cmjy.model.vod.Teacher;</span><br><span class="line"><span class="keyword">import</span> com.cimaog.cmjy.config.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.cimaog.cmjy.vod.service.TeacherService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 讲师 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> atcimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-10-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;讲师管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/admin/vod/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 查询所有讲师</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有讲师&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">findAllTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用service方法</span></span><br><span class="line">        List&lt;Teacher&gt; list = teacherService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(list).message(<span class="string">&quot;查询数据成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove/1</span></span><br><span class="line">    <span class="comment">//2 逻辑删除讲师</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;逻辑删除讲师&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;remove/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">removeTeacher</span><span class="params">(<span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;ID&quot;, required = true)</span></span></span><br><span class="line"><span class="params">                                <span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> teacherService.removeById(id);</span><br><span class="line">        <span class="keyword">if</span>(isSuccess) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);    <span class="comment">//后面也可以跟.message(&quot;查询数据成功&quot;)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="literal">null</span>);  <span class="comment">//后面也可以跟.message(&quot;查询数据失败&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3、启动测试"><a href="#6-3、启动测试" class="headerlink" title="6.3、启动测试"></a>6.3、启动测试</h5><p><img src="/.%5Cimg%5C1665973308475.png" alt="1665973308475"></p><p><em><strong>ps：测试的是时候控制台出现以下错误。可能是重启项目的时候 ide自动修改设置，jdk默认为了 15，然后控制台报错，显示 jdk版本过高。修改 bug如下图所示，选择 jdk为 1.8的版本。</strong></em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.springframework.cglib.core.ReflectUtils (file:/D:/learn/Heima/day04-MavenMyBatis/apache-maven-<span class="number">3.6</span><span class="number">.1</span>/mvn_resp/org/springframework/spring-core/<span class="number">5.2</span><span class="number">.1</span>.RELEASE/spring-core-<span class="number">5.2</span><span class="number">.1</span>.RELEASE.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,<span class="type">byte</span>[],<span class="type">int</span>,<span class="type">int</span>,java.security.ProtectionDomain)</span><br><span class="line">WARNING: Please consider reporting <span class="built_in">this</span> to the maintainers of org.springframework.cglib.core.ReflectUtils</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br></pre></td></tr></table></figure><p><img src="/.%5Cimg%5C1665973755322.png" alt="1665973755322"></p><h4 id="7、条件分页查询讲师列表接口"><a href="#7、条件分页查询讲师列表接口" class="headerlink" title="7、条件分页查询讲师列表接口"></a>7、条件分页查询讲师列表接口</h4><h5 id="7-1、创建配置类"><a href="#7-1、创建配置类" class="headerlink" title="7.1、创建配置类"></a>7.1、创建配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/16 21:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.cimaog.cmjy.vod.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-2、查询条件对象TeacherQueryVo"><a href="#7-2、查询条件对象TeacherQueryVo" class="headerlink" title="7.2、查询条件对象TeacherQueryVo"></a>7.2、查询条件对象TeacherQueryVo</h5><p>在之前model模块中已经从资料包中复制的话，就可以不用再自己创建了。</p><h5 id="7-3、创建条件查询带分页的方法"><a href="#7-3、创建条件查询带分页的方法" class="headerlink" title="7.3、创建条件查询带分页的方法"></a>7.3、创建条件查询带分页的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询分页列表</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;获取分页列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;&#123;limit&#125;/&#123;page&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">index</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable</span> Long page,</span></span><br><span class="line"><span class="params">        <span class="meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable</span> Long limit,</span></span><br><span class="line"><span class="params">        <span class="meta">@ApiParam(name = &quot;teacherVo&quot;, value = &quot;查询对象&quot;, required = false)</span></span></span><br><span class="line"><span class="params">        <span class="meta">@RequestBody(required = false)</span> TeacherQueryVo teacherQueryVo)</span> &#123;</span><br><span class="line">    <span class="comment">//创建page对象，传递当前页和每页记录数</span></span><br><span class="line">    Page&lt;Teacher&gt; pageParam = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, limit);</span><br><span class="line">    <span class="comment">//获取条件值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> teacherQueryVo.getName();<span class="comment">//讲师名称</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">level</span> <span class="operator">=</span> teacherQueryVo.getLevel();<span class="comment">//讲师级别</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">joinDateBegin</span> <span class="operator">=</span> teacherQueryVo.getJoinDateBegin();<span class="comment">//开始时间</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">joinDateEnd</span> <span class="operator">=</span> teacherQueryVo.getJoinDateEnd();<span class="comment">//结束时间</span></span><br><span class="line">    <span class="comment">//封装条件</span></span><br><span class="line">    QueryWrapper&lt;Teacher&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(name)) &#123;</span><br><span class="line">        wrapper.like(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(level)) &#123;</span><br><span class="line">        wrapper.eq(<span class="string">&quot;level&quot;</span>,level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(joinDateBegin)) &#123;</span><br><span class="line">        wrapper.ge(<span class="string">&quot;join_date&quot;</span>,joinDateBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(joinDateEnd)) &#123;</span><br><span class="line">        wrapper.le(<span class="string">&quot;join_date&quot;</span>,joinDateEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用方法得到分页查询结果</span></span><br><span class="line">    IPage&lt;Teacher&gt; pageModel = teacherService.page(pageParam, wrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(pageModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>ps：这个 StringUtils的导包，我使用的是 maven仓库下， springboot 5.X版本的 utils。当我使用阿帕奇和苞米豆版本的，在 level那个 isEmpty都会报红。</strong></em></p><p><strong>@RequestBody</strong>(required &#x3D; false) TeacherQueryVo teacherQueryVo</p><ul><li>提交参数以json格式提交</li><li>条件值可以为空</li><li>和post提交一起使用</li></ul><h5 id="7-4、测试方法"><a href="#7-4、测试方法" class="headerlink" title="7.4、测试方法"></a>7.4、测试方法</h5><p><img src="/.%5Cimg%5C1666002739415.png" alt="1666002739415"></p><p><em><strong>ps：测试倒是成功了，但是控制台一打开 swagger就报如下的警告，从网上搜了解决方法也没有成功解决</strong></em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">17</span> <span class="number">18</span>:<span class="number">29</span>:<span class="number">32.907</span>  WARN <span class="number">12296</span> --- [nio-<span class="number">8301</span>-exec-<span class="number">9</span>] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue <span class="literal">null</span> <span class="keyword">for</span> parameter type integer</span><br><span class="line"></span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">&quot;&quot;</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>) ~[na:<span class="number">1.8</span><span class="number">.0_131</span>]</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>) ~[na:<span class="number">1.8</span><span class="number">.0_131</span>]</span><br><span class="line">at java.lang.Long.valueOf(Long.java:<span class="number">803</span>) ~[na:<span class="number">1.8</span><span class="number">.0_131</span>]</span><br></pre></td></tr></table></figure><h4 id="8、新增讲师接口"><a href="#8、新增讲师接口" class="headerlink" title="8、新增讲师接口"></a>8、新增讲师接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4 新增讲师接口</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增讲师&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;saveTeacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Teacher teacher)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> teacherService.save(teacher);</span><br><span class="line">    <span class="keyword">if</span>(isSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、修改讲师接口"><a href="#9、修改讲师接口" class="headerlink" title="9、修改讲师接口"></a>9、修改讲师接口</h4><h5 id="9-1、编写获取id的方法"><a href="#9-1、编写获取id的方法" class="headerlink" title="9.1、编写获取id的方法"></a>9.1、编写获取id的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5 修改-根据id查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询讲师id&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;getTeacher/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getTeacher</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> teacherService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(teacher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-2、编写最后根据id修改的方法"><a href="#9-2、编写最后根据id修改的方法" class="headerlink" title="9.2、编写最后根据id修改的方法"></a>9.2、编写最后根据id修改的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6 修改-根据id修改</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改讲师&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;updateTeacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateTeacher</span><span class="params">(<span class="meta">@RequestBody</span> Teacher teacher)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> teacherService.updateById(teacher);</span><br><span class="line">    <span class="keyword">if</span>(isSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-3、测试成功"><a href="#9-3、测试成功" class="headerlink" title="9.3、测试成功"></a>9.3、测试成功</h5><p><img src="/.%5Cimg%5C1666009730372.png" alt="1666009730372"></p><h4 id="10、修改讲师接口"><a href="#10、修改讲师接口" class="headerlink" title="10、修改讲师接口"></a>10、修改讲师接口</h4><h5 id="10-1、编写获取id的方法"><a href="#10-1、编写获取id的方法" class="headerlink" title="10.1、编写获取id的方法"></a>10.1、编写获取id的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//7 批量删除</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;批量删除讲师&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;removeBatch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">removeBatch</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Long&gt; idList)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> teacherService.removeByIds(idList);</span><br><span class="line">    <span class="keyword">if</span>(isSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-2、报错了但是结果正常了"><a href="#10-2、报错了但是结果正常了" class="headerlink" title="10.2、报错了但是结果正常了"></a>10.2、报错了但是结果正常了</h5><p><img src="/1666099262444.png" alt="1666099262444"></p><h3 id="三、全局异常处理"><a href="#三、全局异常处理" class="headerlink" title="三、全局异常处理"></a>三、全局异常处理</h3><h4 id="1-创建自定义异常类cmjyException"><a href="#1-创建自定义异常类cmjyException" class="headerlink" title="1.创建自定义异常类cmjyException"></a>1.创建自定义异常类<code>cmjyException</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CmjyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写全局异常处理类GlobalExceptionHandle"><a href="#2-编写全局异常处理类GlobalExceptionHandle" class="headerlink" title="2.编写全局异常处理类GlobalExceptionHandle"></a>2.编写全局异常处理类GlobalExceptionHandle</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用到了aop技术，在不改变代码的情况下，对系统功能做了加强</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//全局异常处理</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(Error e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>).message(<span class="string">&quot;执行全局异常处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特定异常处理ArithmeticException</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//全局异常处理</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(ArithmeticException e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>).message(<span class="string">&quot;执行特定异常处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义异常处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;CmjyException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//全局异常处理</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(CmjyException e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="literal">null</span>).code(e.getCode()).message(<span class="string">&quot;执行自定义异常处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、搭建项目前端环境"><a href="#四、搭建项目前端环境" class="headerlink" title="四、搭建项目前端环境"></a>四、搭建项目前端环境</h3><h4 id="1、vue-admin-template模板"><a href="#1、vue-admin-template模板" class="headerlink" title="1、vue-admin-template模板"></a>1、vue-admin-template模板</h4><p>vue-admin-template是基于vue-element-admin的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。</p><p>GitHub地址：<a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a></p><h4 id="2、项目准备"><a href="#2、项目准备" class="headerlink" title="2、项目准备"></a>2、项目准备</h4><p>创建一个空文件夹，创建工作区，将vue-admin-template模板复制进来</p><h4 id="3、项目启动"><a href="#3、项目启动" class="headerlink" title="3、项目启动"></a>3、项目启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*下载依赖*/</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install</span></span><br><span class="line"></span><br><span class="line">/*启动项目*/</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>ps：当执行完 npm install之后控制台会报很多 warn，但属于正常情况，不影响我们的模板正常启动。</strong></em></p><p><img src="/1666313448949.png" alt="1666313448949"></p><h4 id="4、修改登录功能"><a href="#4、修改登录功能" class="headerlink" title="4、修改登录功能"></a>4、修改登录功能</h4><h5 id="4-1、创建登录接口"><a href="#4-1、创建登录接口" class="headerlink" title="4.1、创建登录接口"></a>4.1、创建登录接口</h5><p><strong>创建UserLoginController</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cimaog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/21 9:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/vod/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//login登录接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,<span class="string">&quot;admin-token&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//info信息接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;roles&quot;</span>,<span class="string">&quot;[admin]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;avatar&quot;</span>,<span class="string">&quot;https://oss.aliyuncs.com/aliyun_id_photo_bucket/default_handsome.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/1666321246875.png" alt="1666321246875"></p><p><img src="/1666403747100.png" alt="1666403747100"></p><h3 id="五、跨域问题"><a href="#五、跨域问题" class="headerlink" title="五、跨域问题"></a>五、跨域问题</h3><h4 id="1、什么是跨域"><a href="#1、什么是跨域" class="headerlink" title="1、什么是跨域"></a>1、什么是跨域</h4><p>（1）浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域 。前后端分离开发中，需要考虑ajax跨域的问题。</p><p><strong>（2）跨域的本质：浏览器对Ajax请求的一种限制</strong></p><h4 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h4><p>（1）在后端接口controller添加注解</p><p>（2）使用HTTP client</p><p>（3）通过gateway网关</p><p>小问题：退出时出现网络问题，可以修改前端代码实现</p><p><img src="/1666404682965.png" alt="1666404682965"></p><h3 id="六、讲师管理模块前端"><a href="#六、讲师管理模块前端" class="headerlink" title="六、讲师管理模块前端"></a>六、讲师管理模块前端</h3><h4 id="1、设置路由定义"><a href="#1、设置路由定义" class="headerlink" title="1、设置路由定义"></a>1、设置路由定义</h4><p><strong>注意：</strong>每个路由的name不能相同</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>), <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>), <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="comment">// 首页</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;硅谷课堂后台管理系统&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">// 讲师管理</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/vod&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/vod/course/list&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Vod&#x27;</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;点播管理&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;el-icon-bank-card&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">alwaysShow</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;teacher/list&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;TeacherList&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/vod/teacher/list&#x27;</span>),</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;讲师列表&#x27;</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;teacher/create&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;TeacherCreate&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/vod/teacher/form&#x27;</span>),</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;添加讲师&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;teacher/edit/:id&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;TeacherEdit&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/vod/teacher/form&#x27;</span>),</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;编辑讲师&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2、创建vue组件"><a href="#2、创建vue组件" class="headerlink" title="2、创建vue组件"></a>2、创建vue组件</h4><p>在src&#x2F;views文件夹下创建以下文件夹和文件</p><p><img src="/1666508179529.png" alt="1666508179529"></p><h4 id="3、form-vue"><a href="#3、form-vue" class="headerlink" title="3、form.vue"></a>3、form.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    讲师表单</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="4、list-vue"><a href="#4、list-vue" class="headerlink" title="4、list.vue"></a>4、list.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    讲师列表</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="七、讲师分页列表"><a href="#七、讲师分页列表" class="headerlink" title="七、讲师分页列表"></a>七、讲师分页列表</h3><h4 id="1、定义api"><a href="#1、定义api" class="headerlink" title="1、定义api"></a>1、定义api</h4><p><strong>创建文件 src&#x2F;api&#x2F;vod&#x2F;teacher.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api_name = <span class="string">&#x27;/admin/vod/teacher&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//讲师条件分页</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// current 当前页， limit 每页记录数， searchObj条件对象</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">pageList</span>(<span class="params">current,limit,searchObj</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line"></span><br><span class="line">           <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/findQueryPage/<span class="subst">$&#123;current&#125;</span>/<span class="subst">$&#123;limit&#125;</span>`</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用json格式传递  data:searchObj</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用普通格式传递  params:searchObj</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">data</span>: searchObj</span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、编写vue组件"><a href="#2、编写vue组件" class="headerlink" title="2、编写vue组件"></a>2、编写vue组件</h4><p><strong>src&#x2F;views&#x2F;vod&#x2F;teacher&#x2F;list.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">      讲师列表</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">//引入定义接口 js文件</span><br><span class="line"></span><br><span class="line">import teacherApi from &#x27;@/api/vod/teacher&#x27;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  data() &#123;  //初始值</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [], // 讲师列表</span><br><span class="line">      total: 0, // 总记录数</span><br><span class="line">      page: 1, // 当前页码</span><br><span class="line">      limit: 10, // 每页记录数</span><br><span class="line">      searchObj: &#123;&#125;, // 查询条件</span><br><span class="line">      multipleSelection: []// 批量删除选中的记录列表</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;  //页面渲染之前</span><br><span class="line">    this.fetchData()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;   //具体方法</span><br><span class="line">    fetchData()&#123;</span><br><span class="line">      //ajax</span><br><span class="line">      teacherApi.pageList(this.page,this.limit,this.searchObj)</span><br><span class="line">       .then(response =&gt; &#123;</span><br><span class="line">          this.list = response.data.records</span><br><span class="line">          this.total = response.data.total</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><em><strong>注意：需要在 controller中添加跨域注解，不然会出现跨域问题，以及老师的分页方法跟文档中的不太一样，多一个 findQueryPage。</strong></em></p><p><img src="/1666513288097.png" alt="1666513288097"></p><p><img src="/1666511979280.png" alt="1666511979280"></p><h4 id="3、改造页面"><a href="#3、改造页面" class="headerlink" title="3、改造页面"></a>3、改造页面</h4><h5 id="3-1、表格插件"><a href="#3-1、表格插件" class="headerlink" title="3.1、表格插件"></a>3.1、表格插件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 表格 --&gt;</span><br><span class="line">&lt;el-table</span><br><span class="line">  :data=&quot;list&quot;</span><br><span class="line">  border</span><br><span class="line">  stripe</span><br><span class="line">  @selection-change=&quot;handleSelectionChange&quot;&gt;</span><br><span class="line">  &lt;el-table-column type=&quot;selection&quot;/&gt;</span><br><span class="line">  &lt;el-table-column</span><br><span class="line">    label=&quot;#&quot;</span><br><span class="line">    width=&quot;50&quot;&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">      &#123;&#123; (page - 1) * limit + scope.$index + 1 &#125;&#125;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;80&quot; /&gt;</span><br><span class="line">  &lt;el-table-column label=&quot;头衔&quot; width=&quot;90&quot;&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">      &lt;el-tag v-if=&quot;scope.row.level === 1&quot; type=&quot;success&quot; size=&quot;mini&quot;&gt;高级讲师&lt;/el-tag&gt;</span><br><span class="line">      &lt;el-tag v-if=&quot;scope.row.level === 0&quot; size=&quot;mini&quot;&gt;首席讲师&lt;/el-tag&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-table-column&gt;</span><br><span class="line">  &lt;el-table-column prop=&quot;intro&quot; label=&quot;简介&quot; /&gt;</span><br><span class="line">  &lt;el-table-column prop=&quot;sort&quot; label=&quot;排序&quot; width=&quot;60&quot; /&gt;</span><br><span class="line">  &lt;el-table-column prop=&quot;joinDate&quot; label=&quot;入驻时间&quot; width=&quot;160&quot; /&gt;</span><br><span class="line">  &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">      &lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;removeById(scope.row.id)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">      &lt;router-link :to=&quot;&#x27;/vod/teacher/edit/&#x27;+scope.row.id&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;text&quot; size=&quot;mini&quot;&gt;修改&lt;/el-button&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure><h5 id="3-2、分页插件"><a href="#3-2、分页插件" class="headerlink" title="3.2、分页插件"></a>3.2、分页插件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 分页组件 --&gt;</span><br><span class="line">&lt;el-pagination</span><br><span class="line">  :current-page=&quot;page&quot;</span><br><span class="line">  :total=&quot;total&quot;</span><br><span class="line">  :page-size=&quot;limit&quot;</span><br><span class="line">  :page-sizes=&quot;[5, 10, 20, 30, 40, 50, 100]&quot;</span><br><span class="line">  style=&quot;padding: 30px 0; text-align: center;&quot;</span><br><span class="line">  layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">  @size-change=&quot;changePageSize&quot;</span><br><span class="line">  @current-change=&quot;changeCurrentPage&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h5 id="3-3、分页插件"><a href="#3-3、分页插件" class="headerlink" title="3.3、分页插件"></a>3.3、分页插件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--查询表单--&gt;</span><br><span class="line">&lt;el-card class=&quot;operate-container&quot; shadow=&quot;never&quot;&gt;</span><br><span class="line">  &lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;名称&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;searchObj.name&quot; placeholder=&quot;讲师名&quot; /&gt; </span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">  &lt;el-form-item label=&quot;头衔&quot;&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;searchObj.level&quot; clearable placeholder=&quot;头衔&quot;&gt;</span><br><span class="line">      &lt;el-option value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;</span><br><span class="line">      &lt;el-option value=&quot;0&quot; label=&quot;首席讲师&quot;/&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">  &lt;el-form-item label=&quot;入驻时间&quot;&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;searchObj.joinDateBegin&quot;</span><br><span class="line">      placeholder=&quot;开始时间&quot;</span><br><span class="line">      value-format=&quot;yyyy-MM-dd&quot; /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;-&quot;&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;searchObj.joinDateEnd&quot;</span><br><span class="line">      placeholder=&quot;结束时间&quot;</span><br><span class="line">      value-format=&quot;yyyy-MM-dd&quot; /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;fetchData()&quot;&gt;查询&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;default&quot; @click=&quot;resetData()&quot;&gt;清空&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line">&lt;/el-card&gt;</span><br></pre></td></tr></table></figure><h5 id="3-4、分页和清空方法"><a href="#3-4、分页和清空方法" class="headerlink" title="3.4、分页和清空方法"></a>3.4、分页和清空方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每页记录数改变，size：回调参数，表示当前选中的“每页条数”</span></span><br><span class="line"><span class="title function_">changePageSize</span>(<span class="params">size</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">limit</span> = size</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变页码，page：回调参数，表示当前选中的“页码”</span></span><br><span class="line"><span class="title function_">changeCurrentPage</span>(<span class="params">page</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">page</span> = page</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置表单</span></span><br><span class="line"><span class="title function_">resetData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchObj</span> = &#123;&#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="4、测试成功★-°-☆-￣▽￣-x2F-°★-。"><a href="#4、测试成功★-°-☆-￣▽￣-x2F-°★-。" class="headerlink" title="4、测试成功★,°:.☆(￣▽￣)&#x2F;$:.°★ 。"></a>4、测试成功<em>★,°</em>:.☆(￣▽￣)&#x2F;$:<em>.°★</em> 。</h4><p><img src="/1666514656763.png" alt="1666514656763"></p><h3 id="八、讲师删除"><a href="#八、讲师删除" class="headerlink" title="八、讲师删除"></a>八、讲师删除</h3><h4 id="1、定义api-1"><a href="#1、定义api-1" class="headerlink" title="1、定义api"></a>1、定义api</h4><p><strong>src&#x2F;api&#x2F;vod&#x2F;teacher.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeTeacherId</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/remove/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">`delete`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="2、定义methods"><a href="#2、定义methods" class="headerlink" title="2、定义methods"></a>2、定义methods</h4><p><strong>src&#x2F;views&#x2F;vod&#x2F;teacher&#x2F;list.vue</strong></p><p>使用MessageBox 弹框组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//讲师删除</span></span><br><span class="line"><span class="comment">//根据id删除数据</span></span><br><span class="line"><span class="title function_">removeById</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除该讲师信息, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherApi.<span class="title function_">removeById</span>(id)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除成功！&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九、讲师新增"><a href="#九、讲师新增" class="headerlink" title="九、讲师新增"></a>九、讲师新增</h3><h4 id="1、定义api-2"><a href="#1、定义api-2" class="headerlink" title="1、定义api"></a>1、定义api</h4><p> <strong>src&#x2F;api&#x2F;vod&#x2F;teacher.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">save</span>(<span class="params">teacher</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/saveTeacher`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">`post`</span>,</span><br><span class="line">    <span class="attr">data</span>: teacher</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="2、初始化组件"><a href="#2、初始化组件" class="headerlink" title="2、初始化组件"></a>2、初始化组件</h4><p><strong>src&#x2F;views&#x2F;vod&#x2F;teacher&#x2F;form.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;!-- 输入表单 --&gt;</span><br><span class="line">    &lt;el-form label-width=&quot;120px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师名称&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;teacher.name&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;入驻时间&quot;&gt;</span><br><span class="line">        &lt;el-date-picker v-model=&quot;teacher.joinDate&quot; value-format=&quot;yyyy-MM-dd&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师排序&quot;&gt;</span><br><span class="line">        &lt;el-input-number v-model=&quot;teacher.sort&quot; :min=&quot;0&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师头衔&quot;&gt;</span><br><span class="line">        &lt;el-select v-model=&quot;teacher.level&quot;&gt;</span><br><span class="line">          &lt;!--</span><br><span class="line">            数据类型一定要和取出的json中的一致，否则没法回填</span><br><span class="line">            因此，这里value使用动态绑定的值，保证其数据类型是number</span><br><span class="line">            --&gt;</span><br><span class="line">          &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;</span><br><span class="line">          &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot;/&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师简介&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;teacher.intro&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师资历&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;teacher.career&quot; :rows=&quot;10&quot; type=&quot;textarea&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 讲师头像 --&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师头像&quot;&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;saveOrUpdate()&quot;&gt;保存&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="3、实现新增功能"><a href="#3、实现新增功能" class="headerlink" title="3、实现新增功能"></a>3、实现新增功能</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> teacherApi <span class="keyword">from</span> <span class="string">&#x27;@/api/vod/teacher&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">BASE_API</span>: <span class="string">&#x27;http://localhost:8301&#x27;</span>,</span><br><span class="line">      <span class="comment">// 初始化讲师默认数据</span></span><br><span class="line">      <span class="attr">teacher</span>: &#123;</span><br><span class="line">        <span class="attr">sort</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">level</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">saveBtnDisabled</span>: <span class="literal">false</span> <span class="comment">// 保存按钮是否禁用，防止表单重复提交</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 页面渲染成功</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">saveOrUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 禁用保存按钮</span></span><br><span class="line">      <span class="comment">// this.saveBtnDisabled = true</span></span><br><span class="line">      <span class="comment">// if (!this.teacher.id) &#123;</span></span><br><span class="line">      <span class="comment">//   this.saveData()</span></span><br><span class="line">      <span class="comment">// &#125; else &#123;</span></span><br><span class="line">      <span class="comment">//   this.updateData()</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      teacherApi.<span class="title function_">saveTeacherId</span>(<span class="variable language_">this</span>.<span class="property">teacher</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;添加成功！&#x27;</span></span><br><span class="line">          <span class="comment">// message: response.message</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/vod/teacher/list&#x27;</span> &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 根据id更新记录</span></span><br><span class="line">    <span class="title function_">updateData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.avatar-uploader</span> <span class="selector-class">.avatar-uploader-icon</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#d9d9d9</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">178px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">178px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">line-height</span>: <span class="number">178px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.avatar-uploader</span> <span class="selector-class">.avatar-uploader-icon</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-color</span>: <span class="number">#409EFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.avatar-uploader</span> <span class="selector-tag">img</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">178px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">178px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/09/22/Linux/"/>
      <url>/2022/09/22/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux【连载中】"><a href="#Linux【连载中】" class="headerlink" title="Linux【连载中】"></a>Linux【连载中】</h1><p>快照——非常重要的一个功能</p><p>系统进行快照之后，即使文件进入到回收站被清空之后，返回快照状态依然可以恢复。</p><h2 id="Linux文件"><a href="#Linux文件" class="headerlink" title="Linux文件"></a>Linux文件</h2><p>linux中万物皆文件。</p><p>Linux中几个重要的目录结构</p><p>&#x2F;home </p><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p>&#x2F;root</p><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>&#x2F;etc</p><p>所有的系统管理所需要的配置文件和子目录</p><p>&#x2F;user</p><p>非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p><p>&#x2F;boot</p><p>存在的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，自己安装的东西别放这里。</p><p>&#x2F;media</p><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p>&#x2F;mnt</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里面的内容了。</p><h3 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h3><p>以 vi&#x2F;vim 打开一个档案就直接进入一般模式了。</p><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td><strong>复制</strong>光标当前一行</td></tr><tr><td>y数字y</td><td>复制一段（从第几行到第几行）</td></tr><tr><td>p</td><td>箭头移动到目的行<strong>粘贴</strong></td></tr><tr><td>u</td><td><strong>撤销上一步</strong></td></tr><tr><td>dd</td><td><strong>删除</strong>光标当前行</td></tr><tr><td>d数字d</td><td>删除光标（含）后多少行</td></tr><tr><td>x</td><td>删除一个字母，相当于del，<strong>向后删</strong></td></tr><tr><td>X</td><td>删除一个字母，相当于Backspace，向前删</td></tr><tr><td>yw</td><td>复制一个词</td></tr><tr><td>dw</td><td>删除一个词</td></tr><tr><td>^</td><td><strong>移动到行头</strong></td></tr><tr><td>$</td><td><strong>移动到行尾</strong></td></tr><tr><td>gg或者1+G</td><td><strong>移动到页头</strong></td></tr><tr><td>G</td><td><strong>移动到页尾</strong></td></tr><tr><td>数字+G（先输入数字，在按G）</td><td><strong>移动到目标行</strong></td></tr></tbody></table><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><p>在一般模式中可以进行删除、复制、粘贴等的动作，但是无法编辑文件内容！要等到你按下『i, I, o, O, a, A』等任何一个字母之后才会进入编辑模式。</p><p>注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下<code>Esc</code>键这个按键即可退出编辑模式。</p><p>1）进入编辑模式</p><p>表1-2 常用语法</p><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td><strong>当前光标前</strong></td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>o</td><td><strong>当前光标行的下一行</strong></td></tr><tr><td>I</td><td>光标所在行最前</td></tr><tr><td>A</td><td>光标所在行最后</td></tr><tr><td>O</td><td>当前光标行的上一行</td></tr></tbody></table><p>2）退出编辑模式</p><p>按<code>Esc</code>键</p><p>命令模式</p><p><strong>在一般模式当中</strong>，输入『 **: &#x2F; ?**』3个中的任何一个按钮，就可以将光标移动到最底下那一行。</p><p>在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等动作是在此模式中达成的！</p><p>基本语法</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td><strong>保存</strong></td></tr><tr><td>:q</td><td><strong>退出</strong></td></tr><tr><td>:!</td><td><strong>强制执行</strong></td></tr><tr><td>: %s&#x2F;旧字符&#x2F;新字符</td><td><strong>批量替换 只替换第一个词</strong></td></tr><tr><td>&#x2F; 要查找的词</td><td>n 查找下一个，N 往上查找</td></tr><tr><td>? 要查找的词</td><td>n是查找上一个，N是往下查找</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr><tr><td>ZZ（shift+zz） :nohl</td><td><strong>没有修改文件直接退出，如果修改了文件保存后退</strong>。去除高亮显示</td></tr></tbody></table><p>运行级别（runlevel）</p><p>开机 &#x3D;》BIOS &#x3D;》&#x2F;boot &#x3D;》init进程 &#x3D;》运行级别 &#x3D;》运行级对应的服务</p><p>查看默认级别：vi&#x2F;etc&#x2F;inittab</p><p>Linux系统有7种运行级别：<strong>常用的是级别3和5</strong></p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态（没有NFS），不支持网络</li><li>运行级别3：完全的多用户状态（有NFS），登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图像GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba【连载中】</title>
      <link href="/2022/09/20/Spring%20Cloud%20Alibaba/"/>
      <url>/2022/09/20/Spring%20Cloud%20Alibaba/</url>
      
        <content type="html"><![CDATA[<p>#Spring Cloud Alibaba</p><p>1.1.1</p><p>单体应用架构</p><p>垂直架构</p><p>分布式架构</p><p>SOA架构</p><p>微服务架构</p><p>1.2.1 </p><p>管理：nacos【服务治理，注册中心[服务注册 发现 剔除]】</p><p>通讯：springBoot restTemplate（”url“，参数）【自动将数据序列化成json，也可以反序列化】，feign</p><p>访问：gateway</p><p>自处理：sentinel   【实现熔断降级等功能】 </p><p>排错：skywalking  【链路追踪】</p><p>1.2.2 常见微服务架构</p><p>1.dubbo：zookeeper + dubbo + SpringMVC&#x2F;SpringBoot</p><ul><li>配套 通信方式：rpc</li><li>注册中心：zookeeper&#x2F;redis</li><li>配置中心：diamond</li></ul><p>2.SpringCloud：全家桶+嵌入第三方组件（Netflix）</p><ul><li>配套 通信方式：http restful</li><li>注册中心：eruka&#x2F;consul</li><li>配置中心：config</li><li>断路器：hystrix</li><li>网关：zuul</li><li>分布式追踪系统：sleuth + zipkin</li></ul><p>要在order模块中调用stock模块要用到springMVC，所以要添加web依赖，并且注释掉plugin</p><h2 id="Alibaba微服务组件Nacos注册中心"><a href="#Alibaba微服务组件Nacos注册中心" class="headerlink" title="Alibaba微服务组件Nacos注册中心"></a>Alibaba微服务组件Nacos注册中心</h2><p>2.1注册中心演变及其设计思想</p><p> 注册中心引入了一个心跳的机制（Time Task）</p><p>每5s发送一个心跳到注册中心 ，注册中心在超过5s没有收到心跳，默认本模块修改成下线down，超过30s就默认本模块已经宕机，剔除该模块。</p><p><strong>服务注册</strong>：Nacos Client会通过发送REST请求的方式向Nacos Server注册自己的服务，提供自身的元数据，比如ip地址、端口等信息，Nacos Server接收到注册请求后，就会把这些元数据信息存储在一个双层的内存Map中。</p><p><strong>服务心跳</strong>：在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防止被剔除。默认5s发送一次心跳。</p><p><strong>服务同步</strong>：Nacos Server集群之间会互相同步服务实例，用来保证服务信息的一致性。</p><p><strong>服务发现</strong>：服务消费者在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面注册的服务清单，并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个定时任务拉去服务端最新的注册表信息更新到本地缓存。</p><p><strong>服务健康检查</strong>：Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳的实例会将它的healthy属性设为false（客户端检查时不会发现），如果某个实例超过30s没有收到心跳，直接剔除该实例（被剔除的实例如果恢复发送心跳时会重新注册）。</p><p>三个指标：C一致性 A可用性 P分区容错性</p><p>一致性协议：CP+AP</p><p>先在setting中使用ignorance排除灰掉的pom依赖，再maven刷新</p><p>雪崩保护：</p><p>​保护阈值：设置0-1之间的值 比如0.5</p><p>​临时实例：当服务器宕机了也不会从服务列表中剔除</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">#永久实例  哪怕宕机了也不会删除实例</span></span><br></pre></td></tr></table></figure><p>有可能在注册中心服务下线了，但是因为定时拉取服务列表，还可能能够访问到。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#service：默认取 $&#123;spring.application.name&#125;,也可以通过该选项配置</span></span><br><span class="line"><span class="comment">#group：默认DEFAULT_GROUP 更细的相同特征的服务进行归类分组管理</span></span><br><span class="line"><span class="comment">#weight：通常要结合 安装 权重的负载均衡策略，权重越高分配的流量越大</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 cd nacos/ </span><br><span class="line">2 mvn ‐Prelease‐nacos clean install ‐U </span><br><span class="line">3 cd nacos/distribution/target/ </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# yum -y install java-1.8.0-openjdk*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认安装目录: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.151-1.b12.el7_4.x86_64</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:371)</span><br><span class="line">at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)</span><br><span class="line">at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:462)</span><br><span class="line">at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:473)</span><br><span class="line">at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:480)</span><br><span class="line">at com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl.findConfigMaxId(ExternalStoragePersistServiceImpl.java:553)</span><br><span class="line">at com.alibaba.nacos.config.server.service.dump.processor.DumpAllProcessor.process(DumpAllProcessor.java:51)</span><br><span class="line">at com.alibaba.nacos.config.server.service.dump.DumpService.dumpConfigInfo(DumpService.java:260)</span><br><span class="line">at com.alibaba.nacos.config.server.service.dump.DumpService.dumpOperate(DumpService.java:172)</span><br><span class="line">... 48 common frames omitted</span><br></pre></td></tr></table></figure><p>默认负载均衡策略类似于轮询机制，但是在轮询的基础上加入了区域和可用性。</p><p>负载均衡策略是在我们的消费端进行调用的。</p><p>线程安全：ThreadLocalRandom</p><p>使用配置文件进行负载均衡策略更方便一点</p><p>开启饥饿加载，解决第一次调用慢的问题</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">1 ribbon:</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>   <span class="string">eager‐load:</span> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>     <span class="comment"># 开启ribbon饥饿加载 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">4     enabled:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>     <span class="comment"># 配置mall‐user使用ribbon饥饿加载，多个使用逗号分隔 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">6     clients:</span> <span class="string">mall‐order</span> </span><br></pre></td></tr></table></figure><p>Spring Cloud LoadBalancer </p><p>spring官方提供了两种负载均衡的客户端：</p><p>1.RestTemplate</p><p>2.WebClient （国内使用较少，但是该技术填补了其他技术没有的空缺）</p><p>WebClient 是从Spring WebFlux 5.0版本开始提供的一个非阻塞的基于响应式编程的进行http请求的客户端工具。</p><p>注意：nacos-discovery中引入了ribbon，需要移除ribbon的包，如果不移除，也可以在yml中配置不使用ribbon</p><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p>Spring Cloud openfeign对Feign进行了增强，使其支持SpringMVC注解，另外还整合了Ribbon和Nacos，从而使得Feign的使用更加方便。</p><p>全局配置：当使用@Configuartion 会将配置作用所有的服务提供放</p><p>局部配置：1.通过配置类：如果只想针对某一个服务进行配置，就不要加@Configuration</p><p>​   2.通过配置文件</p><p>springboot默认的日志级别是info，feign的debug日志级别就不会输入</p><p>3.2契约配置</p><p>1）修改契约配置，支持Fegin原生的注解</p><p>注意：修改契约配置后，OrderFeignService不再支持springmvc的注解，需要使用Feign原生的注解</p><p>在既能升级cloud版本的同时又能使用原生Feign，减少因为注解更迭而产生的bug</p><p>在做全局异常处理的时候可以使用Thread.sleep对超时异常处理的bug进行修改。</p><p>负载均衡器首选Ribbon,服务熔断使用Sentinel</p><p>Nacos客户端 默认设计Properties的文件拓展名</p><p>一旦 修改成了非Properties格式，则必须通过file-extension进行设置</p><h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><p>服务的可用性问题</p><p>当服务器挂掉的时候，我们首先想到什么原因？</p><p>1.<strong>激增流量打垮</strong>，Load飙高。有可能你的服务器抗住了，但是缓存还没有预热，或者我的数据连接池来不及创建，把这些请求全部打入数据库中，数据库的服务器挂掉了，正在使用的客户迟迟得不到响应。所有线程都堆积在服务器前得不到回应，从而导致线程池打满，拖垮我们的服务器。</p><p>2.<strong>被其他服务拖垮</strong>，当我们请求一些慢sql，db超时或者第三方的服务，出现的卡顿或者网络不稳定。</p><p>3.<strong>异常未处理</strong>。本该正常执行的一些代码，比如说释放内存，清空对象，因为异常没有进行处理，久而久之导致内存溢出。</p><p>缺乏高可用防护&#x2F;容错机制，尤其是针对流量的防护。</p><p>服务雪崩效应：因服务提供者的不可用导致服务调用者的不可用，并将不可用逐渐放大的过程，就叫服务雪崩效应。</p><p>Sentinel:</p><p>面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p><p>于nacos等注册中心结合较好</p><p>就讲讲QPS控流机制。首先添加依赖，sentinel核心库，web产品启动器，创建一个requestMapping的接口，使用entry针对资源进行限制，再对限制该资源的规则进行控制，通过一个list集合，放入系统定义好的FlowRule，通过setResource指定对哪个资料进行流控，最后用Set limit设置受保护资源的阈值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《谷粒学苑》项目</title>
      <link href="/2022/09/18/%E8%B0%B7%E7%B2%92%E5%AD%A6%E8%8B%91/"/>
      <url>/2022/09/18/%E8%B0%B7%E7%B2%92%E5%AD%A6%E8%8B%91/</url>
      
        <content type="html"><![CDATA[<h1 id="《谷粒学苑》项目总结1-0"><a href="#《谷粒学苑》项目总结1-0" class="headerlink" title="《谷粒学苑》项目总结1.0"></a>《谷粒学苑》项目总结1.0</h1><p>本项目基于尚硅谷 <code>2020-05-11</code> 年的视频，进行总结复习。</p><p>123467</p><p>2347</p><p><img src="/1676986945147.png" alt="1676986945147"></p><p><img src="/1676987319332.png" alt="1676987319332"></p><h2 id="1-前景知识篇"><a href="#1-前景知识篇" class="headerlink" title="1-前景知识篇"></a>1-前景知识篇</h2><h3 id="1-1商业模式"><a href="#1-1商业模式" class="headerlink" title="1.1商业模式"></a>1.1商业模式</h3><p>本项目采用，B2C模式（Business To Customer 会员模式 ） </p><p><img src="C:\Users\86182\AppData\Local\Temp\1662559527690.png" alt="1662559527690"></p><h3 id="1-2项目功能模块"><a href="#1-2项目功能模块" class="headerlink" title="1.2项目功能模块"></a>1.2项目功能模块</h3><p>通过项目功能模块，回忆起对应代码如何实现效果。</p><p><img src="C:\Users\86182\AppData\Local\Temp\1662631718440.png" alt="1662631718440"></p><h3 id="1-3系统架构"><a href="#1-3系统架构" class="headerlink" title="1.3系统架构"></a>1.3系统架构</h3><p><img src="D:\photo\8fed6b485db444e9a4d0e31102628a59.png"></p><p><img src="D:\photo\4cd65e1f7e8042b7ab1af10531af9b25.png"></p><hr><h2 id="2-项目构建篇"><a href="#2-项目构建篇" class="headerlink" title="2-项目构建篇"></a>2-项目构建篇</h2><h3 id="1-1MySQL环境"><a href="#1-1MySQL环境" class="headerlink" title="1.1MySQL环境"></a>1.1MySQL环境</h3><ul><li><p>数据库名称：guli</p></li><li><p>运行资料 <code>guli_edu.sql</code> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_chapter&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_chapter` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;章节ID&#x27;,</span><br><span class="line">  `course_id` char(19) NOT NULL COMMENT &#x27;课程ID&#x27;,</span><br><span class="line">  `title` varchar(50) NOT NULL COMMENT &#x27;章节名称&#x27;,</span><br><span class="line">  `sort` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;显示排序&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_course_id` (`course_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT=&#x27;课程&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_chapter&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_chapter` VALUES (&#x27;1&#x27;,&#x27;14&#x27;,&#x27;第一章：HTML&#x27;,0,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-01-01 12:55:30&#x27;),(&#x27;1181729226915577857&#x27;,&#x27;18&#x27;,&#x27;第七章：I/O流&#x27;,70,&#x27;2019-10-09 08:32:58&#x27;,&#x27;2019-10-09 08:33:20&#x27;),(&#x27;1192252428399751169&#x27;,&#x27;1192252213659774977&#x27;,&#x27;第一章节&#x27;,0,&#x27;2019-11-07 09:28:25&#x27;,&#x27;2019-11-07 09:28:25&#x27;),(&#x27;15&#x27;,&#x27;18&#x27;,&#x27;第一章：Java入门&#x27;,0,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-10-09 09:13:19&#x27;),(&#x27;3&#x27;,&#x27;14&#x27;,&#x27;第二章：CSS&#x27;,0,&#x27;2019-01-01 12:55:35&#x27;,&#x27;2019-01-01 12:27:40&#x27;),(&#x27;32&#x27;,&#x27;18&#x27;,&#x27;第二章：控制台输入和输出&#x27;,0,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-01-01 12:27:40&#x27;),(&#x27;44&#x27;,&#x27;18&#x27;,&#x27;第三章：控制流&#x27;,0,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-01-01 12:27:40&#x27;),(&#x27;48&#x27;,&#x27;18&#x27;,&#x27;第四章：类的定义&#x27;,0,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-01-01 12:27:40&#x27;),(&#x27;63&#x27;,&#x27;18&#x27;,&#x27;第五章：数组&#x27;,0,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-01-01 12:27:40&#x27;),(&#x27;64&#x27;,&#x27;18&#x27;,&#x27;第六章：继承&#x27;,61,&#x27;2019-01-01 12:27:40&#x27;,&#x27;2019-10-09 08:32:47&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_comment&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_comment` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;讲师ID&#x27;,</span><br><span class="line">  `course_id` varchar(19) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;课程id&#x27;,</span><br><span class="line">  `teacher_id` char(19) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;讲师id&#x27;,</span><br><span class="line">  `member_id` varchar(19) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;会员id&#x27;,</span><br><span class="line">  `nickname` varchar(50) DEFAULT NULL COMMENT &#x27;会员昵称&#x27;,</span><br><span class="line">  `avatar` varchar(255) DEFAULT NULL COMMENT &#x27;会员头像&#x27;,</span><br><span class="line">  `content` varchar(500) DEFAULT NULL COMMENT &#x27;评论内容&#x27;,</span><br><span class="line">  `is_deleted` tinyint(1) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;逻辑删除 1（true）已删除， 0（false）未删除&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_course_id` (`course_id`),</span><br><span class="line">  KEY `idx_teacher_id` (`teacher_id`),</span><br><span class="line">  KEY `idx_member_id` (`member_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;评论&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_comment&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_comment` VALUES (&#x27;1194499162790211585&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三123&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;课程很好&#x27;,0,&#x27;2019-11-13 14:16:08&#x27;,&#x27;2019-11-13 14:16:08&#x27;),(&#x27;1194898406466420738&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三123&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;11&#x27;,0,&#x27;2019-11-14 16:42:35&#x27;,&#x27;2019-11-14 16:42:35&#x27;),(&#x27;1194898484388200450&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三123&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;111&#x27;,0,&#x27;2019-11-14 16:42:53&#x27;,&#x27;2019-11-14 16:42:53&#x27;),(&#x27;1195251020861317122&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,NULL,NULL,&#x27;2233&#x27;,0,&#x27;2019-11-15 16:03:45&#x27;,&#x27;2019-11-15 16:03:45&#x27;),(&#x27;1195251382720700418&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,NULL,NULL,&#x27;4455&#x27;,0,&#x27;2019-11-15 16:05:11&#x27;,&#x27;2019-11-15 16:05:11&#x27;),(&#x27;1195252819177570306&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三1231&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;55&#x27;,0,&#x27;2019-11-15 16:10:53&#x27;,&#x27;2019-11-15 16:10:53&#x27;),(&#x27;1195252899448160258&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三1231&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;55&#x27;,0,&#x27;2019-11-15 16:11:13&#x27;,&#x27;2019-11-15 16:11:13&#x27;),(&#x27;1195252920587452417&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三1231&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;223344&#x27;,0,&#x27;2019-11-15 16:11:18&#x27;,&#x27;2019-11-15 16:11:18&#x27;),(&#x27;1195262128095559681&#x27;,&#x27;14&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三1231&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;11&#x27;,0,&#x27;2019-11-15 16:47:53&#x27;,&#x27;2019-11-15 16:47:53&#x27;),(&#x27;1196264505170767874&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1&#x27;,&#x27;小三1231&#x27;,&#x27;http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoj0hHXhgJNOTSOFsS4uZs8x1ConecaVOB8eIl115xmJZcT4oCicvia7wMEufibKtTLqiaJeanU2Lpg3w/132&#x27;,&#x27;666666&#x27;,0,&#x27;2019-11-18 11:10:58&#x27;,&#x27;2019-11-18 11:10:58&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_course&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_course` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;课程ID&#x27;,</span><br><span class="line">  `teacher_id` char(19) NOT NULL COMMENT &#x27;课程讲师ID&#x27;,</span><br><span class="line">  `subject_id` char(19) NOT NULL COMMENT &#x27;课程专业ID&#x27;,</span><br><span class="line">  `subject_parent_id` char(19) NOT NULL COMMENT &#x27;课程专业父级ID&#x27;,</span><br><span class="line">  `title` varchar(50) NOT NULL COMMENT &#x27;课程标题&#x27;,</span><br><span class="line">  `price` decimal(10,2) unsigned NOT NULL DEFAULT &#x27;0.00&#x27; COMMENT &#x27;课程销售价格，设置为0则可免费观看&#x27;,</span><br><span class="line">  `lesson_num` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;总课时&#x27;,</span><br><span class="line">  `cover` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT &#x27;课程封面图片路径&#x27;,</span><br><span class="line">  `buy_count` bigint(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;销售数量&#x27;,</span><br><span class="line">  `view_count` bigint(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;浏览数量&#x27;,</span><br><span class="line">  `version` bigint(20) unsigned NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;乐观锁&#x27;,</span><br><span class="line">  `status` varchar(10) NOT NULL DEFAULT &#x27;Draft&#x27; COMMENT &#x27;课程状态 Draft未发布  Normal已发布&#x27;,</span><br><span class="line">  `is_deleted` tinyint(3) DEFAULT NULL COMMENT &#x27;逻辑删除 1（true）已删除， 0（false）未删除&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_title` (`title`),</span><br><span class="line">  KEY `idx_subject_id` (`subject_id`),</span><br><span class="line">  KEY `idx_teacher_id` (`teacher_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT=&#x27;课程&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_course&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_course` VALUES (&#x27;1192252213659774977&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1178214681139539969&#x27;,&#x27;1178214681118568449&#x27;,&#x27;java基础课程：test&#x27;,0.01,2,&#x27;https://guli-file-190513.oss-cn-beijing.aliyuncs.com/cover/default.gif&#x27;,4,387,1,&#x27;Normal&#x27;,0,&#x27;2019-11-07 09:27:33&#x27;,&#x27;2019-11-18 13:35:03&#x27;),(&#x27;14&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1101348944971091969&#x27;,&#x27;1101348944920760321&#x27;,&#x27;XHTML CSS2 JS整站制作教程课程学习&#x27;,0.00,3,&#x27;http://guli-file.oss-cn-beijing.aliyuncs.com/cover/2019/03/13/d0086eb0-f2dc-45f7-bba1-744d95e5be0f.jpg&#x27;,3,44,15,&#x27;Normal&#x27;,0,&#x27;2018-04-02 18:33:34&#x27;,&#x27;2019-11-16 21:21:45&#x27;),(&#x27;15&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1101348944971091969&#x27;,&#x27;1101348944920760321&#x27;,&#x27;HTML5入门课程学习&#x27;,0.00,23,&#x27;http://guli-file.oss-cn-beijing.aliyuncs.com/cover/2019/03/13/22997b8e-3606-4d2e-9b4f-09f48418b6e4.jpg&#x27;,0,51,17,&#x27;Normal&#x27;,0,&#x27;2018-04-02 18:34:32&#x27;,&#x27;2019-11-12 10:19:20&#x27;),(&#x27;18&#x27;,&#x27;1189389726308478977&#x27;,&#x27;1178214681139539969&#x27;,&#x27;1178214681118568449&#x27;,&#x27;Java精品课程&#x27;,0.01,20,&#x27;http://guli-file.oss-cn-beijing.aliyuncs.com/cover/2019/03/06/866e9aca-b530-4f71-a690-72d4a4bfd1e7.jpg&#x27;,151,737,6,&#x27;Normal&#x27;,0,&#x27;2018-04-02 21:28:46&#x27;,&#x27;2019-11-18 11:14:52&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_course_collect&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_course_collect` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;收藏ID&#x27;,</span><br><span class="line">  `course_id` char(19) NOT NULL COMMENT &#x27;课程讲师ID&#x27;,</span><br><span class="line">  `member_id` char(19) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;课程专业ID&#x27;,</span><br><span class="line">  `is_deleted` tinyint(3) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;逻辑删除 1（true）已删除， 0（false）未删除&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT=&#x27;课程收藏&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_course_collect&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_course_collect` VALUES (&#x27;1196269345666019330&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1&#x27;,1,&#x27;2019-11-18 11:30:12&#x27;,&#x27;2019-11-18 11:30:12&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_course_description&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_course_description` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;课程ID&#x27;,</span><br><span class="line">  `description` text COMMENT &#x27;课程简介&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;课程简介&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_course_description&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_course_description` VALUES (&#x27;1104870479077879809&#x27;,&#x27;&lt;p&gt;11&lt;/p&gt;&#x27;,&#x27;2019-03-11 06:23:44&#x27;,&#x27;2019-03-11 06:23:44&#x27;),(&#x27;1192252213659774977&#x27;,&#x27;&lt;p&gt;测试&lt;/p&gt;&#x27;,&#x27;2019-11-07 09:27:33&#x27;,&#x27;2019-11-13 16:21:28&#x27;),(&#x27;14&#x27;,&#x27;&#x27;,&#x27;2019-03-13 06:04:43&#x27;,&#x27;2019-03-13 06:05:33&#x27;),(&#x27;15&#x27;,&#x27;&#x27;,&#x27;2019-03-13 06:03:33&#x27;,&#x27;2019-03-13 06:04:22&#x27;),(&#x27;18&#x27;,&#x27;&lt;p&gt;本套Java视频完全针对零基础学员，课堂实录，自发布以来，好评如潮！Java视频中注重与学生互动，讲授幽默诙谐、细致入微，覆盖Java基础所有核心知识点，同类Java视频中也是代码量大、案例多、实战性强的。同时，本Java视频教程注重技术原理剖析，深入JDK源码，辅以代码实战贯穿始终，用实践驱动理论，并辅以必要的代码练习。&lt;/p&gt;\n&lt;p&gt;------------------------------------&lt;/p&gt;\n&lt;p&gt;视频特点：&lt;/p&gt;\n&lt;p&gt;通过学习本Java视频教程，大家能够真正将Java基础知识学以致用、活学活用，构架Java编程思想，牢牢掌握\&quot;源码级\&quot;的Javase核心技术，并为后续JavaWeb等技术的学习奠定扎实基础。&lt;br /&gt;&lt;br /&gt;1.通俗易懂，细致入微：每个知识点高屋建瓴，深入浅出，简洁明了的说明问题&lt;br /&gt;2.具实战性：全程真正代码实战，涵盖上百个企业应用案例及练习&lt;br /&gt;3.深入：源码分析，更有 Java 反射、动态代理的实际应用等&lt;br /&gt;4.登录尚硅谷官网，技术讲师免费在线答疑&lt;/p&gt;&#x27;,&#x27;2019-03-06 18:06:36&#x27;,&#x27;2019-10-30 19:58:36&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_subject&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_subject` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;课程类别ID&#x27;,</span><br><span class="line">  `title` varchar(10) NOT NULL COMMENT &#x27;类别名称&#x27;,</span><br><span class="line">  `parent_id` char(19) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;父ID&#x27;,</span><br><span class="line">  `sort` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;排序字段&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_parent_id` (`parent_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT=&#x27;课程科目&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_subject&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_subject` VALUES (&#x27;1178214681118568449&#x27;,&#x27;后端开发&#x27;,&#x27;0&#x27;,1,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681139539969&#x27;,&#x27;Java&#x27;,&#x27;1178214681118568449&#x27;,1,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681181483010&#x27;,&#x27;前端开发&#x27;,&#x27;0&#x27;,3,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681210843137&#x27;,&#x27;JavaScript&#x27;,&#x27;1178214681181483010&#x27;,4,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681231814658&#x27;,&#x27;云计算&#x27;,&#x27;0&#x27;,5,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681252786178&#x27;,&#x27;Docker&#x27;,&#x27;1178214681231814658&#x27;,5,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681294729217&#x27;,&#x27;Linux&#x27;,&#x27;1178214681231814658&#x27;,6,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681324089345&#x27;,&#x27;系统/运维&#x27;,&#x27;0&#x27;,7,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681353449473&#x27;,&#x27;Linux&#x27;,&#x27;1178214681324089345&#x27;,7,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681382809602&#x27;,&#x27;Windows&#x27;,&#x27;1178214681324089345&#x27;,8,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681399586817&#x27;,&#x27;数据库&#x27;,&#x27;0&#x27;,9,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681428946945&#x27;,&#x27;MySQL&#x27;,&#x27;1178214681399586817&#x27;,9,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681454112770&#x27;,&#x27;MongoDB&#x27;,&#x27;1178214681399586817&#x27;,10,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681483472898&#x27;,&#x27;大数据&#x27;,&#x27;0&#x27;,11,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681504444418&#x27;,&#x27;Hadoop&#x27;,&#x27;1178214681483472898&#x27;,11,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681529610242&#x27;,&#x27;Spark&#x27;,&#x27;1178214681483472898&#x27;,12,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681554776066&#x27;,&#x27;人工智能&#x27;,&#x27;0&#x27;,13,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681584136193&#x27;,&#x27;Python&#x27;,&#x27;1178214681554776066&#x27;,13,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681613496321&#x27;,&#x27;编程语言&#x27;,&#x27;0&#x27;,14,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178214681626079234&#x27;,&#x27;Java&#x27;,&#x27;1178214681613496321&#x27;,14,&#x27;2019-09-29 15:47:25&#x27;,&#x27;2019-09-29 15:47:25&#x27;),(&#x27;1178585108407984130&#x27;,&#x27;Python&#x27;,&#x27;1178214681118568449&#x27;,2,&#x27;2019-09-30 16:19:22&#x27;,&#x27;2019-09-30 16:19:22&#x27;),(&#x27;1178585108454121473&#x27;,&#x27;HTML/CSS&#x27;,&#x27;1178214681181483010&#x27;,3,&#x27;2019-09-30 16:19:22&#x27;,&#x27;2019-09-30 16:19:22&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_teacher&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_teacher` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;讲师ID&#x27;,</span><br><span class="line">  `name` varchar(20) NOT NULL COMMENT &#x27;讲师姓名&#x27;,</span><br><span class="line">  `intro` varchar(500) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;讲师简介&#x27;,</span><br><span class="line">  `career` varchar(500) DEFAULT NULL COMMENT &#x27;讲师资历,一句话说明讲师&#x27;,</span><br><span class="line">  `level` int(10) unsigned NOT NULL COMMENT &#x27;头衔 1高级讲师 2首席讲师&#x27;,</span><br><span class="line">  `avatar` varchar(255) DEFAULT NULL COMMENT &#x27;讲师头像&#x27;,</span><br><span class="line">  `sort` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;排序&#x27;,</span><br><span class="line">  `is_deleted` tinyint(1) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;逻辑删除 1（true）已删除， 0（false）未删除&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_name` (`name`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;讲师&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_teacher&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_teacher` VALUES (&#x27;1&#x27;,&#x27;张三&#x27;,&#x27;近年主持国家自然科学基金（6项）、江苏省重大科技成果转化项目（5项）、江苏省产学研前瞻性联合研究项目（3项）、省工业科技支撑、省高技术、省自然科学基金等省部级及其企业的主要科研项目40多个，多个项目在企业成功转化，产生了较好的经济、社会和环境效益。积极开展产学研科技合作，并与省内16家企业建立了江苏省研究生工作站，其中6家为江苏省优秀研究生工作站&#x27;,&#x27;高级&#x27;,1,&#x27;https://guli-file-190513.oss-cn-beijing.aliyuncs.com/avatar/default.jpg&#x27;,0,0,&#x27;2019-10-30 14:18:46&#x27;,&#x27;2019-11-12 13:36:36&#x27;),(&#x27;1189389726308478977&#x27;,&#x27;晴天&#x27;,&#x27;高级讲师简介&#x27;,&#x27;高级讲师资历&#x27;,2,&#x27;https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/10/30/de47ee9b-7fec-43c5-8173-13c5f7f689b2.png&#x27;,1,0,&#x27;2019-10-30 11:53:03&#x27;,&#x27;2019-10-30 11:53:03&#x27;),(&#x27;1189390295668469762&#x27;,&#x27;李刚&#x27;,&#x27;高级讲师简介&#x27;,&#x27;高级讲师&#x27;,2,&#x27;https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/10/30/b8aa36a2-db50-4eca-a6e3-cc6e608355e0.png&#x27;,2,0,&#x27;2019-10-30 11:55:19&#x27;,&#x27;2019-11-12 13:37:52&#x27;),(&#x27;1189426437876985857&#x27;,&#x27;王二&#x27;,&#x27;高级讲师简介&#x27;,&#x27;高级讲师&#x27;,1,&#x27;https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/11/08/e44a2e92-2421-4ea3-bb49-46f2ec96ef88.png&#x27;,0,0,&#x27;2019-10-30 14:18:56&#x27;,&#x27;2019-11-12 13:37:35&#x27;),(&#x27;1189426464967995393&#x27;,&#x27;王五&#x27;,&#x27;高级讲师简介&#x27;,&#x27;高级讲师&#x27;,1,&#x27;https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/10/30/65423f14-49a9-4092-baf5-6d0ef9686a85.png&#x27;,0,0,&#x27;2019-10-30 14:19:02&#x27;,&#x27;2019-11-12 13:37:18&#x27;),(&#x27;1192249914833055746&#x27;,&#x27;李四&#x27;,&#x27;高级讲师简介&#x27;,&#x27;高级讲师&#x27;,1,&#x27;https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/11/07/91871e25-fd83-4af6-845f-ea8d471d825d.png&#x27;,0,0,&#x27;2019-11-07 09:18:25&#x27;,&#x27;2019-11-12 13:37:01&#x27;),(&#x27;1192327476087115778&#x27;,&#x27;1222-12-12&#x27;,&#x27;1111&#x27;,&#x27;11&#x27;,1,&#x27;https://online-teach-file.oss-cn-beijing.aliyuncs.com/teacher/2019/11/08/5805c6cd-c8ad-4a77-aafd-d2e083bfd8a4.png&#x27;,0,1,&#x27;2019-11-07 14:26:37&#x27;,&#x27;2019-11-11 16:26:26&#x27;),(&#x27;1195337453429129218&#x27;,&#x27;test&#x27;,&#x27;sdfsdf&#x27;,&#x27;sdfdf&#x27;,1,&#x27;https://guli-file-190513.oss-cn-beijing.aliyuncs.com/avatar/default.jpg&#x27;,0,1,&#x27;2019-11-15 21:47:12&#x27;,&#x27;2019-11-15 21:47:27&#x27;);</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;edu_video&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">CREATE TABLE `edu_video` (</span><br><span class="line">  `id` char(19) NOT NULL COMMENT &#x27;视频ID&#x27;,</span><br><span class="line">  `course_id` char(19) NOT NULL COMMENT &#x27;课程ID&#x27;,</span><br><span class="line">  `chapter_id` char(19) NOT NULL COMMENT &#x27;章节ID&#x27;,</span><br><span class="line">  `title` varchar(50) NOT NULL COMMENT &#x27;节点名称&#x27;,</span><br><span class="line">  `video_source_id` varchar(100) DEFAULT NULL COMMENT &#x27;云端视频资源&#x27;,</span><br><span class="line">  `video_original_name` varchar(100) DEFAULT NULL COMMENT &#x27;原始文件名称&#x27;,</span><br><span class="line">  `sort` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;排序字段&#x27;,</span><br><span class="line">  `play_count` bigint(20) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;播放次数&#x27;,</span><br><span class="line">  `is_free` tinyint(1) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;是否可以试听：0收费 1免费&#x27;,</span><br><span class="line">  `duration` float NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;视频时长（秒）&#x27;,</span><br><span class="line">  `status` varchar(20) NOT NULL DEFAULT &#x27;Empty&#x27; COMMENT &#x27;Empty未上传 Transcoding转码中  Normal正常&#x27;,</span><br><span class="line">  `size` bigint(20) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;视频源文件大小（字节）&#x27;,</span><br><span class="line">  `version` bigint(20) unsigned NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;乐观锁&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_course_id` (`course_id`),</span><br><span class="line">  KEY `idx_chapter_id` (`chapter_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT=&#x27;课程视频&#x27;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;edu_video&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `edu_video` VALUES (&#x27;1182499307429339137&#x27;,&#x27;18&#x27;,&#x27;32&#x27;,&#x27;第一节&#x27;,&#x27;&#x27;,&#x27;&#x27;,0,0,0,0,&#x27;&#x27;,0,1,&#x27;2019-10-11 11:32:59&#x27;,&#x27;2019-10-11 11:57:38&#x27;),(&#x27;1185312444399071234&#x27;,&#x27;14&#x27;,&#x27;1&#x27;,&#x27;12&#x27;,&#x27;&#x27;,&#x27;&#x27;,0,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-10-19 05:51:23&#x27;,&#x27;2019-10-19 05:51:33&#x27;),(&#x27;1189434737808990210&#x27;,&#x27;18&#x27;,&#x27;44&#x27;,&#x27;测试&#x27;,&#x27;&#x27;,&#x27;&#x27;,1,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-10-30 14:51:55&#x27;,&#x27;2019-10-30 14:51:55&#x27;),(&#x27;1189471423678939138&#x27;,&#x27;18&#x27;,&#x27;1181729226915577857&#x27;,&#x27;test&#x27;,&#x27;2b887dc9584d4dc68908780ec57cd3b9&#x27;,&#x27;视频&#x27;,1,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-10-30 17:17:41&#x27;,&#x27;2019-10-30 17:17:41&#x27;),(&#x27;1189476403626409986&#x27;,&#x27;18&#x27;,&#x27;1181729226915577857&#x27;,&#x27;22&#x27;,&#x27;5155c73dc112475cbbddccf4723f7cef&#x27;,&#x27;视频.mp4&#x27;,0,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-10-30 17:37:29&#x27;,&#x27;2019-10-30 17:37:29&#x27;),(&#x27;1192252824606289921&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1192252428399751169&#x27;,&#x27;第一课时&#x27;,&#x27;756cf06db9cb4f30be85a9758b19c645&#x27;,&#x27;eae2b847ef8503b81f5d5593d769dde2.mp4&#x27;,0,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-11-07 09:29:59&#x27;,&#x27;2019-11-07 09:29:59&#x27;),(&#x27;1192628092797730818&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1192252428399751169&#x27;,&#x27;第二课时&#x27;,&#x27;2a02d726622f4c7089d44cb993c531e1&#x27;,&#x27;eae2b847ef8503b81f5d5593d769dde2.mp4&#x27;,0,0,1,0,&#x27;Empty&#x27;,0,1,&#x27;2019-11-08 10:21:10&#x27;,&#x27;2019-11-08 10:21:22&#x27;),(&#x27;1192632495013380097&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1192252428399751169&#x27;,&#x27;第三课时&#x27;,&#x27;4e560c892fdf4fa2b42e0671aa42fa9d&#x27;,&#x27;eae2b847ef8503b81f5d5593d769dde2.mp4&#x27;,0,0,1,0,&#x27;Empty&#x27;,0,1,&#x27;2019-11-08 10:38:40&#x27;,&#x27;2019-11-08 10:38:40&#x27;),(&#x27;1194117638832111617&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1192252428399751169&#x27;,&#x27;第四课时&#x27;,&#x27;4e560c892fdf4fa2b42e0671aa42fa9d&#x27;,&#x27;eae2b847ef8503b81f5d5593d769dde2.mp4&#x27;,0,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-11-12 13:00:05&#x27;,&#x27;2019-11-12 13:00:05&#x27;),(&#x27;1196263770832023554&#x27;,&#x27;1192252213659774977&#x27;,&#x27;1192252428399751169&#x27;,&#x27;第五课时&#x27;,&#x27;27d21158b0834cb5a8d50710937de330&#x27;,&#x27;eae2b847ef8503b81f5d5593d769dde2.mp4&#x27;,5,0,0,0,&#x27;Empty&#x27;,0,1,&#x27;2019-11-18 11:08:03&#x27;,&#x27;2019-11-18 11:08:03&#x27;),(&#x27;17&#x27;,&#x27;18&#x27;,&#x27;15&#x27;,&#x27;第一节：Java简介&#x27;,&#x27;196116a6fee742e1ba9f6c18f65bd8c1&#x27;,&#x27;1&#x27;,1,1000,1,100,&#x27;Draft&#x27;,0,1,&#x27;2019-01-01 13:08:57&#x27;,&#x27;2019-10-11 11:26:39&#x27;),(&#x27;18&#x27;,&#x27;18&#x27;,&#x27;15&#x27;,&#x27;第二节：表达式和赋值语句&#x27;,&#x27;2d99b08ca0214909899910c9ba042d47&#x27;,&#x27;7 - How Do I Find Time for My &#x27;,2,999,1,100,&#x27;Draft&#x27;,0,1,&#x27;2019-01-01 13:09:02&#x27;,&#x27;2019-03-08 03:30:27&#x27;),(&#x27;19&#x27;,&#x27;18&#x27;,&#x27;15&#x27;,&#x27;第三节：String类&#x27;,&#x27;51120d59ddfd424cb5ab08b44fc8b23a&#x27;,&#x27;eae2b847ef8503b81f5d5593d769dde2.mp4&#x27;,3,888,0,100,&#x27;Draft&#x27;,0,1,&#x27;2019-01-01 13:09:05&#x27;,&#x27;2019-11-12 12:50:45&#x27;),(&#x27;20&#x27;,&#x27;18&#x27;,&#x27;15&#x27;,&#x27;第四节：程序风格&#x27;,&#x27;2a38988892d84df598752226c50f3fa3&#x27;,&#x27;00-day10总结.avi&#x27;,4,666,0,100,&#x27;Draft&#x27;,0,1,&#x27;2019-01-01 13:09:05&#x27;,&#x27;2019-10-11 09:20:09&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>表目录结构：<img src="D:\photo\谷粒数据库表图.png"></p></li></ul><p>ps：数据库设计遵循规约 ，详情可以查看<a href="https://www.cnblogs.com/yujiwei/p/6886260.html">《阿里巴巴Java开发手册》</a>。</p><h3 id="1-2项目架构"><a href="#1-2项目架构" class="headerlink" title="1.2项目架构"></a>1.2项目架构</h3><p><img src="D:\photo\项目架构.png" alt="项目架构"></p><h3 id="1-3前后端分离概念"><a href="#1-3前后端分离概念" class="headerlink" title="1.3前后端分离概念"></a>1.3前后端分离概念</h3><p><img src="D:\photo\前后端分离概念图.png" alt="前后端分离概念图"></p><h3 id="1-4创建父工程"><a href="#1-4创建父工程" class="headerlink" title="1.4创建父工程"></a>1.4创建父工程</h3><h5 id="1-创建springboot工程guli-parent"><a href="#1-创建springboot工程guli-parent" class="headerlink" title="1.创建springboot工程guli-parent"></a>1.创建springboot工程guli-parent</h5><p>版本使用：<code>2.2.1.RELEASE</code> </p><p>创建期间不勾选任何工具，并且若无以上版本，可以先使用其他版本，最后修改pom文件进行依赖导入。</p><h5 id="2-删除src目录"><a href="#2-删除src目录" class="headerlink" title="2.删除src目录"></a>2.删除src目录</h5><p>父工程主要是进行依赖管理和版本控制，所以并不需要src目录，故删除。</p><h5 id="3-配置-pom-xml-♥"><a href="#3-配置-pom-xml-♥" class="headerlink" title="3.配置 pom.xml ♥"></a>3.配置 pom.xml ♥</h5><p>加标注为需要谨慎的地方，这个地方会报很多红，但是影响不大。</p><p>指定打包方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;artifactId&gt;guli-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>添加依赖：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;guli_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.atguigu&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;service&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="line">        &lt;!--hystrix依赖，主要是用 <span class="meta">@HystrixCommand</span> --&gt;</span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="line">        &lt;!--服务注册--&gt;</span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="line">        &lt;!--服务调用--&gt;</span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--mybatis-plus--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--mysql--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--swagger--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--xls--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--httpclient--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--commons-io--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--gson--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">4.12</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><em><strong>注意：中间部分保持注解的状态，防止其影响项目启动。另外是，首次导入依赖会报红，原因是需要在子工程中逐步导入，此处也可将老师的 <code> repository</code> 导入到自己本地 maven仓库。</strong></em></p><h5 id="4-搭建service-edu模块"><a href="#4-搭建service-edu模块" class="headerlink" title="4.搭建service-edu模块"></a>4.搭建service-edu模块</h5><p>1.在resources目录下修改配置文件。</p><p><em><strong>注意：下面两个配置都是基于 MySQL为 8.0以上版本。</strong></em></p><p>properites:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line"></span><br><span class="line">server.port=<span class="number">8001</span></span><br><span class="line"></span><br><span class="line"># 服务名</span><br><span class="line"></span><br><span class="line">spring.application.name=service-edu</span><br><span class="line"></span><br><span class="line"># 环境设置：dev、test、prod</span><br><span class="line"></span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line"># mysql数据库连接</span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/guli?serverTimezone=GMT%2B8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line"></span><br><span class="line"># mybatis日志</span><br><span class="line"></span><br><span class="line">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>YML:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line"> # 服务名</span><br><span class="line">  application:</span><br><span class="line">    name: service-edu</span><br><span class="line"></span><br><span class="line"># 环境设置：dev、test、prod</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line"></span><br><span class="line"># mysql数据库连接</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//192.168.88.130:3306/guli?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line"></span><br><span class="line"># 统一返回的json时间格式</span><br><span class="line"></span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+<span class="number">8</span></span><br><span class="line"></span><br><span class="line"># mybatis日志</span><br><span class="line"></span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line"></span><br><span class="line"># 服务端口</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8001</span></span><br></pre></td></tr></table></figure><p>2.创建MP代码生成器</p><p>在test&#x2F;java下创建 <code>com.atguigu.demo</code>  的包，接着创建 <code>CodeGenerator.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;D:\\work\\guli_parent\\service\\service_edu&quot;</span> + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;testjava&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//UserServie</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);    <span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line"></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER_STR); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;eduservice&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line">        <span class="comment">//包  com.atguigu.eduservice</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com.atguigu&quot;</span>);</span><br><span class="line">        <span class="comment">//包  com.atguigu.eduservice.controller</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line"></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;edu_teacher&quot;</span>);</span><br><span class="line"></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>); </span><br><span class="line">        <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); </span><br><span class="line">        <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); </span><br><span class="line">        <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>tips：使用本代码生成器时需要注意全局配置路径是否为项目路径，其次在数据源配置时与自己设备的配置保持一致（查看 username和 password），不然会报  <code>Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code>  。</strong></em></p><p><img src="D:\photo\代码生成器运行失败.png"></p><h3 id="1-5后台管理系统-讲师管理接口"><a href="#1-5后台管理系统-讲师管理接口" class="headerlink" title="1.5后台管理系统-讲师管理接口"></a>1.5后台管理系统-讲师管理接口</h3><h4 id="1、测试查询所有讲师功能"><a href="#1、测试查询所有讲师功能" class="headerlink" title="1、测试查询所有讲师功能"></a>1、测试查询所有讲师功能</h4><h5 id="1）创建MP配置类"><a href="#1）创建MP配置类" class="headerlink" title="1）创建MP配置类"></a>1）创建MP配置类</h5><p>在edu模块下，创建config包，包下创建<code>EduConfig.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.eduservice.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）编写controller进行测试"><a href="#2）编写controller进行测试" class="headerlink" title="2）编写controller进行测试"></a>2）编写controller进行测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduservice/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduTeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService eduTeacherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询讲师表所有数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;EduTeacher&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eduTeacherService.list(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>tips：代码生成器的名字为edu-teacher，视频中为teacher，为保证与视频一致不报错不失误，建议修改。另外补充知识  <code>@RestController</code> &#x3D; <code>@Controller</code> + <code>@ResponseBody</code> ，当开发一个和页面交互数据的控制时，比如 bbs-web（电子布告栏系统）的api接口需要此注解</strong></em> </p><h5 id="3）主启动类"><a href="#3）主启动类" class="headerlink" title="3）主启动类"></a>3）主启动类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class EduApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EduApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4）启动项目★-°-☆-￣▽￣-x2F-°★"><a href="#4）启动项目★-°-☆-￣▽￣-x2F-°★" class="headerlink" title="4）启动项目★,°:.☆(￣▽￣)&#x2F;$:.°★"></a>4）启动项目<em>★,°</em>:.☆(￣▽￣)&#x2F;$:<em>.°★</em></h5><p>访问：<code>http://localhost:8001/eduservice/teacher/findAll</code></p><p><img src="D:\photo\返回数据.png"></p><h4 id="2、测试逻辑删除功能"><a href="#2、测试逻辑删除功能" class="headerlink" title="2、测试逻辑删除功能"></a>2、测试逻辑删除功能</h4><h5 id="1）在实体类上加注解-TableLogic"><a href="#1）在实体类上加注解-TableLogic" class="headerlink" title="1）在实体类上加注解@TableLogic"></a>1）在实体类上加注解<code>@TableLogic</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Boolean isDeleted;</span><br></pre></td></tr></table></figure><h5 id="2）在EduConfig中加入逻辑删除的插件"><a href="#2）在EduConfig中加入逻辑删除的插件" class="headerlink" title="2）在EduConfig中加入逻辑删除的插件"></a>2）在EduConfig中加入逻辑删除的插件</h5><p>（MBP3.1.1以上版本无需配置，本项目采用版本为3.0.5） </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ISqlInjector <span class="title function_">sqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogicSqlInjector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）编写EduTeacherController"><a href="#3）编写EduTeacherController" class="headerlink" title="3）编写EduTeacherController"></a>3）编写EduTeacherController</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/deleteTeacherById/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteTeacherById</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> eduTeacherService.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4）访问地址测试代码"><a href="#4）访问地址测试代码" class="headerlink" title="4）访问地址测试代码"></a>4）访问地址测试代码</h5><p><code>http://localhost:8001/eduservice/teacher/deleteTeacherById/1</code></p><p>:bride_with_veil:<em><strong>虽然页面内容显示 <code> Whitelabel Error Page</code>，但是执行成功需要查看数据库 <code>is_deleted</code>字段是否从0变成1。</strong></em> </p><p><img src="D:\photo\逻辑删除.png"></p><h4 id="3、整合Swagger技术"><a href="#3、整合Swagger技术" class="headerlink" title="3、整合Swagger技术"></a>3、整合Swagger技术</h4><h5 id="1）创建公共模块-common-，并且删除src目录"><a href="#1）创建公共模块-common-，并且删除src目录" class="headerlink" title="1）创建公共模块 common ，并且删除src目录"></a>1）创建公共模块 <code>common</code> ，并且删除src目录</h5><h5 id="2）导入需要的坐标依赖"><a href="#2）导入需要的坐标依赖" class="headerlink" title="2）导入需要的坐标依赖"></a>2）导入需要的坐标依赖</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mybatis-plus--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--swagger--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- redis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- spring2.X集成redis所需common-pool2</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;--&gt;</span><br></pre></td></tr></table></figure><h5 id="3）创建Maven工程子模块-service-base"><a href="#3）创建Maven工程子模块-service-base" class="headerlink" title="3）创建Maven工程子模块  service-base"></a>3）创建Maven工程子模块  <code>service-base</code></h5><h5 id="4）创建包com-atguigu-servicebase-创建配置类-SwaggerConfig-java"><a href="#4）创建包com-atguigu-servicebase-创建配置类-SwaggerConfig-java" class="headerlink" title="4）创建包com.atguigu.servicebase,创建配置类 SwaggerConfig.java"></a>4）创建包<code>com.atguigu.servicebase</code>,创建配置类 <code>SwaggerConfig.java</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//swagger注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">webApiConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/admin/.*&quot;</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">webApiInfo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;http://atguigu.com&quot;</span>, <span class="string">&quot;1123@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4）在service模块中引入common模板"><a href="#4）在service模块中引入common模板" class="headerlink" title="4）在service模块中引入common模板"></a>4）在service模块中引入common模板</h5><p>因为要在service模块中测试，而common模块主要存放一些依赖，想要启用模板内工具，需要将模块导入到service模块中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.atguigu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service_base&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="5）在启动类上加入扫描注解类"><a href="#5）在启动类上加入扫描注解类" class="headerlink" title="5）在启动类上加入扫描注解类"></a>5）在启动类上加入扫描注解类</h5><p>表示只要是这个包下的类都默认启动加载，保持包名与配置包名一致。主要因为不在同一个模块下@Configuration也没有用╮(╯▽╰)╭。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="6）重新启动程序后，访问固定地址"><a href="#6）重新启动程序后，访问固定地址" class="headerlink" title="6）重新启动程序后，访问固定地址"></a>6）重新启动程序后，访问固定地址</h5><p><code>http://localhost:8001/swagger-ui.html</code> </p><p><img src="D:\photo\swagger.png"></p><p>:bride_with_veil:<strong>在今后的学习中，swagger将起到重要作用，感兴趣的可以了解一下加强版的swagger——<a href="https://doc.xiaominfo.com/docs/quick-start">knife4j</a>。</strong></p><h5 id="7）配置SwaggerApi文档接口"><a href="#7）配置SwaggerApi文档接口" class="headerlink" title="7）配置SwaggerApi文档接口"></a>7）配置SwaggerApi文档接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;讲师管理模块&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduservice/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduTeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService eduTeacherService;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     查询所有讲师</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@ApiOperation(&quot;查询所有讲师&quot;)</span></span><br><span class="line">      <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> List&lt;EduTeacher&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> eduTeacherService.list(<span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     逻辑删除讲师</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@ApiOperation(&quot;逻辑删除讲师&quot;)</span></span><br><span class="line">      <span class="meta">@DeleteMapping(&quot;/deleteTeacherById/&#123;id&#125;&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteTeacherById</span><span class="params">(<span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span>  <span class="meta">@PathVariable</span> String id)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> eduTeacherService.removeById(id);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>由于技术革新太快，视频的 Api注解已经不能再用，可替换成 tags，功能不变。</strong></em></p><h4 id="4、统一返回结果类-♥"><a href="#4、统一返回结果类-♥" class="headerlink" title="4、统一返回结果类 ♥"></a>4、统一返回结果类 ♥</h4><h5 id="1）在common模块下创建模块-common-utils，创建-R-java-和-ResultCode-java"><a href="#1）在common模块下创建模块-common-utils，创建-R-java-和-ResultCode-java" class="headerlink" title="1）在common模块下创建模块 common_utils，创建 R.java 和 ResultCode.java"></a>1）在<code>common</code>模块下创建模块 <code>common_utils</code>，创建 <code>R.java</code> 和 <code>ResultCode.java</code></h5><p>R.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一返回结果的类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把构造方法私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">R</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        r.setCode(ResultCode.SUCCESS);</span><br><span class="line">        r.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        r.setCode(ResultCode.ERROR);</span><br><span class="line">        r.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">success</span><span class="params">(Boolean success)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">message</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">code</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResultCode.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">SUCCESS</span> <span class="operator">=</span> <span class="number">20000</span>; <span class="comment">//成功</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">20001</span>; <span class="comment">//失败</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tips：代码采用链式编程，Lombok支持链式编程，加注解@Accessors（chain&#x3D;true）即可。【博主还没有测试是否能成功，成功后修改博客内容。】 </p><h5 id="2）在service中引入-common-utils"><a href="#2）在service中引入-common-utils" class="headerlink" title="2）在service中引入 common_utils"></a>2）在<code>service</code>中引入 <code>common_utils</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.atguigu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;common_utils&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><em><strong>用 maven把 utils install一下，安装到 maven仓库中</strong></em></p><h5 id="3）对controller内的代码进行修改"><a href="#3）对controller内的代码进行修改" class="headerlink" title="3）对controller内的代码进行修改"></a>3）对controller内的代码进行修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;讲师管理模块&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduservice/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduTeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService eduTeacherService;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     查询所有讲师</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      <span class="meta">@ApiOperation(&quot;查询所有讲师&quot;)</span></span><br><span class="line">      <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">      List&lt;EduTeacher&gt; list = eduTeacherService.list(<span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>, list);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     逻辑删除讲师</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      <span class="meta">@ApiOperation(&quot;逻辑删除讲师&quot;)</span></span><br><span class="line">      <span class="meta">@DeleteMapping(&quot;/deleteTeacherById/&#123;id&#125;&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> R <span class="title function_">deleteTeacherById</span><span class="params">(<span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span> <span class="meta">@PathVariable</span> String id)</span> &#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> eduTeacherService.removeById(id);</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">              <span class="keyword">return</span> R.ok();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> R.error();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>可用三目运算符对代码进行优化  <code>return teacherService.removeById(id) ? R.ok() : R.error();</code>另外是对 R进行导包的，注意导自己的包  <code>import com.atguigu.commonutils.R;</code>，不要导 baomidou的。</strong></em></p><h4 id="5、分页带条件查询功能实现-♥"><a href="#5、分页带条件查询功能实现-♥" class="headerlink" title="5、分页带条件查询功能实现 ♥"></a>5、分页带条件查询功能实现 ♥</h4><h5 id="1）首先在MP配置类中加入分页插件"><a href="#1）首先在MP配置类中加入分页插件" class="headerlink" title="1）首先在MP配置类中加入分页插件"></a>1）首先在MP配置类中加入分页插件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）在controller内编写简易分页的方法"><a href="#2）在controller内编写简易分页的方法" class="headerlink" title="2）在controller内编写简易分页的方法"></a>2）在controller内编写简易分页的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//current 当前页</span></span><br><span class="line">   <span class="comment">//limit 每页记录数</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;pageTeacher/&#123;current&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R <span class="title function_">pageListTeacher</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">long</span> current,</span></span><br><span class="line"><span class="params">                            <span class="meta">@PathVariable</span> <span class="type">long</span> limit)</span> &#123;</span><br><span class="line">       <span class="comment">//创建page对象</span></span><br><span class="line">       Page&lt;EduTeacher&gt; pageTeacher = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current,limit);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//调用方法实现分页</span></span><br><span class="line">       <span class="comment">//调用方法时候，底层封装，把分页所有数据封装到pageTeacher对象里面</span></span><br><span class="line">       teacherService.page(pageTeacher,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageTeacher.getTotal();<span class="comment">//总记录数</span></span><br><span class="line">       List&lt;EduTeacher&gt; records = pageTeacher.getRecords(); <span class="comment">//数据list集合</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// Map map = new HashMap();</span></span><br><span class="line">       <span class="comment">// map.put(&quot;total&quot;,total);</span></span><br><span class="line">       <span class="comment">// map.put(&quot;rows&quot;,records);</span></span><br><span class="line">       <span class="comment">// return R.ok().data(map);</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.ok().data(<span class="string">&quot;total&quot;</span>,total).data(<span class="string">&quot;rows&quot;</span>,records);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>3）创建VO对象 <code>TeacherQuery</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherQuery</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;教师名称,模糊查询&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;头衔 1高级讲师 2首席讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;查询开始时间&quot;, example = &quot;2019-01-01 10:10:10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String begin;</span><br><span class="line">    <span class="comment">//注意，这里使用的是String类型，前端传过来的数据无需进行类型转换</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;查询结束时间&quot;, example = &quot;2019-12-01 10:10:10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>使用 ValueObject来封装业务数据，并且有一个单独的方法可以用来获取或者发送这个 VO，当客户端请求一些业务数据的时候，服务端就可以产生出一个 VO，并且将它赋值。最后，可以用传值的方法传递给客户端。</strong></em></p><p> <code>@Data</code> &#x3D;<code>@Setter</code> + <code>@Getter</code> +<code>@RequiredArgsConstructor</code> + <code>@ToString</code> + <code>@EqualsAndHashCode</code> </p><h5 id="4）在controller里编写带条件查询的分页方法"><a href="#4）在controller里编写带条件查询的分页方法" class="headerlink" title="4）在controller里编写带条件查询的分页方法"></a>4）在controller里编写带条件查询的分页方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;pageTeacherCondition/&#123;current&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">pageTeacherCondition</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">long</span> current,<span class="meta">@PathVariable</span> <span class="type">long</span> limit,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestBody(required = false)</span>  TeacherQuery teacherQuery)</span> &#123;</span><br><span class="line">    <span class="comment">//创建page对象</span></span><br><span class="line">    Page&lt;EduTeacher&gt; pageTeacher = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current,limit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建条件</span></span><br><span class="line">    QueryWrapper&lt;EduTeacher&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 多条件组合查询</span></span><br><span class="line">    <span class="comment">// mybatis学过 动态sql</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> teacherQuery.getName();<span class="comment">//讲师名称</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">level</span> <span class="operator">=</span> teacherQuery.getLevel();<span class="comment">//讲师等级</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">begin</span> <span class="operator">=</span> teacherQuery.getBegin();<span class="comment">//开始时间</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> teacherQuery.getEnd();<span class="comment">//结束时间</span></span><br><span class="line">    <span class="comment">//判断条件值是否为空，如果不为空拼接条件</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(name)) &#123;</span><br><span class="line">        <span class="comment">//构建条件</span></span><br><span class="line">        wrapper.like(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(level)) &#123;</span><br><span class="line">        wrapper.eq(<span class="string">&quot;level&quot;</span>,level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(begin)) &#123;</span><br><span class="line">        wrapper.ge(<span class="string">&quot;gmt_create&quot;</span>,begin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(end)) &#123;</span><br><span class="line">        wrapper.le(<span class="string">&quot;gmt_create&quot;</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法实现条件查询分页</span></span><br><span class="line">    teacherService.page(pageTeacher,wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageTeacher.getTotal();<span class="comment">//总记录数</span></span><br><span class="line">    List&lt;EduTeacher&gt; records = pageTeacher.getRecords(); <span class="comment">//数据list集合</span></span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;total&quot;</span>,total).data(<span class="string">&quot;rows&quot;</span>,records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:black_heart:看弹幕说可以使用MP中带condition参数的重载方法构建，自己尝试修改失败，有大神看见了麻烦知道怎么改，麻烦联系我一下。</p><p>@RequestBody使用 json传递数据，把json数据封装到对象里面。（必须使用post提交方式。）</p><p>@ResponseBody支持将返回值放在response体内，而不是返回一个页面。 </p><h4 id="6、新增和修改讲师功能实现"><a href="#6、新增和修改讲师功能实现" class="headerlink" title="6、新增和修改讲师功能实现"></a>6、新增和修改讲师功能实现</h4><p>1）在<code>service_base  </code> 模块下创建<code>handler</code>包，包下创建<code>MetaObjectHandler.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="comment">//属性名称，不是字段名称</span></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;gmtCreate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:v: column就是数据库里的字段名称，field就是实体类的属性名称</p><p>2）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtModified;</span><br></pre></td></tr></table></figure><h4 id="6、跨域问题-♥"><a href="#6、跨域问题-♥" class="headerlink" title="6、跨域问题 ♥"></a>6、跨域问题 ♥</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC</title>
      <link href="/2022/07/28/Spring%20IOC/"/>
      <url>/2022/07/28/Spring%20IOC/</url>
      
        <content type="html"><![CDATA[<p>##Spring IOC</p><h3 id="1-SpringIOC的理解、原理与实现"><a href="#1-SpringIOC的理解、原理与实现" class="headerlink" title="1.SpringIOC的理解、原理与实现"></a>1.SpringIOC的理解、原理与实现</h3><ul><li>ioc容器的创建过程（beanFactory、DefaultListableBeanFactory），向bean工厂中设置参数（BeanPostProceedsor、Aware接口的子类）</li><li>加载解析bean对象，准备要创建的bean对象的定义对象beanDefinition（xml或者注解的解析过程）</li><li>beanFactoryPostProcessor的处理，此处是拓展点，PlaceHolderConfigurSupport,ConfigurationClassPostProcessor</li><li>BeanPostProcessor的注册功能，方便后续对bean对象完成具体的扩展功能</li><li>通过反射的方式将BeanDefinition对象实例化成具体的bean对象</li><li>bean对象的初始化工程（填充属性、调用aware子类的方法、调用BeanPostProcessor前置处理方法、调用init-method方法、调用BeanPostProcessor的后置处理方法）</li><li>生成完整的bean对象，通过getBean方法可以直接获取</li><li>销毁过程。接口DisposableBean方法destroy。</li></ul><h4 id="1-1-IOC是将对象交给容器管理，原来对象由使用者控制，现有spring控制"><a href="#1-1-IOC是将对象交给容器管理，原来对象由使用者控制，现有spring控制" class="headerlink" title="1.1 IOC是将对象交给容器管理，原来对象由使用者控制，现有spring控制"></a>1.1 IOC是将对象交给容器管理，原来对象由使用者控制，现有spring控制</h4><h5 id="简要思路："><a href="#简要思路：" class="headerlink" title="简要思路："></a>简要思路：</h5><p>管理什么？-》<strong>Service + Dao</strong></p><p>如何将被管理的对象告知IOC容器-》<strong>配置</strong></p><p>被管理的对象交给IOC容器，如何获取到IOC容器？-》<strong>接口</strong></p><p>IOC容器得到后，如何从容器中获取bean？-》<strong>接口方法</strong></p><p>使用Spring导入哪些坐标？-》<strong>pom.xml</strong></p><h5 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h5><ol><li><p>导入spring的坐标spring-context</p></li><li><p>配置bean（别配接口，配实现类，要拿bean造对象）</p><p>bean标签表示配置bean、id属性表示给bean起名字、class属性表示给bean定义类型</p></li><li><p>获取IOC容器</p></li><li><p>通过当时定义的id获取bean</p></li></ol><h4 id="1-2-DI依赖注入，把对应的属性值注入对象"><a href="#1-2-DI依赖注入，把对应的属性值注入对象" class="headerlink" title="1.2 DI依赖注入，把对应的属性值注入对象"></a>1.2 DI依赖注入，把对应的属性值注入对象</h4><h5 id="简要思路：-1"><a href="#简要思路：-1" class="headerlink" title="简要思路："></a>简要思路：</h5><p>基于IOC管理bean</p><p>Service中使用new形式创建的Dao对象是否保留？-》<strong>否</strong></p><p>Service中需要Dao对象如何进入到Service？-》<strong>提供方法</strong></p><p>Service与Dao间的关系如何描述？-》<strong>配置</strong></p><h5 id="具体步骤：-1"><a href="#具体步骤：-1" class="headerlink" title="具体步骤："></a>具体步骤：</h5><p>1.删除使用new形式创建对象的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private XXXDao XXXDao;</span><br></pre></td></tr></table></figure><p>2.提供依赖对象对应的setter方法</p><p>3.配置service与dao之间的关系</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property name=&quot;XXXDao属性名称&quot; ref=&quot;id名称&quot;&gt;</span><br></pre></td></tr></table></figure><p>4.通过当时定义的id获取bean</p><p>IOC体系结构设计</p><p><a href="https://postimg.cc/rKkJn6zM">spring-framework-ioc-source-7.png</a></p><ul><li><p><strong>BeanFactory： 工厂模式定义了IOC容器的基本功能规范</strong></p><p>BeanFactory 有三个子类：ListableBeanFactory、HierarchicalBeanFactory 和AutowireCapableBeanFactory，而BeanFactory定义多层次接口的原因在于<strong>区分在 Spring 内部在操作过程中对象的传递和转化过程中，对对象的数据访问所做的限制</strong>。 </p></li><li><p><strong>BeanRegistry： 向IOC容器手工注册 BeanDefinition 对象的方法</strong></p><p>Spring 配置文件中每一个<code>&lt;bean&gt;</code>节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册 BeanDefinition 对象的方法。</p></li><li><h5 id="BeanDefinition：各种Bean对象及其相互的关系"><a href="#BeanDefinition：各种Bean对象及其相互的关系" class="headerlink" title="BeanDefinition：各种Bean对象及其相互的关系"></a>BeanDefinition：各种Bean对象及其相互的关系</h5><blockquote><p>Bean对象存在依赖嵌套等关系，所以设计者设计了BeanDefinition，它用来对Bean对象及关系定义；我们在理解时只需要抓住如下三个要点：</p><ul><li><strong>BeanDefinition 定义了各种Bean对象及其相互的关系</strong></li><li><strong>BeanDefinitionReader 这是BeanDefinition的解析器</strong></li><li><strong>BeanDefinitionHolder 这是BeanDefination的包装类，用来存储BeanDefinition，name以及aliases等。</strong></li></ul></blockquote></li></ul><p><a href="https://postimg.cc/bGJzbNnJ">spring-framework-ioc-source-71.png</a></p><h4 id="1-3Spring初始化和创建对象流程"><a href="#1-3Spring初始化和创建对象流程" class="headerlink" title="1.3Spring初始化和创建对象流程"></a>1.3Spring初始化和创建对象流程</h4><h5 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h5><p><strong>第一个过程：BeanDifinition的Resource定位</strong></p><p>这个Resource定位指的是BeanDifinition的资源定位，它由ResourceLoader通过统一的Resource接口来完成，这个Resource对各种形式的BeanDifinition的使用都提供了统一的接口。</p><p>对于这些BeanDifinition的存在形式，相信大家都不会感到陌生。比如，</p><p>在文件系统中的Bean定义信息可以使用FileSystemResource来进行抽象。</p><p>在类路劲中的Bean定义信息可以使用ClassPathResource。</p><p>这个定位过程类似于容器寻找数据的过程，就想水桶装水先要把水找到一样。</p><p><strong>第二个过程：BeanDifinition的载入</strong></p><p>这个载入过程是把用户定义好的Bean表示成Ioc容器内部的数据结构，而这个容器内部的数据结构就是BeanDifinition。具体来说，BeanDifinition实际上就是POJO对象在IOC容器中的抽象，通过这个BeanDifinition定义的数据结构，使IOC容器能够方便的对POJO对象也就是Bean进行管理。</p><p><strong>第三个过程：BeanDifinition的注册</strong></p><p>这个操作是通过调用BeanDifinitionRegistry借口来实现的。这个注册过程把载入过程中解析得到的BeanDifinition向Ioc容器进行注册。在阅读源码中可知，在IOC容器内部将BeanDifinition注入到一个HashMap中去，Ioc容器就是通过这个HashMap来持有这些BeanDifinition数据的。<br><a href="https://postimg.cc/jw35j7wX">spring-framework-ioc-source-9.png</a></p><h3 id="2-Spring-IOC的底层实现"><a href="#2-Spring-IOC的底层实现" class="headerlink" title="2.Spring IOC的底层实现"></a>2.Spring IOC的底层实现</h3><p>原理：xml解析、工厂模式、反射。 </p><ul><li>先通过createBeanFactory创建出一个Bean工厂</li><li>开始循环创建对象，优先通过getBean、doGetBean从容器中查找（容器中bean为单例模式）</li><li>若容器中找不到，则通过createBean、doCreatBean方法，以及反射的方式创建对象，一般情况下是使用的是无参构造器（getDeclareConstructor、newInstance）</li><li>进行对象的属性填充populateBean</li><li>进行其他初始化操作initializingBean</li></ul><h3 id="3-bean的生命周期"><a href="#3-bean的生命周期" class="headerlink" title="3.bean的生命周期"></a>3.bean的生命周期</h3><ol><li>实例化bean：反射的方式生成对象</li><li>填充bean的属性：populateBean（），循环依赖的问题（三级缓存）</li><li>调用aware接口相关的方法：invokeAwareMethod（完成BeanName，BeanFactory，BeanClassLoader对象的属性设置）</li><li>调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor设置ApplicationContext，Environment，ResourceLoader、EmbenddValueResolver等对象）</li><li>调用initmethod方法：invokerInitmethod（），判断是否实现了initlizingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用</li><li>调用BeanPostProcess的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator注册Destuction相关的回调接口：钩子函数</li><li>获取完整的对象，可以通过getBean的方式来进行对象的获取</li><li>销毁流程：1.判断是否实现了DispoableBean接口。2.调用destroyMethod方法</li></ol><p><a href="https://postimg.cc/zVFb0QhK"><img src="/" alt="spring-framework-ioc-source-102.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线数仓</title>
      <link href="/2022/02/21/%E7%A6%BB%E7%BA%BF%E6%95%B0%E4%BB%93/"/>
      <url>/2022/02/21/%E7%A6%BB%E7%BA%BF%E6%95%B0%E4%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
